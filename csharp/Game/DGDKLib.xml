<?xml version="1.0"?>
<doc>
    <assembly>
        "DGDKLib"
    </assembly>
    <members>
        <member name="M:DGDK.CdgdkMemblock.MemblockDwordB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a dword from the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The DWord returned will be a value between 0 and 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockDwordB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a dword into the specified location of the memblock. A DWord is the term for a datatype consisting of four bytes. The memblock must exist or the command will fail. The Position value is specified in bytes. The DWord value must be a value between 0 and 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="ulData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockWordB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will write a word into the specified location of the memblock. A Word is the term for a datatype consisting of two bytes. The memblock must exist or the command will fail. The Position value is specified in bytes. The Word must be a value between 0 and 65535. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="data" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockByteB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte)">
            <summary>
This command will write a byte into the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The Byte value must be a value between 0 and 255. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="data" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeArrayFromMemblock(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="ulArrayptr" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblockFromArray(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMbi" />
            <param name="ulArrayptr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeImageFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make an image from a memblock. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as described in the respective memblock construction command. 
</summary>
            <param name="lMageid" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblockFromImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a memblock from an image. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as Width(DWORD), Height(DWORD), Depth(DWORD), Data(BYTES). 
</summary>
            <param name="lMbi" />
            <param name="lMageid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeSoundFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a sound from a memblock. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as described in the respective memblock construction command. 
</summary>
            <param name="lSoundindex" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblockFromSound(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a memblock from a sound. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as BitsPerSecond(DWORD), Frequency(DWORD), Duration(DWORD), Sound Data(BYTES). 
</summary>
            <param name="lMbi" />
            <param name="lSoundindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ChangeMeshFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change a mesh from a memblock. This command is similar to dbMakeMeshFromMemblock, and skips the mesh creation step to make this command faster. You must ensure the mesh uses the same data structure as the memblock or this command will produce undesirable results. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as described in the respective memblock construction command. 
</summary>
            <param name="lMeshid" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMeshFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a mesh from a memblock. The specified values must be integer values and the source resource must exist or the command will fail. The mesh memblock is layed out in the following format. The first DWORD is the FVF Format, which controls which components each vertex of your mesh will contain. The default FVF Format is 338. The second DWORD is the FVF Size, which is the size in bytes of a single vertex element. This size is respective of the FVF Format you specified, which has a default of 36. The third DWORD is the number of Vertices in your mesh. The remainder of the memblock contains mesh data. The mesh data is a sequential list of vertices, containing the component data arranged as specified by the FVF Format. The default FVF Format would specify the following arrangement of data within the vertex element, which is duplicated for every vertex specified in the memblock. Each grouping of three vertices makes a polygon. Given the default FVF Format of 338, the first three FLOAT values (12 bytes) of the vertex element would be the XYZ coordinates in model space. The second three FLOAT values (12 bytes) of the vertex element would be the normals coordinates in model space. The next DWORD is a diffuse colour component that specifies the colour of the vertex. The last two FLOATS are UV texture coordinates for the vertex. This adds up to 36 bytes which is the size of a single vertex. Multiply 36 by the number of vertices in the mesh and you get the overall size of the mesh data. 
</summary>
            <param name="lMeshid" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblockFromMesh(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a memblock from a mesh. The specified values must be integer values and the source resource must exist or the command will fail. The mesh memblock is layed out in the following format. The first DWORD is the FVF Format, which controls which components each vertex of your mesh will contain. The default FVF Format is 338. The second DWORD is the FVF Size, which is the size in bytes of a single vertex element. This size is respective of the FVF Format you specified, which has a default of 36. The third DWORD is the number of Vertices in your mesh. The remainder of the memblock contains mesh data. The mesh data is a sequential list of vertices, containing the component data arranged as specified by the FVF Format. The default FVF Format would specify the following arrangement of data within the vertex element, which is duplicated for every vertex specified in the memblock. Each grouping of three vertices makes a polygon. Given the default FVF Format of 338, the first three FLOAT values (12 bytes) of the vertex element would be the XYZ coordinates in model space. The second three FLOAT values (12 bytes) of the vertex element would be the normals coordinates in model space. The next DWORD is a diffuse colour component that specifies the colour of the vertex. The last two FLOATS are UV texture coordinates for the vertex. This adds up to 36 bytes which is the size of a single vertex. Multiply 36 by the number of vertices in the mesh and you get the overall size of the mesh data. 
</summary>
            <param name="lMbi" />
            <param name="lMeshid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeBitmapFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a bitmap from a memblock. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as described in the respective memblock construction command. 
</summary>
            <param name="lBitmapindex" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblockFromBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a memblock from a bitmap. The specified values must be integer values and the source resource must exist or the command will fail. The memblock stores the data as Width(DWORD), Height(DWORD), Depth(DWORD), Data(BYTES). 
</summary>
            <param name="lMbi" />
            <param name="lBitmapindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MemblockFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will read a float from the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The Float returned will be a value between -2147483648 to 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will write a float into the specified location of the memblock. A Float is the term for a datatype consisting of four bytes, also referred to as a real number. The memblock must exist or the command will fail. The Position value is specified in bytes. The Float value must be a value between -2147483648 to 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="fData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MemblockDWORD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a dword from the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The DWord returned will be a value between 0 and 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockDWORD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a dword into the specified location of the memblock. A DWord is the term for a datatype consisting of four bytes. The memblock must exist or the command will fail. The Position value is specified in bytes. The DWord value must be a value between 0 and 2147483648. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="ulData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MemblockWord(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a word from the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The Word returned will be a value between 0 and 65535. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockWord(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a word into the specified location of the memblock. A Word is the term for a datatype consisting of two bytes. The memblock must exist or the command will fail. The Position value is specified in bytes. The Word must be a value between 0 and 65535. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="lData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MemblockByte(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a byte from the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The Byte returned will be a value between 0 and 255. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.WriteMemblockByte(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a byte into the specified location of the memblock. The memblock must exist or the command will fail. The Position value is specified in bytes. The Byte value must be a value between 0 and 255. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lPos" />
            <param name="lData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.CopyMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy one section of a memblock to another section of another memblock. The From and To parameters must be existing memblocks. The PosFrom and PosTo parameters must be byte locations within the respective memblocks. The Bytes parameter is the number of bytes you wish to copy from one memblock to the other. 
</summary>
            <param name="lMbiF" />
            <param name="lMbiT" />
            <param name="lPosF" />
            <param name="lPosT" />
            <param name="lSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.GetMemblockSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the size of the specified memblock. The size will be returned in bytes. The parameter must be an integer value. 
</summary>
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.GetMemblockPtr(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the actual pointer of the specified memblock. You can use this pointer to pass into a DLL in order to access the memory directly. The parameter must be an integer value. 
</summary>
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MemblockExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified memblock exists, otherwise zero is returned. The parameter must be an integer value. 
</summary>
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.DeleteMemblock(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a memblock. If the memblock does not exist this command will fail. The parameter must be specified using an integer value. 
</summary>
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.MakeMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a memblock of the given size. If the memblock already exists this command will fail. The parameters must be specified using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ExtGetMemblockPtr(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ExtSetMemblockSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMbi" />
            <param name="ulSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ExtGetMemblockSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ExtFreeMemblock(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMemblock.ExtMakeMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lMbi" />
            <param name="ulSize" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkMemblock">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkText.Val(System.Char*,System.Single*)">
            <summary>
This command will return an integer number of the string provided by converting the string to a numerical form. 
</summary>
            <param name="sSrcStr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextTransparent">
            <summary>
This command will set the background of the text you are about to output as transparent. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextOpaque">
            <summary>
This command will set the background of the current text settings to the color of the background ink. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.GetTextHeight(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.GetTextWidth(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will output the provided string using the current text settings at the specified coordinates on the screen. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextFontC(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the typeface of the font you wish to use. You can optionally specify a character set value when selecting your font. The character set value allows you to use other western non-unicode languages not available through the standard ASCII character set. To switch the character set to another language, use an international charset code. These codes can be located in the Principals section along with the ASCII Character Code Lists. 
</summary>
            <param name="sTypeface" />
            <param name="lCharacterSet" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextColor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lAlpha" />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.NextToken(System.Char*,System.Char**)">
            <summary />
            <param name="sDelim" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.FirstToken(System.Char*,System.Char*,System.Char**)">
            <summary />
            <param name="sSource" />
            <param name="sDelim" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.CompareCase(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sA" />
            <param name="sB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.FindSubString(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sSource" />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.FindLastChar(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sSource" />
            <param name="sChar" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.FindFirstChar(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sSource" />
            <param name="sChar" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Reverse(System.Char*)">
            <summary />
            <param name="sA" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Append(System.Char*,System.Char*)">
            <summary />
            <param name="sA" />
            <param name="sB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Spaces(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lSpaces" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Text3D(System.Char*)">
            <summary />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextHeight(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the height of the provided string using the current text settings. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextWidth(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the width of the provided string using the current text settings. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextStyle(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a code based on the style of the current text settings. The return value will be an integer number of zero for normal, 1 for italic, 2 for bold and 3 for bold italic. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextSize(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the point size of the current font described by the current text settings. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextFont(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.TextBackgroundType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the current text settings is set to using a transparent background, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToTransparent">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToOpaque">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToBoldItalic">
            <summary>
This command will set the text style to bold and italic. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToBold">
            <summary>
This command will set the text style to bold and non-italic. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToItalic">
            <summary>
This command will set the text style to non-bold and italic. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextToNormal">
            <summary>
This command will set text style to non-bold and non-italic. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextSize(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the point size of any text you are about to output. The point size should be an integer value. The size of printed text will not change if the font used does not support the size specified. Using this command with dbSetTextFont to set a font type that allows multiple sizes such as 'Arial'. 
</summary>
            <param name="lSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextFontB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the typeface of the font you wish to use. You can optionally specify a character set value when selecting your font. The character set value allows you to use other western non-unicode languages not available through the standard ASCII character set. To switch the character set to another language, use an international charset code. These codes can be located in the Principals section along with the ASCII Character Code Lists. 
</summary>
            <param name="sTypeface" />
            <param name="lCharacterSet" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.SetTextFont(System.Char*)">
            <summary>
This command will set the typeface of the font you wish to use. You can optionally specify a character set value when selecting your font. The character set value allows you to use other western non-unicode languages not available through the standard ASCII character set. To switch the character set to another language, use an international charset code. These codes can be located in the Principals section along with the ASCII Character Code Lists. 
</summary>
            <param name="sTypeface" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.CenterText(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will output the provided string using the current text settings at the specified coordinates. The text will be centered on the iX coordinate given. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Text(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will output the provided string using the current text settings at the specified coordinates on the screen. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.PerformChecklistForFonts">
            <summary>
This command will build a checklist and search for all available fonts on the system. Use the check list commands found in the System command set to access the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.ValR(System.Char*,System.Int64*)">
            <summary />
            <param name="sSrcStr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.StrDouble(System.Double)">
            <summary />
            <param name="dValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.ValF(System.Char*,System.Single*)">
            <summary />
            <param name="sSrcStr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Upper(System.Char*,System.Char**)">
            <summary />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.StrB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Str(System.Single,System.Char**)">
            <summary />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Right(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="sText" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Mid(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="sText" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Lower(System.Char*,System.Char**)">
            <summary />
            <param name="sText" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Len(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the number of characters in the string provided. Non-printable control characters and blanks are counted. 
</summary>
            <param name="sSrcStr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Left(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="sText" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Hex(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Chr(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Bin(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkText.Asc(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value that represents the ASCII code for the first character of the provided string. 
</summary>
            <param name="sSrcStr" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkText">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightToObjectPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will position an existing light to the location of another object. 
</summary>
            <param name="lID" />
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightSpecularOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightSpecularOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightAttenuation2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightAttenuation1(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightAttenuation0(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightFalloff(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightAmbient(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fA" />
            <param name="fR" />
            <param name="fG" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightSpecular(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fA" />
            <param name="fR" />
            <param name="fG" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightRange(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the current range of the light source. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightVisible(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a 1 if the light is active. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightDirectionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z value of the light direction. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightDirectionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y value of the light direction. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightDirectionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X value of the light direction. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z position of the light. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y position of the light. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X position of the light. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return 1 for point, 2 for spot and 3 for directional light type. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.LightExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one of the light exists. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetVector3ToLightRotation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z angles from the specified light rotation. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.RotateLightB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will rotate an existing light within the scene. Only spot lights can make use of this command. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetVector3ToLightPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z coordinates from the specified light position. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.PositionLightB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will position an existing light within the scene. Only spot lights and point lights can make use of this command. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogDistanceB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the visible distance of the fog based on the view from the camera. The distance value represents the Z depth at which the fog obscures 3D objects. A distance of zero sets the fog to obscure the camera entirely. A distance of 5000 places the fog to obscure 3D objects as they are Z clipped by the system. A distance greater than 5000 will not obscure distant 3D objects and will allow the objects to be visibly clipped. The parameters should be specified using integer values. 
</summary>
            <param name="lStartDistance" />
            <param name="lFinishDistance" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogDistance(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the visible distance of the fog based on the view from the camera. The distance value represents the Z depth at which the fog obscures 3D objects. A distance of zero sets the fog to obscure the camera entirely. A distance of 5000 places the fog to obscure 3D objects as they are Z clipped by the system. A distance greater than 5000 will not obscure distant 3D objects and will allow the objects to be visibly clipped. The parameters should be specified using integer values. 
</summary>
            <param name="lDistance" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogColorB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the color of the fogging effect. The parameter should be specified using an integer value. The color value can be generated using the RGB command to create over 16 million different colors of fog. 
</summary>
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogColor(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the color of the fogging effect. The parameter should be specified using an integer value. The color value can be generated using the RGB command to create over 16 million different colors of fog. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogOff">
            <summary>
This command will deactivate the effect of fogging, if the fog has been previously activated using the dbFogOn command. All fog color and distance settings are safely stored when using this command, allowing a call to dbFogOn to restore all fog settings. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.FogOn">
            <summary>
This command will activate the effect of fogging, if the current display card supports it. All fog color and distance settings are safely restored when using this command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.ColorAmbientLight(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will changes the current ambient light colour. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetAmbientLight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the percentage level of ambient light. A setting of 100 provides full illumination and no shadow whereas a setting of zero gives no illumination and substantial shadowing on any 3D object. 
</summary>
            <param name="lPercent" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetNormalizationOff">
            <summary>
This command will deactivate normalization of all 'normals' data. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetNormalizationOn">
            <summary>
This command will normalize all 'normals' contained in 3D rendering data. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.ColorLightB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color an existing light within the scene. You can specify the color as a single colourvalue using the RGB command. Alternatively you can specify the color values individually by providing a red, green and blue component value in the range of -255 to 255. 
</summary>
            <param name="lID" />
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.ColorLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color an existing light within the scene. You can specify the color as a single colourvalue using the RGB command. Alternatively you can specify the color values individually by providing a red, green and blue component value in the range of -255 to 255. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightToObjectOrientation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will rotate an existing light to the orientation of another object. To create the effect of headlamps, two spotlights would each take the rotational orientation of a car. 
</summary>
            <param name="lID" />
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightToObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.ShowLight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show an existing light within the scene. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.HideLight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide an existing light and remove its influence from the scene. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.PointLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will point an existing light at a location within the scene. Only spot lights and directional lights can make use of this command. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.RotateLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will rotate an existing light within the scene. Only spot lights can make use of this command. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.PositionLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will position an existing light within the scene. Only spot lights and point lights can make use of this command. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetLightRange(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the range of the light, which determines how far it reaches from its point of origin. Directional lights do not have a range. 
</summary>
            <param name="lID" />
            <param name="fRange" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetDirectionalLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set an existing light to that of a directional light. The direction is specified using directional values assuming that the origin of the light is 0,0,0. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetSpotLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will set an existing light to that of a spot light. The spot light is defined by a constant cone of inner light and a gradual fading of light within an outer cone. The inner and outer cones are defined by an angle ranging from 0 to 360. 
</summary>
            <param name="lID" />
            <param name="fInner" />
            <param name="fOuter" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.SetPointLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set an existing light to that of a point light. The position is specified using a coordinate in 3D space. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.DeleteLight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete an existing light from the scene. Light zero is the default light and cannot be removed, only hidden. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkLight.MakeLight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a new light in the scene. You can create up to 7 new lights, numbered 1 to 7. Light zero is the default light and is always present. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkLight">
            <summary />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector4B(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fW" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector3B(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector2B(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.Get3DMathsExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.GetVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ProjectionMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy the projection matrix into the specified matrix. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ViewMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy the view matrix into the specified matrix. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.WorldMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy the world matrix into the specified matrix. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TransposeMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will transpose a matrix. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TranslateMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will produce a translation matrix. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ScaleMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will scale a matrix. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.RotateYPRMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command builds a matrix from Pitch Yaw Roll values. 
</summary>
            <param name="lID" />
            <param name="fYaw" />
            <param name="fPitch" />
            <param name="fRoll" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.RotateZMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the matrix on it's z axis. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.RotateYMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the matrix on it's y axis. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.RotateXMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the matrix on it's x axis. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildRotationAxisMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command builds a Rotation Axis Matrix. 
</summary>
            <param name="lResult" />
            <param name="lVectorAxis" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildReflectionMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Reflection Matrix. 
</summary>
            <param name="lResult" />
            <param name="fA" />
            <param name="fB" />
            <param name="fC" />
            <param name="fD" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildFovLHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Field-Of-View left handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fFOV" />
            <param name="fAspect" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildFovRHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Field-Of-View right handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fFOV" />
            <param name="fAspect" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildPerspectiveLHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Perspective left handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildPerspectiveRHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Perspective right handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildOrthoLHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Orthogonal left handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildOrthoRHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command builds a Orthogonal right handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fZNear" />
            <param name="fZFar" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildLookAtLHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command builds a LOOKAT left handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="lVectorEye" />
            <param name="lVectorAt" />
            <param name="lVectorUp" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BuildLookAtRHMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command builds a LOOKAT right handed Matrix. 
</summary>
            <param name="lResult" />
            <param name="lVectorEye" />
            <param name="lVectorAt" />
            <param name="lVectorUp" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsIdentityMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command returns a one if the matrix is an identity matrix. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.InverseMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will invert a matrix. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SetIdentityMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified matrix to a standard identity matrix. Transforming a vector or matrix using an identity matrix will not produce a change in the resulting data. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsNotEqualMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsEqualMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command returns a one if the matrices specified are identical, otherwise zero. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DivideMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will divide a matrix. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MultiplyMatrix4B(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will multiply two matrices together. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MultiplyMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will multiply two matrices together. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SubtractMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will subtract one matrix from another. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.AddMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will add two matrices together. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CopyMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy a matrix. 
</summary>
            <param name="lSource" />
            <param name="lDestination" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DeleteMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will delete a matrix. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MakeMatrix4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will create a MATRIX4 data item. Unlike the datatypes you are used to, these datatypes are stored internally and referenced by an index value. The MATRIX4 datatype contains sixteen float values representing a 4x4 matrix of data. This is a typical 3D matrix used in many advanced 3D calculations. You can imagine the grid headed with columns X,Y,Z,W by rows X,Y,Z,W. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TransformVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will transform a vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="lMatrix" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ScaleVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will scale a vector. This defines as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.NormalizeVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will normalize a vector. This defines as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MinimizeVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will minimize a vector. This defines as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MaximizeVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will maximize a vector. This defines as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LinearInterpolateVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command perform a linear interpolation between 2 vectors. This is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SquaredLengthVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the squared length of a vector. This defines as a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LengthVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the length of a vector. This is defined as a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.HermiteVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a hermite spline interpolation on a vector. This is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CatmullRomVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a catmull rom interpolation on the specified vector. This vector is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BCCVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command produces the BaryCentricCoordinates vector. This vector is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="f" />
            <param name="fG" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.WVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the W value from the vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ZVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the Z coordinate from the vector. This defines at a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.YVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the Y coordinate from the vector. This defines at a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.XVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the X coordinate from the vector. This defines at a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsNotEqualVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsEqualVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command returns a one if the vectors specified are identical, otherwise zero. This defines as a four float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DivideVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will divide a vector. This is defined as a four float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MultiplyVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will multiply two vectors together. This defines as a four float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SubtractVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will subtract one vector from another. This vector is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.AddVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will add two vectors together. This vector is defined as a four float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CopyVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command copy a vector. This vector is defined as a four float vector. 
</summary>
            <param name="lSource" />
            <param name="lDestination" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SetVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command will set a vector. This defines as a four float vector. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fW" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DeleteVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will delete a vector. This is defined as a four float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MakeVector4(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will create a VECTOR4 data item. Unlike the datatypes you are used to, these datatypes are stored internally and referenced by an index value. The VECTOR4 datatype contains four float values representing X, Y, Z and W. This datatype is typically used to store transformed and untransformed 3D world space coordinates. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ZVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the Z coordinate from the vector. This defines at a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.YVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the Y coordinate from the vector. This defines at a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.XVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the X coordinate from the vector. This defines at a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TransformNormalsVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will transform a normals vector. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="lMatrix" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TransformCoordsVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will transform vector. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="lMatrix" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ProjectVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command projects a given vector from object space into screen space. This defines as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="lProjectionMatrix" />
            <param name="lViewMatrix" />
            <param name="lWorldMatrix" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SquaredLengthVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the squared length of a vector. This defines as a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LengthVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the length of a vector. This is defined as a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DotProductVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the dot product of two vectors. This is defined as a three float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ScaleVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will scale a vector. This defines as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.NormalizeVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will normalize a vector. This defines as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MinimizeVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will minimize a vector. This defines as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MaximizeVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will maximize a vector. This defines as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LinearInterpolateVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command perform a linear interpolation between 2 vectors. This is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.HermiteVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a hermite spline interpolation on a vector. This is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CrossProductVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will calculate a Cross Product Vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CatmullRomVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a catmull rom interpolation on the specified vector. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BCCVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command produces the BaryCentricCoordinates vector. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="f" />
            <param name="fG" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsNotEqualVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsEqualVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command returns a one if the vectors specified are identical, otherwise zero. This defines as a three float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DivideVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will divide a vector. This is defined as a three float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MultiplyVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will multiply two vectors together. This defines as a three float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SubtractVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will subtract one vector from another. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.AddVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will add two vectors together. This vector is defined as a three float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CopyVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command copy a vector. This vector is defined as a three float vector. 
</summary>
            <param name="lSource" />
            <param name="lDestination" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SetVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set a vector. This defines as a three float vector. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DeleteVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will delete a vector. This is defined as a three float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MakeVector3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will create a VECTOR3 data item. Unlike the datatypes you are used to, these datatypes are stored internally and referenced by an index value. The VECTOR3 datatype contains three float values representing X, Y and Z. This datatype is typically used to store 3D world space coordinates. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.TransformCoordsVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will transform a vector. This vector is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="lMatrix" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.ScaleVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will scale a vector. This defines as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.NormalizeVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will normalize a vector. This defines as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MinimizeVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will minimize a vector. This defines as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MaximizeVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will maximize a vector. This defines as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LinearInterpolateVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command perform a linear interpolation between 2 vectors. This is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SquaredLengthVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the squared length of a vector. This defines as a two float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.LengthVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the length of a vector. This is defined as a two float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.HermiteVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a hermite spline interpolation on a vector. This is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DotProductVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the dot product of two vectors. This is defined as a two float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CCWVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the z component by taking the cross product of both vectors. This vector is defined as a two float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CatmullRomVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command performs a catmull rom interpolation on the specified vector. This vector is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="lD" />
            <param name="fS" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.BCCVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command produces the BaryCentricCoordinates vector. This vector is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <param name="lC" />
            <param name="f" />
            <param name="fG" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.YVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the Y coordinate from the vector. This defines at a two float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.XVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command returns the X coordinate from the vector. This defines at a two float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsNotEqualVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.IsEqualVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command returns a one if the vectors specified are identical, otherwise zero. This defines as a two float vector. 
</summary>
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DivideVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will divide a vector. This is defined as a two float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MultiplyVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will multiply two vectors together. This defines as a two float vector. 
</summary>
            <param name="lID" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SubtractVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will subtract one vector from another. This vector is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.AddVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will add two vectors together. This vector is defined as a two float vector. 
</summary>
            <param name="lResult" />
            <param name="lA" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.CopyVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command copy a vector. This vector is defined as a two float vector. 
</summary>
            <param name="lSource" />
            <param name="lDestination" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.SetVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will set a vector. This defines as a two float vector. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.DeleteVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will delete a vector. This is defined as a two float vector. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.Cdgdk3DMaths.MakeVector2(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will create a VECTOR2 data item. Unlike the datatypes you are used to, these datatypes are stored internally and referenced by an index value. The VECTOR2 datatype contains two float values representing X and Y. This datatype is typically used to store screen based coordinates. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.Cdgdk3DMaths">
            <summary>
The Cdgdk3DMaths class contains all of the mathamatical functions for 3D
vector and matrice calculations.
</summary>
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetGameLost(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the net game has been lost, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetGameExists(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the net game exists, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SetNetConnectionB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will set the machine to a specific connection. The Connection Number can be obtained by using the index of the checklist produced by the PERFORM CHECKLIST FOR NET CONNECTIONS command. You can optionally specify Address Data depending on the connection type. If you connect by TCP/IP the Address Data should be an IP and Url Address. If the connection type is MODEM, you should specify a phone number if you are dialling or leave blank if you are answering. If the connection type is SERIAL, it is recommended you leave the Address Data blank to obtain the Windows Serial Configuration Dialogue Box. IPX connections require no additional Address Data. 
</summary>
            <param name="lNdex" />
            <param name="sIpaddress" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SetNetConnection(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the machine to a specific connection. The Connection Number can be obtained by using the index of the checklist produced by the PERFORM CHECKLIST FOR NET CONNECTIONS command. You can optionally specify Address Data depending on the connection type. If you connect by TCP/IP the Address Data should be an IP and Url Address. If the connection type is MODEM, you should specify a phone number if you are dialling or leave blank if you are answering. If the connection type is SERIAL, it is recommended you leave the Address Data blank to obtain the Windows Serial Configuration Dialogue Box. IPX connections require no additional Address Data. 
</summary>
            <param name="lNdex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.FreeNetPlayer(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will remove a player from the current net game. The Player Number refers to the Unique ID that was given to the player when it was created. You can obtain this value from the checklist value a result produced when you use the PERFORM CHECKLIST FOR NET PLAYERS command. 
</summary>
            <param name="lPlayerid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetBufferSize(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the number of items queuing in the net buffer to be processed. This buffer can fill up if there is too much data coming into the net game. You can use this value to regulate the amount of traffic your program generates thus reducing this value. An ideal count is zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.DefaultNetGame(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will automatically set up a net game in one command. It will create a game if non exists on the most suitable network connection, and join a game that already exists. It will select a LAN connection first, then a TCP/IP connection and then Serial or Modem connection. You can specify both a Game name and a Player name, as well as the number of players allowed in the game session. You can also specify a flag that determines the kind of game that will be created. Specify a game type of 1 to make the game pass host control to another player if the host leaves play. Specify a game type value of 2 if you want to create a client server game where the host player channels all communication to the other players. The command also returns the Player Number that you can use to distinguish your player from other network players. 
</summary>
            <param name="sLpGameName" />
            <param name="sLpPlayerName" />
            <param name="lPlayerMax" />
            <param name="lFlagNum" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetGameNowHosting(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the application has just been made the host of the net game, otherwise zero is returned. During a Peer to Peer net game, if the host leaves the net game then host status is migrated to another player in the net game. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetPlayerDestroyed(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Player Number of a newly removed player from the net game. The Player Number is the Unique ID you have been using to reference this player. You do not need to free this player when you receive this signal as it has already been done for you. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetPlayerCreated(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Player Number of a newly created player to the net game. The Player Number is the Unique ID you can use to initialise a new player in your game data. You do not need to create a new player when you receive this signal as it has already been done for you. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetSessionLost(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetSessionExists(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessagePlayerTo(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command returns the Player Number that the current message is being sent to. You can use this to determine who the message is for, and whether it is a message for you. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessagePlayerFrom(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command returns the Player Number that the current message was sent from. You can use this to determine who sent the message. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command returns the type of the current message in the queue. The type can be one of four values. If the type is 1, the message is an integer value. If the type is 2, the message is a float value. If the type is 3, the message is a string. If the type is a 4, then the message is a memblock. If the type is a 5, the message is an image. If the type is a 6, the message is a bitmap. If the type is a 7, the message is a sound. If the type is an 8, the message is a mesh. You must check the type of a message before you can read it correctly using one of the appropriate NET MESSAGE commands. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageExists(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the message queue contains one or more messages for the current application. A value zero means the queue is empty. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageMesh(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return a mesh from the current net message. The net message must be of the mesh type or the command will fail. You can determine the type using the dbNetMessageType command. 
</summary>
            <param name="lMeshindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return a sound from the current net message. The net message must be of the sound type or the command will fail. You can determine the type using the NET MESSAGE TYPE command. 
</summary>
            <param name="lSoundindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageBitmap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return a bitmap from the current net message. The net message must be of the bitmap type or the command will fail. You can determine the type using the dbNetMessageType command. 
</summary>
            <param name="lBitmapindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageImage(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return an image from the current net message. The net message must be of the image type or the command will fail. You can determine the type using the dbNetMessageType command. 
</summary>
            <param name="lMageindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageMemblock(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return a memblock from the current net message. The net message must be of the memblock type or the command will fail. You can determine the type using the dbMessageType command. If a memblock already exists under this number, that memblock is deleted and the new memblock is created in its place. 
</summary>
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageString(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageFloat(System.Single*)">
            <summary>
This command will return a float value from the current net message. The net message must be of the float type or the command will fail. You can determine the type using the dbNetMessageType command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.NetMessageInteger(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value from the current net message. The net message must be of the integer type or the command will fail. You can determine the type using the NET MESSAGE TYPE command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.GetNetMessage">
            <summary>
This command gets the oldest message from the incoming message queue and makes it the current message. Any messages that are sent to this application are stored on a queue and you are able to take each message and process it. You can use the NET MESSAGE EXISTS() command to determine when there are no more messages in the queue. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageMesh(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing a mesh to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lMeshindex" />
            <param name="lGua" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageSound(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing a sound to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lSoundindex" />
            <param name="lGua" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing a bitmap to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lBitmapindex" />
            <param name="lGua" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing an image to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lMageindex" />
            <param name="lGua" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageMemblockB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing a memblock to the specified player. The Player Number must be an integer value and an existing player in the net game. The memblock must exist or the command will fail. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lMbi" />
            <param name="lGua" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing a memblock to the specified player. The Player Number must be an integer value and an existing player in the net game. The memblock must exist or the command will fail. A Player Number of zero will send the message to all players except you. The Guarantee Packet Flag, if set to one, will ensure the message is received and will not be dropped due to slow system performance. 
</summary>
            <param name="lPlayerid" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageString(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will send a message containing a string to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. 
</summary>
            <param name="lPlayerid" />
            <param name="sMessageData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will send a message containing a float value to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. 
</summary>
            <param name="lPlayerid" />
            <param name="fMessageData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SendNetMessageInteger(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will send a message containing an integer value to the specified player. The Player Number must be an integer value and an existing player in the net game. A Player Number of zero will send the message to all players except you. 
</summary>
            <param name="lPlayerid" />
            <param name="lMessageData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.DestroyNetPlayer(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lPlayerid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.CreateNetPlayerEx(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sLayername" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.CreateNetPlayer(System.Char*)">
            <summary>
This command will create another player within the net game. This player will be an additional player to the default player created when you created or joined the game. You can use this command if you wished to populate your net game with allies or enemies to be treated like regular players. The Playername is the given name of the player for the net game. You can optionally return the Player Number at the moment of creation. 
</summary>
            <param name="sLayername" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.PerformChecklistForNetPlayers">
            <summary>
This command will fill the checklist with all the players currently seen by the currently active net game. The checklist contains five pieces of data for each player listed. The checklist string contains the given name of the player. The checklist value A contains a Unique ID provided for the player when the player appeared in the net game. This ID is only unique to the application and will remain with the player as long as it resides in the net game. You can use this ID to reference an array containing the players game data. The checklist value B contains a special universal ID for the player, and this value does not change from machine to machine. You can use it to isolate a player on any machine. Checklist Value C will be set to one if the listed player is the current local player. Checklist Value D will be set to one if the listed player is the host player of the net game. Use the CHECKLIST commands in the SYSTEM command set to read the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.PerformChecklistForNetSessions">
            <summary>
This command will fill the checklist with the names of all the currently available sessions on the previously specified connection. The session names represent a currently running net game. These are net games you are able to join. The index of the checklist is also the session number associated with the session description obtained from this command. Use the CHECKLIST commands in the SYSTEM command set to read the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SetNetConnectionsB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary />
            <param name="lNdex" />
            <param name="sIpaddress" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.SetNetConnections(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lNdex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.PerformChecklistForNetConnections">
            <summary>
This command will fill the checklist with the names of all the currently available connections on the machine. There are usually four types of connections available to you including TCP/IP, IPX, Modem and Serial. TCP/IP is used to connect via an IP Address and is used for Internet games. IPX is used for playing net games over a Local Area Network (LAN). A Modem connection is a two player net game with a Dial player and a Receive player, played over a phone line. A Serial connection is a direct cable connecting two machines, and acts much like a Modem connection. The index of the checklist is also the connection number associated with the connection description obtained from this command. Use the CHECKLIST commands in the SYSTEM command set to read the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.FreeNetGame">
            <summary>
This command will terminate a net game currently in session. You can only have one net game running at any one time per application, so in order to create a new game you must first free up any existing net games currently running. If you joined an existing net game, this command will remove you from the game and the game will continue running without you. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.JoinNetGame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will join a currently running net game session. To join a net game, you must first find one using PERFORM CHECKLIST FOR NET SESSIONS. From this you can find the Session Number required to join the net game. The Playername is the name the player uses when entering the net game session. If the specified session does not exist, or there are too many players in the session, this command will fail. 
</summary>
            <param name="lSessionnum" />
            <param name="sName" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.CreateNetGameB(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a multiplayer net game. The Gamename describes the name of the game and will be the name of the session when the game begins. The Playername is the name you wish to give the initial host of the game. The number of players can be between 2 and 256, and sets the maximum number of players that can join the net game. You can optionally specify a flag which controls the type of net game created. A value of 1 is the default and specifies a Pier to Pier game, where a value of 2 specifies a Client/Server game. A Pier to Pier game has every computer communicate with each other. A Client/Server game has all player traffic routed through the host computer and then broadcasted to the rest of the players. You will need to set a connection before you can create a net game, however this command will automatically select the first connection it finds if you have selected one. 
</summary>
            <param name="sGamename" />
            <param name="sName" />
            <param name="lPlayermax" />
            <param name="lFlagnum" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMultiplayer.CreateNetGame(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a multiplayer net game. The Gamename describes the name of the game and will be the name of the session when the game begins. The Playername is the name you wish to give the initial host of the game. The number of players can be between 2 and 256, and sets the maximum number of players that can join the net game. You can optionally specify a flag which controls the type of net game created. A value of 1 is the default and specifies a Pier to Pier game, where a value of 2 specifies a Client/Server game. A Pier to Pier game has every computer communicate with each other. A Client/Server game has all player traffic routed through the host computer and then broadcasted to the rest of the players. You will need to set a connection before you can create a net game, however this command will automatically select the first connection it finds if you have selected one. 
</summary>
            <param name="sGamename" />
            <param name="sName" />
            <param name="lPlayermax" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkMultiplayer">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support to read up to 32 fire buttons. 
</summary>
            <param name="lButton" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetRegistryString(System.Char*,System.Char*,System.Char**)">
            <summary />
            <param name="sFolder" />
            <param name="sValuekey" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.WriteStringToRegistry(System.Char*,System.Char*,System.Char*)">
            <summary>
Write a string to the specified registry location. The folder name points to the general area within the registry. The key name points to the label that describes the data stored within the registry folder. The string is the text you wish to store. 
</summary>
            <param name="sFolder" />
            <param name="sValuekey" />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.Entry(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ClearDataInput">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ControlDeviceZ(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Z axis value of the current control device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ControlDeviceY(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Y axis value of the current control device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ControlDeviceX(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the X axis value of the current control device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetControlDevice(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.SetControlDevice(System.Char*)">
            <summary>
This command will select a known control device for use as the current device. You must provide the name of the device. Use the checklist command to find all the names of currently available control devices. 
</summary>
            <param name="sName" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.PerformChecklistControlDevices">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceAutoCenterOff">
            <summary>
This command will use the current control device if it has force feedback capability. The command will deactivate any effect of force that has been created with the dbForceAutoCenterOn command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceAutoCenterOn">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to pull to a central position as though connected by springs. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceWaterEffect(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to simulate the effect of moving through water. The force applied to any joystick movement will simulate a dampening effect when fast movements are attempted by the user. The magnitude value determines the strength of the force between 0 and 100. The delay value indicates how many milliseconds the effect lasts for. A delay value of zero indicates an infinite effect of force. 
</summary>
            <param name="lMagnitude" />
            <param name="lDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceNoEffect">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to halt the effect of any forces. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceImpact(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to shudder at a power of magnitude specified between 0 and 100. The delay value specifies how many milliseconds to sustain the effect of force. A delay value of zero indicates an infinite effect of force. 
</summary>
            <param name="lMagnitude" />
            <param name="lDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceShoot(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to recoil like a discharging pistol at a power of magnitude specified between 0 and 100. The delay value specifies how many milliseconds to sustain the effect of force. A delay value of zero indicates an infinite effect of force. 
</summary>
            <param name="lMagnitude" />
            <param name="lDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceChainsaw(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device to rattle like a chainsaw at a power of magnitude specified between 0 and 100. The delay value specifies how many milliseconds to sustain the effect of force. A delay value of zero indicates an infinite effect of force. 
</summary>
            <param name="lMagnitude" />
            <param name="lDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceAngle(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device in the direction specified by the angle value and at a power of magnitude specified between 0 and 100. The delay value specifies how many milliseconds to sustain the effect of force. A delay value of zero indicates an infinite effect of force.
</summary>
            <param name="lMagnitude" />
            <param name="lAngle" />
            <param name="lDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceRight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device right with a power of magnitude specified between 0 and 100. 
</summary>
            <param name="lMagnitude" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceLeft(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device left with a power of magnitude specified between 0 and 100. 
</summary>
            <param name="lMagnitude" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceDown(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device downward with a power of magnitude specified between 0 and 100. 
</summary>
            <param name="lMagnitude" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ForceUp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will use the current control device if it has force feedback capability. The command will force the device upward with a power of magnitude specified between 0 and 100. 
</summary>
            <param name="lMagnitude" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickHatAngle(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for reading up to 4 HAT controllers. When the hat controller is neutral, a value of -1 is returned. When the hat is being used, the return value is in tens of a degree so north would be zero, east would be 900, south is 1800 and west is 2700. 
</summary>
            <param name="lHatID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickTwistZ(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for reading joystick Z twist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickTwistY(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for reading joystick Y twist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickTwistX(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for reading joystick X twist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickSliderD(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for a forth slider value. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickSliderC(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will give support for a third slider value. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickSliderB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Slider B value of the default analogue joystick. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickSliderA(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Slider A value of the default analogue joystick. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireXL(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lButton" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireD(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick fire button D is pressed, otherwise zero will be returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireC(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick fire button C is pressed, otherwise zero will be returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick fire button B is pressed, otherwise zero will be returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickFireA(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick fire button A is pressed, otherwise zero will be returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickZ(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Z axis value of the default analogue joystick. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickY(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Y axis value of the default analogue joystick. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickX(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the X axis value of the default analogue joystick. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickRight(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick is pushed right, otherwise zero is return. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickLeft(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick is pushed left, otherwise zero is return. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickDown(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one, if the default joystick is pushed down, otherwise zero is return. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.JoystickUp(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the default joystick is pushed up, otherwise zero is return. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseMoveZ(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current Z movement value of the mouse pointer. Instead of the actual mouse position, this command returns the difference between the current mouse Z position and the last mouse Z position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseMoveY(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current Y movement value of the mouse pointer. Instead of the actual mouse position, this command returns the difference between the current mouse Y position and the last mouse Y position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseMoveX(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current X movement value of the mouse pointer. Instead of the actual mouse position, this command returns the difference between the current mouse X position and the last mouse X position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseClick(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value if a mouse button is pressed. The integer return value will depend on which mouse button has been pressed. A mouse can have up to four buttons, and each one can be detected using this command. Each button is assigned a value. The left button is assigned a value of 1. The right button is assigned a value of 2. Buttons three and four are assigned values of 4 and 8 respectively. When more than one button is pressed, the value of the buttons are added to produce a combined value you can check for. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseZ(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current Z position of the mouse pointer. The Z position usually belongs to the wheel you can sometimes find in the center of your mouse. The mouse Z position range is 0 to 100. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseY(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current Y position of the mouse pointer. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.MouseX(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current X position of the mouse pointer. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ChangeMouse(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the cursor that belongs to the mouse pointer. A value of zero uses the applications arrow cursor and a value of one will use the hourglass cursor. Values 2 to 31 are custom cursors that can be specified in the project media section and selected with this command. 
</summary>
            <param name="lIcon" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.PositionMouse(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the position of the mouse pointer. By specifying a 2D screen coordinate, you can relocate the location of the mouse pointer at any time. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ShowMouse">
            <summary>
This command will let you see the mouse pointer image on screen. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.HideMouse">
            <summary>
This command will hide the mouse pointer image. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetRegistryS(System.Char*,System.Char*,System.Char**)">
            <summary />
            <param name="sFolder" />
            <param name="sValuekey" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.WriteToRegistryS(System.Char*,System.Char*,System.Char*)">
            <summary />
            <param name="sFolder" />
            <param name="sValuekey" />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetRegistry(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
Get a value from the specified registry location. The folder name points to the general area within the registry. The key name points to the label that describes the data stored within the registry folder. 
</summary>
            <param name="sFolder" />
            <param name="sValuekey" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetClipboard(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.WriteToRegistry(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Write a value to the specified registry location. The folder name points to the general area within the registry. The key name points to the label that describes the data stored within the registry folder. The value is the value you wish to store. 
</summary>
            <param name="sA" />
            <param name="sB" />
            <param name="lC" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.WriteToClipboard(System.Char*)">
            <summary>
This command will write a string to the system clipboard. The system clipboard remains in tact even after the program has been terminated and can be used to transfer values from program to program, or otherwise retain string data beyond the scope of the program. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ScanCode(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the scancode of the key currently being pressed. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.KeyState(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the key specified by the scancode is pressed, otherwise zero will be returned. The scancode value is the raw value assigned to the key of the keyboard device and very often is ordered sequentially from the top left of the keyboard to the bottom right. 
</summary>
            <param name="lKey" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ReturnKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the return key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.EscapeKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the escape key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.SpaceKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the space key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ShiftKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the shift key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ControlKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the control key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.RightKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the right arrow key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.LeftKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the left arrow key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.DownKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the down arrow key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.UpKey(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the up arrow key is being pressed, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.GetEntry(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkInput.ClearEntryBuffer">
            <summary>
This command will clear the string current held by the windows system. This string is maintained by the windows message pump and ensures you do not miss characters typed at speed in your application. You can get the contents of this string by using the dbEntry$ command. 
</summary>
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkInput">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkMusic.GetNumberOfCDTracks(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the number of CD tracks currently available from the CD Audio media present on the system. If no CD Audio media is present, this command returns a zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value representing the speed at which the music is playing. The default value is 100, as a percentage of the standard rate. A value of 50 means the music is playing at half the normal speed. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value representing the volume at which the music is playing. The default value is 100, as a percentage of the standard volume. A value of 50 means the music is playing at half the normal volume. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicPaused(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified music is paused, otherwise a zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicLooping(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified music is looping, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicPlaying(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified music is playing, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.MusicExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified music exists, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.SetMusicSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the speed at which the music is playing. The default value is 100, as a percentage of the standard rate of play. A value of 50 means the music is playing at half the normal speed where 200 will play the music twice as fast. 
</summary>
            <param name="lID" />
            <param name="lSpeed" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.SetMusicVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the volume at which the music is playing. The default value is 100, as a percentage of the standard volume of play. A value of 50 means the music is playing at half the normal volume where 200 will play the music twice as loud. 
</summary>
            <param name="lID" />
            <param name="lVolume" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.ResumeMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will resume the specified music number if it currently paused. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.PauseMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will pause the specified music number if it is playing. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.StopMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will stop the specified music number if it is playing. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.LoopMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the specified music continuously. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.PlayMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play the specified music number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.DeleteMusic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified music previously loaded into a music number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.LoadCDMusic(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play CD Audio music stored on your CD. The CD Audio track must be specified and loaded before it can be played. Only one CD Audio track can be loaded and played at any one time. To play a new track, you must delete a previously loaded track before loading the new one. 
</summary>
            <param name="lTrackNumber" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMusic.LoadMusic(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a music file into the specified music number. The music file must be of the MIDI or MP3 format. The music number should be an integer value. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkMusic">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageCubeFace(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="ppCubeMap" />
            <param name="plFace" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageCubeFace(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="pCubeMap" />
            <param name="lFace" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.StretchImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lSizeX" />
            <param name="lSizeY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageVMax(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageUMax(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageEx(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageTranslucency(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lPercent" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageMipmapNum(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lNum" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageMipmapBias(System.Single)">
            <summary />
            <param name="fBias" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageMipmapType(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lType" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageMipmapMode(System.Int16)">
            <summary />
            <param name="bMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy a selected area of the current bitmap. Amongst other things, you can use this command to store sequences of image data and provide animations for sprites. When images are grabbed, they are stored in memory and do not require the bitmap from which the image was taken. The parameters should be specified using integer values. A texture flag of one will grab a pure image and not stretch and filter the image for texture usage. If the image is to be used as a texture, a texture flag of zero should be used. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <param name="ulR" />
            <param name="ulG" />
            <param name="ulB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.WriteImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <param name="lA" />
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.UnlockImage(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LockImage(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageMemory(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageSharing(System.Int16)">
            <summary />
            <param name="bMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageName(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageInternalB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sFilename" />
            <param name="lDivideTextureSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageInternal(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.PasteImageD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will paste the specified image to the screen. Optionally, you can paste images to bitmaps using the dbSetCurrentBitmap command. If the optional transparent flag is set to one, all coloured pixels of RGB(0,0,0) are not drawn. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.PasteImageC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will paste the specified image to the screen. Optionally, you can paste images to bitmaps using the dbSetCurrentBitmap command. If the optional transparent flag is set to one, all coloured pixels of RGB(0,0,0) are not drawn. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageWidth(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImagePointerB(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.MakeImageRenderTarget(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="Format" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.MakeImageJustFormat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="Format" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.MakeImageUsage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="ulUsage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.MakeImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImagePointer(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="ulWidth" />
            <param name="ulHeight" />
            <param name="ulDepth" />
            <param name="sData" />
            <param name="ulDataSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary />
            <param name="lID" />
            <param name="ulDwWidth" />
            <param name="ulDwHeight" />
            <param name="ulDwDepth" />
            <param name="ulPData" />
            <param name="ulDwDataSize" />
            <param name="bLockData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.FreeIcon(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="hIcon" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadIconW(System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SaveIconFromImage(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SetImageColorKey(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the general colorkey for all images. A colorkey allows you to specify a particular RGB colour that will be treated as transparent by the image when used. Transparent pixels of an image are not drawn. You must use this command before loading or grabbing an image in order that a suitable alpha map be generated from the transparent pixels of the desired image to be calculated. The alpha map is then used to decide which pixels are drawn and which pixels are never rendered. 
</summary>
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.ImageExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the image exists. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.RotateImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.DeleteImage(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified image from memory. You must not delete images that are being used by sprites, otherwise those sprites would disappear. Deleting unused images increases system performance. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.PasteImageB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will paste the specified image to the screen. Optionally, you can paste images to bitmaps using the dbSetCurrentBitmap command. If the optional transparent flag is set to one, all coloured pixels of RGB(0,0,0) are not drawn. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.PasteImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will paste the specified image to the screen. Optionally, you can paste images to bitmaps using the dbSetCurrentBitmap command. If the optional transparent flag is set to one, all coloured pixels of RGB(0,0,0) are not drawn. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImageB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy a selected area of the current bitmap. Amongst other things, you can use this command to store sequences of image data and provide animations for sprites. When images are grabbed, they are stored in memory and do not require the bitmap from which the image was taken. The parameters should be specified using integer values. A texture flag of one will grab a pure image and not stretch and filter the image for texture usage. If the image is to be used as a texture, a texture flag of zero should be used. 
</summary>
            <param name="lID" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <param name="lTextureFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.GetImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy a selected area of the current bitmap. Amongst other things, you can use this command to store sequences of image data and provide animations for sprites. When images are grabbed, they are stored in memory and do not require the bitmap from which the image was taken. The parameters should be specified using integer values. A texture flag of one will grab a pure image and not stretch and filter the image for texture usage. If the image is to be used as a texture, a texture flag of zero should be used. 
</summary>
            <param name="lID" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SaveImageB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will save an image to a file. You must specify an existing image number between 1 and 65535. The file must not already exist, otherwise the command will fail. The image file format is determined by the extension given, and can be one of 'BMP', 'DDS', 'JPG' and 'DIB'. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <param name="lCompressionMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.SaveImage(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will save an image to a file. You must specify an existing image number between 1 and 65535. The file must not already exist, otherwise the command will fail. The image file format is determined by the extension given, and can be one of 'BMP', 'DDS', 'JPG' and 'DIB'. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageC(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a picture file as an image. The picture file must be of the BMP, JPG, TGA, DDS, DIB or PNG format. All images loaded are prepared with mipmaps if they do not already have them. TGA, DDS and PNG will retain their alpha channel data when loaded, providing the required transparency information when combined with transparency commands. A Texture Flag of zero will treat the image as a texture and load to fill a texture surface in memory. A value of one will preserve the image without adding mipmaps, scaling or filtering and so retaining its pixel perfect quality. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <param name="lTextureFlag" />
            <param name="lDivideTextureSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a picture file as an image. The picture file must be of the BMP, JPG, TGA, DDS, DIB or PNG format. All images loaded are prepared with mipmaps if they do not already have them. TGA, DDS and PNG will retain their alpha channel data when loaded, providing the required transparency information when combined with transparency commands. A Texture Flag of zero will treat the image as a texture and load to fill a texture surface in memory. A value of one will preserve the image without adding mipmaps, scaling or filtering and so retaining its pixel perfect quality. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <param name="lTextureFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkImage.LoadImageW(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a picture file as an image. The picture file must be of the BMP, JPG, TGA, DDS, DIB or PNG format. All images loaded are prepared with mipmaps if they do not already have them. TGA, DDS and PNG will retain their alpha channel data when loaded, providing the required transparency information when combined with transparency commands. A Texture Flag of zero will treat the image as a texture and load to fill a texture surface in memory. A value of one will preserve the image without adding mipmaps, scaling or filtering and so retaining its pixel perfect quality. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkImage">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteTextureCoord(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will modify the internal UV data of the specified sprite. You can manipulate each vertex of the sprite by specifying a vertex index from 0 to 3. The fU and fV specify a value typically from 0.0 to 1.0. 
</summary>
            <param name="lID" />
            <param name="lVertex" />
            <param name="fTu" />
            <param name="fTv" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.ScaleSpriteB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will expand or shrink the specified sprite according to the scale value provided. If the scale value is zero, the sprite will disappear. If the scale value is 100, the sprite will be set to its original size. If the scale value is set to 200, the size of the sprite will double. 
</summary>
            <param name="lID" />
            <param name="lScale" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.RestoreSpriteBack">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SaveSpriteBack">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.PasteTextureToRect(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,tagRECT)">
            <summary />
            <param name="pTexture" />
            <param name="fU" />
            <param name="fV" />
            <param name="Rect" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.PasteImageEx(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lImageID" />
            <param name="lX" />
            <param name="lY" />
            <param name="fU" />
            <param name="fV" />
            <param name="lTransparent" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.PasteImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will paste the specified image to the screen. Optionally, you can paste images to bitmaps using the dbSetCurrentBitmap command. If the optional transparent flag is set to one, all coloured pixels of RGB(0,0,0) are not drawn. The parameters should be specified using integer values. 
</summary>
            <param name="lImageID" />
            <param name="lX" />
            <param name="lY" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteVisible(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite is visible, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the frame of the specified sprite. Frames are only returned from animated sprites created with the dbCreateAnimatedSprite command. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteBlue(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the diffuse blue value of the specified sprite. The value determines how much blue is used in the sprite, 255 being completely used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteGreen(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the diffuse green value of the specified sprite. The value determines how much green is used in the sprite, 255 being completely used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteRed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the diffuse red value of the specified sprite. The value determines how much red is used in the sprite, 255 being completely used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteAlpha(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the alpha value of the specified sprite. The alpha value determines how much translucency the sprite has, 255 being completely solid. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteAngle(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the angle of the specified sprite. The angle value determines how much the sprite is rotated, and ranges from 0 to 359. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite is overlapping the target sprite specified. If a target sprite has not been specified and a value of zero has been used, this command will return the sprite number of any sprite overlapping it. 
</summary>
            <param name="lID" />
            <param name="lTarget" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteHit(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite has impacted against the target sprite specified. If a target sprite has not been specified and a value of zero has been used, this command will return the sprite number of any sprite impacting against it. 
</summary>
            <param name="lID" />
            <param name="lTarget" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteOffsetY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the current amount of Y shift applied to the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteOffsetX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the current amount of X shift applied to the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteFlipped(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite has been flipped vertically, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteMirrored(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite has been mirrored horizontally, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteScaleY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the specified sprite's vertical scale. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteScaleX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the specified sprite's horizontal scale. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the height of the specified sprite determined by the height of the current image being used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteWidth(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the width of the specified sprite determined by the width of the current image being used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the image number used by the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the current Y position of the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the current X position of the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SpriteExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified sprite exists, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpritePriority(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the relative priority of the specified sprite. All sprites start with a value of zero giving them equal chance of being drawn last. By setting a single sprite a value of one will cause that sprite to be drawn last. You can specify a unique priority value for each sprite creating an order of drawing for every sprite in your program. 
</summary>
            <param name="lID" />
            <param name="lPriority" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.CloneSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clone the specified sprite to the target sprite number. A cloned sprite shares all the settings of the original sprite, and once created can be modified as a sprite in its own right. 
</summary>
            <param name="lID" />
            <param name="lDestinationID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.CreateAnimatedSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create an animated sprite. The command automatically builds a sequence of animation frames from an image file by cutting up the image into a grid specified by the iAcross and iDown values. The iImage Number will be used to hold the complete image. Use the dbPlaySprite command to see the individual frames of this image. 
</summary>
            <param name="lID" />
            <param name="sImage" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lImageID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteTextureCoordinates(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="lVertex" />
            <param name="fTu" />
            <param name="fTv" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the frame of the specified sprite. When a sprite contains an animated sequence of frames created with the dbCreateAnimatedSprite command, you can set the frame directly using this command. 
</summary>
            <param name="lID" />
            <param name="lFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.PlaySprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play an animated sprite. The command defines the start and end frames to be played. These frames must have been previously set up using the dbCreateAnimatedSprite command. The iDelay Value specifies the delay factor between animating frames. A low value is fast, a high value is slow. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <param name="lEnd" />
            <param name="lDelay" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteDiffuse(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the diffuse values of the specified sprite. The diffuse values controls the quantity of colour the sprite uses from each RGB component. The value ranges are 0 to 255, with 255 being completely full and 0 being no color use. If you only specified a value in the Red component, the sprite would appear a shade of red. Same goes for the other colours, and combinations of colour. 
</summary>
            <param name="lID" />
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteAlpha(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the alpha value of the specified sprite. The alpha controls how much of the sprite is present on screen and is used to create a translucent sprite. The Alpha value range is 0 to 255, with 255 being completely solid and 0 being invisible. 
</summary>
            <param name="lID" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSpriteImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the image of the specified sprite. You can manipulate which image the sprite uses by specifying an existing Image for the sprite. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.RotateSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the specified sprite. You can rotate the sprite around 360 degrees specified using the Angle Value using a range of 0 to 359. 
</summary>
            <param name="lID" />
            <param name="fRotate" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.MoveSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the sprite a specified distance. Used in combination with the dbRotateSprite command a very simple top-down player character can be achieved very easily. 
</summary>
            <param name="lID" />
            <param name="fVelocity" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.DeleteSprite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified sprite from memory. Deleting unused sprites increases system performance. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.ShowAllSprites">
            <summary>
This command will show all the sprites currently invisible. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.HideAllSprites">
            <summary>
This command will hide all the sprites currently visible. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.ShowSprite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show the specified sprite. The parameter should be specified using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.HideSprite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide the specified sprite. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.OffsetSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shift the position of the drawn image without affecting the coordinate of the specified sprite. You can use this command to change the visible sprite in relation to the coordinates you use to position it. 
</summary>
            <param name="lID" />
            <param name="lXOffset" />
            <param name="lYOffset" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.FlipSprite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will vertically flip the visible image of the specified sprite. The image itself is untouched, but the specified sprite will be drawn upside down. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.MirrorSprite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will mirror the image of the sprite horizontally. The image itself is untouched, but the specified sprite will be drawn in reverse. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.StretchSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will expand or shrinks the specified sprite according to the scale values provided. You must specify both a horizontal and vertical scale when stretching sprites. If the scale value is zero, the sprite will disappear. If the scale value is 100, the sprite will be set to its original size. If the scale value is set to 200, the size of the sprite will double. 
</summary>
            <param name="lID" />
            <param name="lXStretch" />
            <param name="lYStretch" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.ScaleSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will expand or shrink the specified sprite according to the scale value provided. If the scale value is zero, the sprite will disappear. If the scale value is 100, the sprite will be set to its original size. If the scale value is set to 200, the size of the sprite will double. 
</summary>
            <param name="lID" />
            <param name="fScale" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SizeSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will expand or shrink the specified sprite according to the size values provided. You must specify both a horizontal and vertical size when resizing sprites. The size values must be greater than zero of the command will fail. 
</summary>
            <param name="lID" />
            <param name="lXSize" />
            <param name="lYSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.PasteSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will paste the sprite image to the screen, at the specified coordinates. The sprite image pasted to the screen is identical to the current state of the sprite, taking into account scaling, flipping and mirroring. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.Sprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the position and image number of the specified sprite. Providing you are using a valid image number from a previous call to the dbGetImage command, and the position of the sprite is in the screen area, you will see your sprite displayed. You can move your sprite by calling the sprite command with new position coordinates. You can animate your sprite by calling this command with different image numbers to create the effect of animation. You are able to have over sixty thousand sprites on the screen at any one time, but it is advisable to restrict yourself to a few hundred sprites for speed critical programs. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lY" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSprite.SetSprite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set whether the specified sprite restores its background and whether background transparency is ignored. If the backsave state is set to zero, the sprite will not restore its background and leave a trail as it moves. If the transparency state is set to zero, the sprite will not treat black as a transparent color. A transparent color in the sprite image does not write to the screen. If this feature is disabled, the sprite would appear as though drawn inside a black rectangle where transparency had previously been used. Both states are set to one as these are the most common settings. If you set the backsave state to zero, it is your responsibility to clear or paste the background each time the sprite is moved or animated. The sprite number should be specified using an integer value. The backsave and transparency states should be specified as either zero or one. 
</summary>
            <param name="lID" />
            <param name="lBacksave" />
            <param name="lTransparent" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkSprite">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainHeightmapB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
Sets the heightmap that will be used when the terrain is built. Note that heightmaps must be 256 colour or more.
</summary>
            <param name="lID" />
            <param name="sHeightMap" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.UpdateTerrain">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.GetTerrainZSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
Returns the Z size of the terrain.
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.GetTerrainXSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
Returns the X size of the terrain.
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.GetTerrainGroundHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single*)">
            <summary>
Returns the height of the terrain at the given X and Z coordinates.
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Sets the light properties of the terrain. The direction of the light is set by the parameters XDir, YDir and ZDir. The colour of the light is controlled by the parameters Red, Green and Blue. These parameters must be passed in as floats. Setting them to 1.0, 1.0, 1.0 will result in a bright white light whereas a value of 0.0, 0.0, 0.0 will provide a black light. The Scale paramter controls the intensity of the shadowing. Again this is a floating point value. A value of 0.0 will provide a very dark shadow on the terrain. A value of 1.0 will provide a very light shadow.
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fRed" />
            <param name="fGreen" />
            <param name="fBlue" />
            <param name="fScale" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets the textures to be used on the terrain.
</summary>
            <param name="lID" />
            <param name="lBase" />
            <param name="lDetail" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainHeightMap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
Sets the heightmap that will be used when the terrain is built. Note that heightmaps must be 256 colour or more.
</summary>
            <param name="lID" />
            <param name="sHeightMap" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainTiling(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This controls how detail textures are tiled across the terrain. A setting of 1 will make it so that the detail texture fits onto each quad on the terrain. Higher values will stretch the detail texture over large patches of quads.
</summary>
            <param name="lID" />
            <param name="lTile" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainSplit(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets the split value of the terrain. This determines how many meshes will be created from the heightmap. As an example if you specify 8 for the split value then the terrain will be divided up into a grid of 8 x 8 thus creating 64 meshes. Altering this value can help to improve the frame rate e.g. for slower computers a higher value will result in smaller batches of polygons being drawn. This could help to gain a better frame rate.
</summary>
            <param name="lID" />
            <param name="lSplit" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetTerrainScale(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
Sets the scale of the terrain.
</summary>
            <param name="lID" />
            <param name="fXScale" />
            <param name="fYScale" />
            <param name="fZScale" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.BuildTerrain(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Builds a terrain object. It is only when this command is called that a terrain will be visible on screen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.MakeObjectTerrain(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Creates a new, blank terrain object. The terrain will not be visible until it has been built using the "dbBuildTerrain" command.
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SaveTerrain(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Saves a terrain file from the specified ID. The default extension for terrains is ".DBT".
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.LoadTerrain(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Loads a terrain file into the specified ID. The default extension for terrains is ".DBT".
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkTerrain.SetupTerrain">
            <summary />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkTerrain">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixWireframeState(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified matrix is displayed as a wireframe otherwise zero will be returned. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixTilesExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the matrix has been prepared with textures, otherwise zero will be returned. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixTileCount(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the number of available tile textures prepared for the specified matrix. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified matrix exists otherwise zero will be returned. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.GetMatrixHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the matrix height at the specified grid point coordinate. Do not confuse the grid reference X and Z values with coordinate values. The grid reference values are measured per tile, not per 3D space unit. The matrix number and grid reference values should be integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.GetGroundHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single*)">
            <summary>
This command will calculate and return the Y coordinate within the matrix given the X and Z coordinates. This command can be used to allows 3D objects to traverse the contours of any matrix landscape with ease. The matrix number should be an integer value. The coordinates should be real numbers. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z position of the specified matrix in 3D space. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y position of the specified matrix in 3D space. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MatrixPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X position of the specified matrix in 3D space. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetVector3ToMatrixRotation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.RotateMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetVector3ToMatrixPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z coordinates from the specified matrix position. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.PositionMatrixB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will place the specified matrix at a position in 3D space. The matrix number should be an integer value. The coordinates should be real numbers. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixPriority(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the priority at which the matrix is rendered to the screen. By default the matrix priority is zero and the matrix is rendered before objects, particles and other 3D elements. Changing the priority to one will cause the matrix to be drawn after all 3D elements instead, allowing the ability to render a ghosted matrix over an object that may be submerged partly within the matrix. 
</summary>
            <param name="lID" />
            <param name="lPriority" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixTrim(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will set the texture tile trim value of a matrix. The trim is a float value and determines how much of the edge of the texture tile is trimmed from the final rendered output. The texture tile is the visible tile that is drawn to a grid tile of the matrix, and can sometimes suffer from the 'ugly lines' scenario when filtering causes pixels from neighboring texture tiles to be rendered. The trim value ensures these pixels can be ignored by moving the area to be used away from the neighboring texture tile. 
</summary>
            <param name="lID" />
            <param name="fTrimX" />
            <param name="fTrimY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.UpdateMatrix(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will update all changes you have made to an existing matrix. Any changes you have made are not visible until you complete the process by using the update matrix command. Updating the matrix is speed intensive and should be used as little as possible. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.ShiftMatrixRight(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shift the entire contents of the matrix one grid square to the right. The shift ensures that the height and tile data that represent the matrix contents are wrapped around to allow continuous shifting of the landscape. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.ShiftMatrixLeft(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shift the entire contents of the matrix one grid square to the left. The shift ensures that the height and tile data that represent the matrix contents are wrapped around to allow continuous shifting of the landscape. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.ShiftMatrixDown(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shift the entire contents of the matrix one grid square down. The shift ensures that the height and tile data that represent the matrix contents are wrapped around to allow continuous shifting of the landscape. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.ShiftMatrixUp(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shift the entire contents of the matrix one grid square up. The shift ensures that the height and tile data that represent the matrix contents are wrapped around to allow continuous shifting of the landscape. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the visual properties of the matrix. When the wireframe flag is set to 1, the matrix only shows it's wireframe form. When the transparency flag is set to 1, all parts of the matrix colored black are not drawn to the screen. When the cull flag is set to 0, the matrix will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the matrices sensitivity to any lights in the scene. The Fog Flag activates and deactivates the matrices sensitivity to fog in the scene. The Ambient Flag activates and deactivates the matrices sensitivity to ambient light in the scene. The matrix number and flag values should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lBWireframe" />
            <param name="lBTransparency" />
            <param name="lBCull" />
            <param name="lFilter" />
            <param name="lBLight" />
            <param name="lBFog" />
            <param name="lBAmbient" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixWireframeOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified matrix to display itself in textured form. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.GhostMatrixOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will ghost a matrix. Ghosted matrices will appear transparent when rendered, creating effects such as a see-through surfaces. A ghosted matrix automatically switches to a higher level of priority when rendered in order to ensure objects above and below the matrix are visible. The Ghost Mode with a range of 0 to 5 specify the type of ghosting to perform. 
</summary>
            <param name="lID" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixWireframeOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified matrix to display itself in wireframe form. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixTile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will texture an individual grid square with an image specified by the tile number. Only if the matrix has been prepared with a texture will this command work. The tile number equates to a portion of graphic within the sectioned image you used to prepare the matrix texture. If you had prepared a matrix texture with four segmented images, you would reference these images as tile numbers from 1 to 4. The parameters should be integer values. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lZ" />
            <param name="lTile" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set different texture modes used by the specified matrix. Every texture is painted onto a matrix using an internal set of values called UV data. This data contains a range of real numbers from zero to one. Zero specifying the top/left corner of your texture and one being the bottom/right corner of your texture. When a matrix uses UV data greater and less than this range, you are permitted a number of texture wrap modes to describe what should happen to paint these areas. Setting the Texture Wrap Mode to zero will use the default wrap mode which repeats the pattern of the texture over and over, a mode of one will mirror the texture to create a seamless texture pattern and a mode of two will set clamping which retains the colour of the last pixel at the textures edge and paint with that throughout the out of range area. The Mipmap Generation Flag is used to ensure the image has a mipmap texture. A mipmap is a texture that has many levels of detail, which the matrix can select and use based on the matrix vertex distance from the camera. Use integer values to specify the parameters. 
</summary>
            <param name="lID" />
            <param name="lTextureMode" />
            <param name="lMipGen" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixNormal(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set the individual normal of a point within the matrix. The normal is a projected direction away from the vertex position that instructs the matrix how to take light for that point. You can use matrix normals to affect how the matrix is lit and at what strength. The matrix number and tile reference values should be integer values. The normal values should be real numbers. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lZ" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.SetMatrixHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the individual height of a point within the matrix. To raise a whole grid square you would need to raise four points, one from each corner of the square. If you set points x=0 z=0, x=0 z=1, x=1 z=0 and x=1 z=1 to a value of 10, you would raise the near left square upwards by ten units. The matrix number and tile reference values should be integer values. The height value should be a real number. 
</summary>
            <param name="lID" />
            <param name="lX" />
            <param name="lZ" />
            <param name="fHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.RandomizeMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set each grid square in the matrix to a random height between 0 and the height value given. The matrix number should be an integer value. The height should be a real number. 
</summary>
            <param name="lID" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.PrepareMatrixTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will select an image of tiled textures that the matrix will eventually use. Each grid square in the matrix can have a tile texture, located within the image. Individual tile textures can be obtained from the single image by slicing it into sections both across and down. The tile textures are then assigned a number starting in the top left corner of the sectioned image and working across, then down. To section an image into 4 smaller tile textures you would specify 2 across and 2 down. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <param name="lAcross" />
            <param name="lDown" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.PositionMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will place the specified matrix at a position in 3D space. The matrix number should be an integer value. The coordinates should be real numbers. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.GhostMatrixOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will deactivate ghosting of a matrix. Ghosted matrices will appear transparent when rendered, creating effects such as a see-through surface. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.GhostMatrixOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will ghost a matrix. Ghosted matrices will appear transparent when rendered, creating effects such as a see-through surfaces. A ghosted matrix automatically switches to a higher level of priority when rendered in order to ensure objects above and below the matrix are visible. The Ghost Mode with a range of 0 to 5 specify the type of ghosting to perform. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.FillMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set each grid square in the matrix to a specified height and tile number. The matrix number should be an integer value. The height should be a real number. The tile number must be a valid texture tile allocated by the PREPARE MATRIX TEXTURE command and should be an integer value. 
</summary>
            <param name="lID" />
            <param name="fHeight" />
            <param name="lTile" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.DeleteMatrix(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a specified matrix previously created with make matrix. The matrix number should be an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkMatrix.MakeMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a matrix to a given width and depth segmented into grid square of a specified arrangement. A matrix can be thought of as a grid landscape with individual tiles that can be textured, raised and lowered to create a wide variety of surfaces. The matrix number and segment values should be integer values. The width and depth should be real numbers. 
</summary>
            <param name="lID" />
            <param name="fWidth" />
            <param name="fDepth" />
            <param name="lXSegmented" />
            <param name="lZSegmented" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkMatrix">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkBitmap.SetBitmapData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return a one if the current bitmap has been flipped, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been flipped. 
</summary>
            <param name="lBitmapindex" />
            <param name="ulWidth" />
            <param name="ulHeight" />
            <param name="ulDepth" />
            <param name="ulPData" />
            <param name="ulDataSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.GetBitmapData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int16)">
            <summary>
This command will return a one if the current bitmap has been flipped, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been flipped. 
</summary>
            <param name="lID" />
            <param name="ulWidth" />
            <param name="ulHeight" />
            <param name="ulDepth" />
            <param name="ulPData" />
            <param name="ulDataSize" />
            <param name="bLockData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapFlippedB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the current bitmap has been flipped, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been flipped. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapMirroredB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the current bitmap has been mirrored, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been mirrored. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapDepthB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the color bit-depth of the current bitmap. You can optionally provide a bitmap number to return the color bit-depth of a specified bitmap. color bit-depths represent the maximum amount of colors the bitmap can hold. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapHeightB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the height of the current bitmap. You can optionally provide a bitmap number to return the height of a specified bitmap. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapWidthB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the width of the current bitmap. You can optionally provide a bitmap number to return the width of a specified bitmap. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapExistB(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified bitmap exists, otherwise zero is returned. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapFlipped(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the current bitmap has been flipped, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been flipped. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapMirrored(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the current bitmap has been mirrored, otherwise zero is returned. You can optionally provide a bitmap number to check whether a specified bitmap has been mirrored. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapDepth(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the color bit-depth of the current bitmap. You can optionally provide a bitmap number to return the color bit-depth of a specified bitmap. color bit-depths represent the maximum amount of colors the bitmap can hold. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the height of the current bitmap. You can optionally provide a bitmap number to return the height of a specified bitmap. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapWidth(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the width of the current bitmap. You can optionally provide a bitmap number to return the width of a specified bitmap. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BitmapExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified bitmap exists, otherwise zero is returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.CurrentBitmap(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the current bitmap number being used. If this value is zero, the screen is the current bitmap and drawing operations are performed on the visible screen. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.SetCurrentBitmap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the current bitmap number for all drawing operations. Use this command if you wish to draw, paste and extract images from the bitmap. Setting the current bitmap to zero points all drawing operations to the screen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.BlurBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will blur the contents of a specified Bitmap. You must specify a blur value from 1 to 6 to provide the intensity of the blurring. A blur value of 1 will perform mild blurring, up to a value of 6 that causes severe blurring. The greater the intensity of blurring, the longer it takes to perform. The time it takes to blur a bitmap is also dependent on the size of the bitmap. 
</summary>
            <param name="lID" />
            <param name="lBlurLevel" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.FadeBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will fade the contents of a specified Bitmap. You must specify a fade value that sets the level of fading from zero which fades the bitmap completely to black, up to 100 which does not fade the bitmap at all. Fade operations are slow and the completion time depends on the size of the bitmap. 
</summary>
            <param name="lID" />
            <param name="lFade" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.MirrorBitmap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will mirror the contents of the specified bitmap horizontally. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.FlipBitmap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will flip the contents of the specified bitmap vertically. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.DeleteBitmap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a specified Bitmap. Deleting bitmaps that are no longer used greatly improves system performance. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.CopyBitmapB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy the contents of one bitmap into another bitmap providing the destination bitmap is not smaller than the first. The command requires at least a source and destination bitmap. You can optionally specify a source area to be copied from and a destination area to be copied to within each bitmap. If the size of the two areas differ, the source data will be rescaled to fit in the destination area. 
</summary>
            <param name="lID" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <param name="lToID" />
            <param name="lToX1" />
            <param name="lToY1" />
            <param name="lToX2" />
            <param name="lToY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.CopyBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will copy the contents of one bitmap into another bitmap providing the destination bitmap is not smaller than the first. The command requires at least a source and destination bitmap. You can optionally specify a source area to be copied from and a destination area to be copied to within each bitmap. If the size of the two areas differ, the source data will be rescaled to fit in the destination area. 
</summary>
            <param name="lID" />
            <param name="lToID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.SaveBitmapB(System.Char*)">
            <summary />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.LoadBitmapB(System.Char*)">
            <summary>
This command loads a picture file to the screen. The picture file must be of the BMP, JPG, TGA, DDS, DIB or PNG format. You can optionally provide a Bitmap Number between 0 and 32. Once you have loaded the picture file successfully, you can use the specified bitmap number to modify and manage the bitmap. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.SaveBitmap(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.LoadBitmapW(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command loads a picture file to the screen. The picture file must be of the BMP, JPG, TGA, DDS, DIB or PNG format. You can optionally provide a Bitmap Number between 0 and 32. Once you have loaded the picture file successfully, you can use the specified bitmap number to modify and manage the bitmap. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBitmap.CreateBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a blank bitmap of a specified size. The size of the bitmap is only limited by the amount of system memory available. When you create a bitmap, it becomes the current bitmap. All drawing operations will be re-directed to the current bitmap and away from the screen. You can use the dbSetCurrentBitmap command to restore drawing operations to the screen. 
</summary>
            <param name="lID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkBitmap">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkCamera.RunCode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.GetProjectionMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="_11" />
            <param name="_12" />
            <param name="_13" />
            <param name="_14" />
            <param name="_21" />
            <param name="_22" />
            <param name="_23" />
            <param name="_24" />
            <param name="_31" />
            <param name="_32" />
            <param name="_33" />
            <param name="_34" />
            <param name="_41" />
            <param name="_42" />
            <param name="_43" />
            <param name="_44" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.GetViewMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="_11" />
            <param name="_12" />
            <param name="_13" />
            <param name="_14" />
            <param name="_21" />
            <param name="_22" />
            <param name="_23" />
            <param name="_24" />
            <param name="_31" />
            <param name="_32" />
            <param name="_33" />
            <param name="_34" />
            <param name="_41" />
            <param name="_42" />
            <param name="_43" />
            <param name="_44" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraClip(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="lOnOff" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fNX" />
            <param name="fNY" />
            <param name="fNZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ScrollBackdropB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will scroll the 3D backdrop using the specified X and Y scroll values. This command is now obsolete and using sky spheres and boxes is a recommended alternative. 
</summary>
            <param name="lID" />
            <param name="lU" />
            <param name="lV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TextureBackdropB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will texture the 3D backdrop using the specified image value. This command is now obsolete and using sky spheres and boxes is a recommended alternative. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ScrollBackdrop(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will scroll the 3D backdrop using the specified X and Y scroll values. This command is now obsolete and using sky spheres and boxes is a recommended alternative. 
</summary>
            <param name="lU" />
            <param name="lV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TextureBackdrop(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will texture the 3D backdrop using the specified image value. This command is now obsolete and using sky spheres and boxes is a recommended alternative. 
</summary>
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.GetRenderCamera(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.StartSceneEx(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.FinishScene(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.StartScene">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraInternalUpdate(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetAutoCam(System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.GetCameraInternalData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraLookZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraLookY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraLookX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleZB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z angle of the camera. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleYB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y angle of the camera. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleXB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X angle of the camera. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionZB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z position of the camera in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionYB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y position of the camera in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionXB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X position of the camera in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropScrollB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lU" />
            <param name="lV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropTextureB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropColor(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropOffB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will deactivate the 3D backdrop preventing it from being drawn to the screen. The backdrop is automatically activated the first time any 3D object is created or loaded in order to clear the background screen. If you do not wish the backdrop to automatically activate, use this command at the start of your program. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropOnB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will activate a 3D backdrop that fills the visible screen. The backdrop is automatically activated the first time any 3D object is created or loaded in order to clear the background screen. The backdrop can also be colored, textured and scrolled to create the effects of sky or other background effects. If you wish to set-up the backdrop before creating your objects, use this command to activate it. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToObjectOrientationB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the camera to the same direction as the specified 3D object. 
</summary>
            <param name="lID" />
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RollCameraRightB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will roll the camera right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RollCameraLeftB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will roll the camera left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PitchCameraDownB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will pitch the camera downwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PitchCameraUpB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will pitch the camera upwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TurnCameraRightB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will turn the camera right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TurnCameraLeftB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will turn the camera left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToFollowB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command automatically controls the camera to provide a tracking system. By providing the 3D world coordinate of the entity you wish to track, and some camera data, your camera will automatically update its current position each time this command is called. The X, Y, Z and Angle values provide the coordinate to track. The Distance value specifies the required distance between the coordinate and the camera. The Height value specifies the required height of the camera in 3D space. The Smooth value specifies the level of smoothing required for the camera, where a value of 1.0 is no smoothing and a value of 100.0 is lots of smoothing. The Collision value is a special flag that allows the camera to detect whether it is hitting any of the static collision boxes and if set to one will automatically adjust so as not to enter these collidable areas. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fAngle" />
            <param name="fDistance" />
            <param name="fHeight" />
            <param name="fSmooth" />
            <param name="lCollision" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraAspectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will adjust the aspect ratio at which the camera renders to the screen. By default this aspect ratio is calculated by dividing the screen width by the screen height, normally resulting in an aspect ratio of 0.75. You can change this aspect ratio using this command in situations where you would like to render a perfect square to the screen or if you are writing for hardware that spans a single surface over multiple display devices. 
</summary>
            <param name="lID" />
            <param name="fAspect" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraFOVB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set field of view for the camera given an Angle value. The default angle is the result of the calculation 360 degrees divided by four. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRotationZYXB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will restore the default camera rotation order. The cameras normal rotation order is to first rotate on the Z axis, then on the Y axis and finally on the X axis. This command restores the order to ZYX. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRotationXYZB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will reverse the camera rotation order. The cameras normal rotation order is to first rotate on the Z axis, then on the Y axis and finally on the X axis. This command reverses this order to XYZ. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ClearCameraViewC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clear the viewport of the camera. The viewport is the actual area on screen where all 3D is drawn. The default viewport area is the entire screen. You can specify that only the camera viewport be cleared using this command. This area can be changed using the dbSetCameraView command. 
</summary>
            <param name="lID" />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ClearCameraViewB(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clear the viewport of the camera. The viewport is the actual area on screen where all 3D is drawn. The default viewport area is the entire screen. You can specify that only the camera viewport be cleared using this command. This area can be changed using the dbSetCameraView command. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraViewB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the viewport of the camera. The viewport is the actual area on screen where all 3D is drawn. The default viewport area is the entire screen, but can be specified using this command. 
</summary>
            <param name="lID" />
            <param name="lLeft" />
            <param name="lTop" />
            <param name="lRight" />
            <param name="lBottom" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRangeB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will set the viewing range of the camera. The Front Value specifies the closest point beyond which the camera starts to draw the 3D scene. The Back Value specifies the furthest point beyond which the camera stops drawing the 3D scene. The parameters must be specified using real numbers greater than zero. The default range starts drawing the 3D scene with a front value of 1 and a back value of 3000. 
</summary>
            <param name="lID" />
            <param name="fFront" />
            <param name="fBack" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the camera in the direction it is facing. The step value specifies how far to move the camera. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PointCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will point the camera to a point in 3D space. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ZRotateCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the camera around its Z axis. 
</summary>
            <param name="lID" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.YRotateCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the camera around its Y axis. 
</summary>
            <param name="lID" />
            <param name="fY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.XRotateCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the camera around its X axis. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RotateCameraC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will rotate the camera around its X, Y and Z axis. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PositionCameraC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set the position of the camera in 3D space. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetVector3ToCameraRotation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z angles from the specified camera rotation. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RotateCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will rotate the camera around its X, Y and Z axis. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetVector3ToCameraPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z coordinates from the specified camera position. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PositionCameraB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the position of the camera in 3D space. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ControlCameraUsingArrowKeys(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will monitor the arrow keys and move the camera based on their activity. The up and down arrow keys move the camera forward and backward. The left and right arrow keys turn the camera left and right respectively. 
</summary>
            <param name="lID" />
            <param name="fVelocity" />
            <param name="fTurnSpeed" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCameraDown(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCameraUp(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCameraRight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCameraLeft(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ResetCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToImageB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will direct all camera output to the specified image. This command is ideal for performing the fastest method of creating textured polygons that show a different view within your 3D world. You can use this command to create mirrors, security cameras within your game or dynamically moving the camera view around on a polygon shape such as a floating panel. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lGenAlpha" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will direct all camera output to the specified image. This command is ideal for performing the fastest method of creating textured polygons that show a different view within your 3D world. You can use this command to create mirrors, security cameras within your game or dynamically moving the camera view around on a polygon shape such as a floating panel. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <param name="lWidth" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCurrentCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will select the current active camera. When more than one camera exists, and a camera command is used without specifying a camera number, the active camera is used. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.DeleteCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a current camera from the scene. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MakeCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a new camera for the 3D scene. You can position this camera anywhere in the scene and alter the output view of this camera using the dbSetCameraView command. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleZ(System.Single*)">
            <summary>
This command will return the Z angle of the camera. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleY(System.Single*)">
            <summary>
This command will return the Y angle of the camera. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraAngleX(System.Single*)">
            <summary>
This command will return the X angle of the camera. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionZ(System.Single*)">
            <summary>
This command will return the Z position of the camera in 3D space. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionY(System.Single*)">
            <summary>
This command will return the Y position of the camera in 3D space. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.CameraPositionX(System.Single*)">
            <summary>
This command will return the X position of the camera in 3D space. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropScroll(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lU" />
            <param name="lV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropTexture(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ColorBackdropB(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color the 3D backdrop in the specified color. You can specify the color of your choice by using the dbRGB command to generate the color value to pass into the command. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ColorBackdrop(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color the 3D backdrop in the specified color. You can specify the color of your choice by using the dbRGB command to generate the color value to pass into the command. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropOff">
            <summary>
This command will deactivate the 3D backdrop preventing it from being drawn to the screen. The backdrop is automatically activated the first time any 3D object is created or loaded in order to clear the background screen. If you do not wish the backdrop to automatically activate, use this command at the start of your program. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.BackdropOn">
            <summary>
This command will activate a 3D backdrop that fills the visible screen. The backdrop is automatically activated the first time any 3D object is created or loaded in order to clear the background screen. The backdrop can also be colored, textured and scrolled to create the effects of sky or other background effects. If you wish to set-up the backdrop before creating your objects, use this command to activate it. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToObjectOrientation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the camera to the same direction as the specified 3D object. 
</summary>
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RollCameraRight(System.Single)">
            <summary>
This command will roll the camera right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RollCameraLeft(System.Single)">
            <summary>
This command will roll the camera left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PitchCameraDown(System.Single)">
            <summary>
This command will pitch the camera downwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PitchCameraUp(System.Single)">
            <summary>
This command will pitch the camera upwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TurnCameraRight(System.Single)">
            <summary>
This command will turn the camera right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.TurnCameraLeft(System.Single)">
            <summary>
This command will turn the camera left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.AutoCamOff">
            <summary>
This command will deactivate the auto camera. The camera will then no longer reposition when a new object is loaded or created. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.AutoCamOn">
            <summary>
This command will activate the auto camera which will reposition when a new object is loaded or created. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraToFollow(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command automatically controls the camera to provide a tracking system. By providing the 3D world coordinate of the entity you wish to track, and some camera data, your camera will automatically update its current position each time this command is called. The X, Y, Z and Angle values provide the coordinate to track. The Distance value specifies the required distance between the coordinate and the camera. The Height value specifies the required height of the camera in 3D space. The Smooth value specifies the level of smoothing required for the camera, where a value of 1.0 is no smoothing and a value of 100.0 is lots of smoothing. The Collision value is a special flag that allows the camera to detect whether it is hitting any of the static collision boxes and if set to one will automatically adjust so as not to enter these collidable areas. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fAngle" />
            <param name="fDistance" />
            <param name="fHeight" />
            <param name="fSmooth" />
            <param name="lCollision" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraAspect(System.Single)">
            <summary>
This command will adjust the aspect ratio at which the camera renders to the screen. By default this aspect ratio is calculated by dividing the screen width by the screen height, normally resulting in an aspect ratio of 0.75. You can change this aspect ratio using this command in situations where you would like to render a perfect square to the screen or if you are writing for hardware that spans a single surface over multiple display devices. 
</summary>
            <param name="fAspect" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraFOV(System.Single)">
            <summary>
This command will set field of view for the camera given an Angle value. The default angle is the result of the calculation 360 degrees divided by four. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRotationZYX">
            <summary>
This command will restore the default camera rotation order. The cameras normal rotation order is to first rotate on the Z axis, then on the Y axis and finally on the X axis. This command restores the order to ZYX. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRotationXYZ">
            <summary>
This command will reverse the camera rotation order. The cameras normal rotation order is to first rotate on the Z axis, then on the Y axis and finally on the X axis. This command reverses this order to XYZ. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ClearCameraView(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clear the viewport of the camera. The viewport is the actual area on screen where all 3D is drawn. The default viewport area is the entire screen. You can specify that only the camera viewport be cleared using this command. This area can be changed using the dbSetCameraView command. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraView(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the viewport of the camera. The viewport is the actual area on screen where all 3D is drawn. The default viewport area is the entire screen, but can be specified using this command. 
</summary>
            <param name="lLeft" />
            <param name="lTop" />
            <param name="lRight" />
            <param name="lBottom" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.SetCameraRange(System.Single,System.Single)">
            <summary>
This command will set the viewing range of the camera. The Front Value specifies the closest point beyond which the camera starts to draw the 3D scene. The Back Value specifies the furthest point beyond which the camera stops drawing the 3D scene. The parameters must be specified using real numbers greater than zero. The default range starts drawing the 3D scene with a front value of 1 and a back value of 3000. 
</summary>
            <param name="fFront" />
            <param name="fBack" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.MoveCamera(System.Single)">
            <summary>
This command will move the camera in the direction it is facing. The step value specifies how far to move the camera. 
</summary>
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PointCamera(System.Single,System.Single,System.Single)">
            <summary>
This command will point the camera to a point in 3D space. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.ZRotateCamera(System.Single)">
            <summary>
This command will rotate the camera around its Z axis. 
</summary>
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.YRotateCamera(System.Single)">
            <summary>
This command will rotate the camera around its Y axis. 
</summary>
            <param name="fY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.XRotateCamera(System.Single)">
            <summary>
This command will rotate the camera around its X axis. 
</summary>
            <param name="fX" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.RotateCamera(System.Single,System.Single,System.Single)">
            <summary>
This command will rotate the camera around its X, Y and Z axis. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCamera.PositionCamera(System.Single,System.Single,System.Single)">
            <summary>
This command will set the position of the camera in 3D space. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkCamera">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkSystem.ExistDLL(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lDllid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.DeleteDLL(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a previously loaded DLL. If the DLL does not exist this command will fail. The DLL Number must be an integer value between 1 and 256. 
</summary>
            <param name="lDllid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.LoadDLL(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a DLL into memory under the specified DLL Number. The DLL file must exist either in the current working directory or the Windows system folder. If the file is not found this command will fail. The DLL Number must be an integer value between 1 and 256. 
</summary>
            <param name="sDLLFile" />
            <param name="lDllid" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.GetGlobalStructure(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command returns a pointer to the internal GlobStruct structure used by DarkGDK
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulDataPtr" />
            <param name="ulNumberOfDWORDS" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLK(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <param name="ulP6" />
            <param name="ulP7" />
            <param name="ulP8" />
            <param name="ulP9" />
            <param name="ulP10" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLJ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <param name="ulP6" />
            <param name="ulP7" />
            <param name="ulP8" />
            <param name="ulP9" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLI(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <param name="ulP6" />
            <param name="ulP7" />
            <param name="ulP8" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLH(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <param name="ulP6" />
            <param name="ulP7" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLG(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <param name="ulP6" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLF(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <param name="ulP5" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLE(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <param name="ulP4" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <param name="ulP3" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <param name="ulP2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLLB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <param name="ulP1" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.CallDLL(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will call a function of a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number points to the DLL previously loaded. The Function String is the name of the function described in the export table of the DLL. You can optionally have up to 9 parameters of integer, real or string type providing the function you are calling matches the parameters exactly. You can optionally return a value of integer, real or string type providing the function exports the same type. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.DLLCallExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command determines whether a function call exists within a loaded DLL. The DLL Number must be an integer value between 1 and 256. The DLL Number specifies a previously loaded DLL and the Function String describes the function name within the DLL. If the function exists an integer value of one is returned, otherwise zero. 
</summary>
            <param name="lDllid" />
            <param name="sDLLFunction" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistString(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistFValueD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistFValueC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistFValueB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistFValueA(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistValueD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return value D from the specified item number in the checklist after a PERFORM CHECKLIST command has been performed. The item number should be an integer value. 
</summary>
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistValueC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return value C from the specified item number in the checklist after a dbPerformCheckList command has been performed. The item number should be an integer value. 
</summary>
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistValueB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return value B from the specified item number in the checklist after a dbPerformCheckList command has been performed. The item number should be an integer value. 
</summary>
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistValueA(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return value A from the specified item number in the checklist after a dbPerformCheckList command has been performed. The item number should be an integer value. 
</summary>
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ChecklistQuantity(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the total number of items in the checklist after a dbPerformCheckList command has been performed. The checklist has a maximum storage capacity of 255 items. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.EmptyChecklist">
            <summary>
This command will clear the general purpose checklist facility. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.ExitPrompt(System.Char*,System.Char*)">
            <summary>
This command will create a message box when the application exits. You can specify the text for the title and the text area of the message box. You can use this command to prompt that your application is a demo version or use it to report debug information in your standalone executables. 
</summary>
            <param name="sString" />
            <param name="sString2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.EnableSystemKeys">
            <summary>
This command will enable all system keys disabled with dbDisableSystemKeys. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.DisableSystemKeys">
            <summary>
This command will disable the use of such system keys as ALT+TAB, ALT+F4. This command will fail if the operating system does not support the screen saver based method of deactivating the system keys. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.EnableEscapeKey">
            <summary>
This command will reactivate the escape key. The escape key is deactivated using the dbDisableEscapeKey. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.DisableEscapeKey">
            <summary>
This command will deactivate the escape key. Be aware that this command will prevent breaking back into your program without a suitable exit condition. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.SystemSMEMAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the total system memory available on the system. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.SystemDMEMAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the total video memory available on the system. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSystem.SystemTMEMAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the total memory available on your system. 
</summary>
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkSystem">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RenderQuad(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetScreenEffect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureScreen(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lStageIndex" />
            <param name="lImageID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetShadowClipping(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fMin" />
            <param name="fMax" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectW(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCameraMatrix(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="_11" />
            <param name="_12" />
            <param name="_13" />
            <param name="_14" />
            <param name="_21" />
            <param name="_22" />
            <param name="_23" />
            <param name="_24" />
            <param name="_31" />
            <param name="_32" />
            <param name="_33" />
            <param name="_34" />
            <param name="_41" />
            <param name="_42" />
            <param name="_43" />
            <param name="_44" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCameraRight(System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lX" />
            <param name="lY" />
            <param name="lZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCameraUp(System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lX" />
            <param name="lY" />
            <param name="lZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCameraPosition(System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lX" />
            <param name="lY" />
            <param name="lZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCameraLook(System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lX" />
            <param name="lY" />
            <param name="lZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectWorldMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Single*)">
            <summary />
            <param name="lID" />
            <param name="lLimb" />
            <param name="_11" />
            <param name="_12" />
            <param name="_13" />
            <param name="_14" />
            <param name="_21" />
            <param name="_22" />
            <param name="_23" />
            <param name="_24" />
            <param name="_31" />
            <param name="_32" />
            <param name="_33" />
            <param name="_34" />
            <param name="_41" />
            <param name="_42" />
            <param name="_43" />
            <param name="_44" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectWorldMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="_11" />
            <param name="_12" />
            <param name="_13" />
            <param name="_14" />
            <param name="_21" />
            <param name="_22" />
            <param name="_23" />
            <param name="_24" />
            <param name="_31" />
            <param name="_32" />
            <param name="_33" />
            <param name="_34" />
            <param name="_41" />
            <param name="_42" />
            <param name="_43" />
            <param name="_44" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CreateMeshForObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="ulFVF" />
            <param name="ulVertexCount" />
            <param name="ulIndexCount" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSetDisableTransform(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary />
            <param name="lID" />
            <param name="bTransform" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbNameB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerformChecklistForObjectLimbsB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a list of all limbs contained in a 3D object. Objects that have been loaded may contain hundreds of limbs, and are identified by number. All limbs include an internal limb description that often indicates which part of the overall 3D object it belongs to. You can access the limb description using the string item of the checklist when you have performed the check. Use the checklist commands in the System command set to read the checklist. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbTextureNameB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary>
This command will return the internal name of the limb texture. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.BlitSysToLocalAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports blitting from system to local memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AnistropicfilteringAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports anisotropic filtering on textures, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetLimbSmoothingB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will smooth the sharp edges of the mesh within a limb by adjusting the normals data. A percentage value of zero will perform no smoothing and create a facet surface for the limb. A percentage value of 100 will perform full smoothing, averaging all normals that share a vertex position and create a smoothing effect elimiating all edges. A value between these two limits will determine the degree beyond which an edge will be smoothed or left sharp. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetAlphaMappingOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the true alpha value of an object to a percentage value from 0 to 100. Zero represents an alpha state that makes the object completely invisible. An alpha percentage of 100 will render the object fully visible. A value between these limits will create a true transparency effect when the object is transparent, as set by the dbSetObjectTransparency command. 
</summary>
            <param name="lID" />
            <param name="lPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.UnglueObjectB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will detach the specified 3D object from any limb. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectAmbientB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the ambient state of the specified object. Setting the ambience to one will ensure the object is affected by the global ambient light level. 
</summary>
            <param name="lID" />
            <param name="bAmbient" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectSmoothingB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will smooth the sharp edges of the mesh within an object by adjusting the normals data. A percentage value of zero will perform no smoothing and create a facet surface for each limb within the object. A percentage value of 100 will perform full smoothing, averaging all normals that share a vertex position and create a smoothing effect elimiating all edges. A value between these two limits will determine the degree beyond which an edge will be smoothed or left sharp. 
</summary>
            <param name="lID" />
            <param name="lPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FadeObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make the specified 3D object fade to the current ambient light level. With ambient light set to zero and the object faded using a value of zero, the object will be completely unlit. With a fade value of 200 its illumination will be doubled. With a fade value of 50, the illumination is halved. This technique can also be used with a ghosted object to slowly fade an object until completely invisible. 
</summary>
            <param name="lID" />
            <param name="lPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectPlain(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will construct a 3D object from a single sided flat mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. The parameters should be specified using integer values. By default this primitive is facing away from the camera when created and so any lighting is being performed on the side not immediately visible to the camera. This causes such properties such as shading and colouring not to be seen until the primitive is rotated to face the camera. 
</summary>
            <param name="lID" />
            <param name="fWidth" />
            <param name="fHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectMipMapLODBiasB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="lLimb" />
            <param name="fBias" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectMipMapLODBias(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fBias" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectGetInternalData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalObjectCreationMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetMeshData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMeshID" />
            <param name="ulFVF" />
            <param name="ulFVFSize" />
            <param name="ulpMeshData" />
            <param name="ulVertMax" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMeshData(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary />
            <param name="lMeshID" />
            <param name="ulPdwFVF" />
            <param name="ulPdwFVFSize" />
            <param name="ulPdwVertMax" />
            <param name="ulPData" />
            <param name="ulDwDataSize" />
            <param name="bLockData" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AutomaticEnd">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AutomaticStart">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StencilRenderEnd">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StencilRenderStart">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.UpdateNoZDepth">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ConvertMeshToVertexData(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalculateMeshBoundsB(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulPMesh" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalculateAllBounds(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16*)">
            <summary />
            <param name="ulPObject" />
            <param name="bFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ConvertLocalDBMeshToTriList(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulPMesh" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ConvertMeshToSharedVerts(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="ulPMesh" />
            <param name="fThreshold" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ConvertLocalDBMeshToVertsOnly(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="ulPMesh" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetDBFVFValueOffsetMap(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulFVF" />
            <param name="ulPOffsetMap" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetDBUniverseMeshList(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="pMeshList" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CreateMeshFromOtherMesh(System.Int16,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="bCreateNew" />
            <param name="ulPMesh" />
            <param name="ulPOtherMesh" />
            <param name="ulPmatWorld" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalculateDBObjectWorld(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulPObject" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalculateDBMeshBounds(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulPMesh" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetFVFMeshOffsetMap(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="ulPMesh" />
            <param name="ulPsOffsetMap" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumLights(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the maximum number of lights you can have in any 3D scene. It is determined by the 3D device you are currently using. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumPixelShaderValue(System.Single*)">
            <summary>
This command will return the maximum pixel shader value allowed by the current 3D device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumVertexShaderConstants(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the maximum number of vertex shader constants allowed by the current 3D device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumPixelShaderVersion(System.Single*)">
            <summary>
This command will return the maximum pixel shader version allowed by the current 3D device. The version number is returned as a real value. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumVertexShaderVersion(System.Single*)">
            <summary>
This command will return the maximum vertex shader version allowed by the current 3D device. The version number is returned as a real value. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumVolumeExtent(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the maximum volume extent allowed by the current 3D device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumTextureHeight(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the maximum texture height allowed by the current 3D device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetMaximumTextureWidth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the maximum texture width allowed by the current 3D device. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ZBufferAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports a Z buffer, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureAvailable(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AlphaComparisionAvailable(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.VolumeMapAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports volume mapping, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.OnlySquareTexturesAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device only supports square textures, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ProjectedTexturesAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports projected textures, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerspectiveTexturesAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports perspective correct texturing, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.NonPowTexturesAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports non-power of 2 texture sizes, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MipMapVolumeAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports mipmapped volumes, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MipMapAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports mipmapping, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MipCubeMapAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports mipmapped cube mapping, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CubeMapAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports cube mapping, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AlphaAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports operations to the alpha channels contained within your textures and surfaces. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ZFogAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports Z Fogging, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.WFogAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports W Fogging, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.WBufferAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports a W buffer, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MipMapLODBiasAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports a lod bias factor in the mipmapping feature, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FogVertexAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports the fog vertex method of producing fog, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FogTableAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports the fog table method of producing fog, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FogRangeAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports the fog range feature, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DitherAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports texture dithering, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ColorPerspectiveAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports color perspective correction of textures, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AntiAliasAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports anti aliasing of texture edges, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AnisotropicFilteringAvailable(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CullCWAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports clockwise culling of polygons, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CullCCWAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports counter clockwise culling of polygons, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ColorWriteEnableAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports color write enable, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ClipTLVertsAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports clipping of TL vertices otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ClipAndScalePointsAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports slipping and scaling of points, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TLVertexVideoMemoryAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports transformation and lighting in video memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TLVertexSystemMemoryAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports transformation and lighting in system memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.NonLocalVideoMemoryAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports nonlocal video memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureVideoMemoryAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports texturing from video memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureSystemMemoryAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports texturing from system memory, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SeparateTextureMemoriesAvailable(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetHWTransformAndLight(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TNLAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the current device uses hardware TNL. TNL stands for Transformation and Lighting. Most cards these days support TNL in hardware as standard. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RenderAfterFlipAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports rendering to the display device directly after a flip has occurred, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.BlitSysOntoLocalAvailable(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FullScreenGammaAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports the fullscreen modification of the display gamma setting, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RenderWindowedAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports rendering to a window, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalibrateGammaAvailable(System.Int16*)">
            <summary>
This command will return a value of one if the 3D device supports modification of the display gamma, otherwise zero. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetDeviceType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the device type of the current 3D device. This device type is returned as an integer value. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PixelShaderExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will return a value of one if the specified pixel shader exists, otherwise zero. 
</summary>
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.VertexShaderExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will return a value of one if the specified vertex shader exists, otherwise zero. 
</summary>
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbScaleZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z scale value of the limb, normally set to 100 as a percentage indicator. A value of 50 would represent half scale, and a value of 200 would be double the scale. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbScaleY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y scale value of the limb, normally set to 100 as a percentage indicator. A value of 50 would represent half scale, and a value of 200 would be double the scale. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbScaleX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X scale value of the limb, normally set to 100 as a percentage indicator. A value of 50 would represent half scale, and a value of 200 would be double the scale. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbCount(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbName(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary />
            <param name="ulDestStr" />
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetTNLAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.Statistic(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an internal statistic from the engine. Providing a value of one as the parameter will cause the command to return the current number of polygons used to render the scene. 
</summary>
            <param name="lCode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.Get3DBLITAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FogAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of 1 if the current 3D card supports fogging. Fogging is used to create the effect of 3D fog used by the commands dbFogOn, dbFogDistance and dbFogColor. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FilteringAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of 1 if the current 3D card supports texture filtering. Texture filtering is used to smooth out your textures, creating a slight bluring effect that improves visual quality. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AlphaBlendingAvailable(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of 1 if the current 3D card supports alphablending. Alphablending is used to create the effect of 3D semi-transparency used by the dbGhostObject command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MeshExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified mesh exists, otherwise zero will be returned. The parameter should be specified using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbTextureName(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary>
This command will return the internal name of the limb texture. 
</summary>
            <param name="ulDestStr" />
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CheckLimbLink(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if a newly created limb can be added to the specified limb. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbVisible(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object exists, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the integer image number used to texture the specified limb of the 3D object. Limbs that have been loaded pre-textured contain internal image data and return an image number of zero. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbDirectionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world Z angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbDirectionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world Y angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbDirectionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world X angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world Z position of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world Y position of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number world X position of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbAngleZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number Z angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbAngleY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number Y angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbAngleX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the real number X angle of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbOffsetZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number Z offset of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The position of the limb is always offset from the positional coordinates of the 3D object itself. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbOffsetY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number Y offset of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The position of the limb is always offset from the positional coordinates of the 3D object itself. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbOffsetX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number X offset of the specified limb of the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The position of the limb is always offset from the positional Coordinates of the 3D object itself. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object exists, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCollisionZ(System.Single*)">
            <summary>
This command will return sliding data for Z if the rotated-box flag is zero. The rotated-box flag is set when you used the command dbMakeObjectCollisionBox. You must have used the make command in order to generate a return value here. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCollisionY(System.Single*)">
            <summary>
This command will return sliding data for Y if the rotated-box flag is zero. The rotated-box flag is set when you used the command dbMakeObjectCollisionBox. You must have used the make command in order to generate a return value here. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetObjectCollisionX(System.Single*)">
            <summary>
This command will return sliding data for X if the rotated-box flag is zero. The rotated-box flag is set when you used the command dbMakeObjectCollisionBox. You must have used the make command in order to generate a return value here. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticLineOfSightZ(System.Single*)">
            <summary>
This command will return a real value containing the Z position if the command dbStaticLineOfSight returns a one. This value of one specifies that the 3D line of sight has hit a static box. You can use this value to position an object or other 3D entity at the point at which the line hit the obstruction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticLineOfSightY(System.Single*)">
            <summary>
This command will return a real value containing the Y position if the command dbStaticLineOfSight returns a one. This value of one specifies that the 3D line of sight has hit a static box. You can use this value to position an object or other 3D entity at the point at which the line hit the obstruction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticLineOfSightX(System.Single*)">
            <summary>
This command will return a real value containing the X position if the command dbStaticLineOfSight returns a one. This value of one specifies that the 3D line of sight has hit a static box. You can use this value to position an object or other 3D entity at the point at which the line hit the obstruction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionValue(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionCount(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionFloor(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionZ(System.Single*)">
            <summary>
This command will return sliding data for Z. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionY(System.Single*)">
            <summary>
This command will return sliding data for Y. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionX(System.Single*)">
            <summary>
This command will return sliding data for X. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticVolume(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fNewX" />
            <param name="fNewY" />
            <param name="fNewZ" />
            <param name="fSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticRayCast(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="fSx" />
            <param name="fSy" />
            <param name="fSz" />
            <param name="fDx" />
            <param name="fDy" />
            <param name="fDz" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StaticLineOfSight(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D line from Sx,Sy,Sz to Dx,Dy,Dz collides with an already defined static collision box. The Width value allows you to vary the scope of detection, so that a thick line will ensure that the point at the start of the line has a very clear view of the destination point. The Accuracy value describes how accurate the returned line of sight data should be. Larger accuracy values means the line of sight calculation is quicker, but less accurate. A smaller value denotes more accuracy but the command takes longer to perform. All parameter values must be specified using real numbers. 
</summary>
            <param name="fSx" />
            <param name="fSy" />
            <param name="fSz" />
            <param name="fDx" />
            <param name="fDy" />
            <param name="fDz" />
            <param name="fWidth" />
            <param name="fAccuracy" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetStaticCollisionHit(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
You can use this command to detect whether a specified area within your 3D world is touching a static collision box. By specifying old and recent positions of the specified area, this command not only returns a one if a collision has occurred, but fills the get static collision x,y and z expressions with adjustment values. Applying these values to an object or entity will give the impression of sliding collision. 
</summary>
            <param name="fOldX1" />
            <param name="fOldY1" />
            <param name="fOldZ1" />
            <param name="fOldX2" />
            <param name="fOldY2" />
            <param name="fOldZ2" />
            <param name="fNX1" />
            <param name="fNY1" />
            <param name="fNZ1" />
            <param name="fNX2" />
            <param name="fNY2" />
            <param name="fNZ2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbHit(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lObjectA" />
            <param name="lLimbA" />
            <param name="lObjectB" />
            <param name="lLimbB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LimbCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lObjectA" />
            <param name="lLimbA" />
            <param name="lObjectB" />
            <param name="lLimbB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectHit(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the two specified 3D objects hit each other. If the second object number is set to zero, the number of the object hit by the first object will be returned as an integer value. 
</summary>
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the two specified 3D objects are overlapping. If the second object number is set to zero, the number of the object overlapping with the first object will be returned as an integer value. 
</summary>
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectCollisionCenterZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z position of the center of the collision sphere associated with the specified object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectCollisionCenterY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y position of the center of the collision sphere associated with the specified object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectCollisionCenterX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X position of the center of the collision sphere associated with the specified object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectCollisionRadius(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the radius of the collision sphere of the specified object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectInScreen(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified 3D object is wholly or partly visible within the screen borders, otherwise zero is returned. Even if the object is behind the camera, its overall size may partially clip the screen area. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectScreenY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current Y screen coordinate of the specified 3D object, even if the object is not actually within the borders of the screen. You can use this for providing such things as text labels for your 3D objects or adding lens flare to a nearby street lamp. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectScreenX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current X screen coordinate of the specified 3D object, even if the object is not actually within the borders of the screen. You can use this for providing such things as text labels for your 3D objects or adding lens flare to a nearby street lamp. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectInterpolation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return an integer of the current animation interpolation percentage of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return an integer value of the current animation speed of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value of the current animation frame of the specified 3D object. Animation frames are counted by keyframe represented as whole numbers, but the animation can be anywhere between two keyframes which is why the frame is returned using a real value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectLooping(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object is looping its animation, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectPlaying(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object is playing its animation, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectVisible(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object is visible, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeZC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full depth of the object. 
</summary>
            <param name="lID" />
            <param name="lUseScaling" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeYC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full height of the object. 
</summary>
            <param name="lID" />
            <param name="lUseScaling" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeXC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full width of the object. 
</summary>
            <param name="lID" />
            <param name="lUseScaling" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeZB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full depth of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeYB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full height of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeXB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full width of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number representing the full unit size of the specified 3D object. The unit size can be used to determine whether or not to scale the object for better visibility. Extremely small and extremely large objects will both suffer visual clipping when viewed by the camera. As a rule, your objects should have a unit size of between 50 and 3000. The finite visibility of the camera has a range of 5000 units, and objects of a distance greater than this will be clipped. Objects that are so close to the camera that they pass behind the camera will also be clipped. 
</summary>
            <param name="lID" />
            <param name="lUseScaling" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number representing the full unit size of the specified 3D object. The unit size can be used to determine whether or not to scale the object for better visibility. Extremely small and extremely large objects will both suffer visual clipping when viewed by the camera. As a rule, your objects should have a unit size of between 50 and 3000. The finite visibility of the camera has a range of 5000 units, and objects of a distance greater than this will be clipped. Objects that are so close to the camera that they pass behind the camera will also be clipped. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TotalObjectFrames(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of the last known animation frame number of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified 3D object exists, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ExcludeObjectOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ExcludeObjectOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.UpdateEmitter(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeEmitter(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetPickVectorZ(System.Single*)">
            <summary>
This command will return the Z offset from the vector stored in previously generated pick data. The pick data is generated when the dbPickObject and dbPickScreen commands are used. The vector is relative to the world position of the camera, and so adding the camera position to this vector will result in the 3D world position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetPickVectorY(System.Single*)">
            <summary>
This command will return the Y offset from the vector stored in previously generated pick data. The pick data is generated when the dbPickObject and dbPickScreen commands are used. The vector is relative to the world position of the camera, and so adding the camera position to this vector will result in the 3D world position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetPickVectorX(System.Single*)">
            <summary>
This command will return the X offset from the vector stored in previously generated pick data. The pick data is generated when the dbPickObject and dbPickScreen commands are used. The vector is relative to the world position of the camera, and so adding the camera position to this vector will result in the 3D world position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetPickDistance(System.Single*)">
            <summary>
This command will return the Distance value from previously generated pick data. The pick data is generated when the dbPickObject and dbPickScreen commands are used. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PickScreen(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will calculate a relative 3D coordinate from a 2D screen coordinate. The additional Distance parameter indicates how far into the screen the 3D coordinate is to be calculated. The resulting 3D coordinate is not a world position, but a relative 3D vector from the current camera position. The world coordinate can be obtained by adding the camera position to the resulting vector. The resulting vector is generated internally and can be retrieved using the dbGetPickVector commands. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="fDistance" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PickObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the Object Number of the closest object at the specified screen coordinates. The objects that are tested against the 2D coordinate are only those within the Object Start and Object End range in order to speed up specific tests. If no object exists at the coordinate, a value of zero is returned. If an object number is returned, additional data will be generated and stored internally. This extra data can be retrieved using the dbGetPickVector and dbGetPickDistance commands. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="lObjectStart" />
            <param name="lObjectEnd" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.Convert3DStoX(System.Char*,System.Char*)">
            <summary />
            <param name="sFilename1" />
            <param name="sFilename2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableTNL">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableTNL">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FlushVideoMemory">
            <summary>
This command will flush all textures and other resources from active video memory. You should use this command when you are dramatically changing the contents of your 3D scene such as changing game levels or entering a new environment. This technique will improve performance during the initial renders of a new scene. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetMipmapMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetIndexData(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataVB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataUB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataV(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataU(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataDiffuse(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataNormalsZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataNormalsY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataNormalsX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lVertex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataIndexCount(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GetVertexDataVertexCount(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGIntersectionOnVertexData(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lBrushMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGDifferenceOnVertexData(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lBrushMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGUnionOnVertexData(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lBrushMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteMeshFromVertexData(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lVertex1" />
            <param name="lVertex2" />
            <param name="lIndex1" />
            <param name="lIndex2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddMeshToVertexData(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataUVB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lVertex" />
            <param name="lIndex" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetIndexData(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lIndex" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lVertex" />
            <param name="fSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataUV(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lVertex" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataDiffuse(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lVertex" />
            <param name="ulDiffuse" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataNormals(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lVertex" />
            <param name="fNX" />
            <param name="fNY" />
            <param name="fNZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexDataPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lVertex" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.UnlockVertexData">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LockVertexDataForMesh(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LockVertexDataForLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LockVertexDataForLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lReplaceOrUpdate" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeLODFromMesh(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMeshID" />
            <param name="lVertNum" />
            <param name="lNewMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ReduceMesh(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMeshID" />
            <param name="lBlockMode" />
            <param name="lNearMode" />
            <param name="lGX" />
            <param name="lGY" />
            <param name="lGZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeMeshFromObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a single mesh using the entire mesh data of an object. A mesh is a wireframe description of a 3D shape. The mesh and object numbers should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lObjectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ChangeMesh(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the mesh of an object limb. You can use this command to animate an object that requires a sequence of fixed static meshes. The parameters must be integer values. 
</summary>
            <param name="lObjectID" />
            <param name="lLimbID" />
            <param name="lMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SaveMesh(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will save the specified mesh to a file in the XFile text format. You can use this command to extract and store meshes previously existing as part of a more complex object, or to create a large mesh based world and save it out for later loading as a 3D game level. 
</summary>
            <param name="sFilename" />
            <param name="lMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteMesh(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified mesh previously loaded. Deleting unused meshes improves system performance. After you have used a mesh to create an object or limb, you are free to delete it. The parameter should be specified using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoadMesh(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a single X file into the specified mesh number. A mesh is a wireframe description of a 3D shape. You must use a filename that points to a file that stores 3D mesh data in the X file format. The mesh number should be specified using an integer value. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectFromLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a simple object from the specified limb. You can use this command to remove a limb element such as an arm or gun from an object and create a new object using just this element. Ideal for deconstructing loaded models and using their elements for other uses. 
</summary>
            <param name="lID" />
            <param name="lSrcObj" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetLimbNormals(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetLimbSmoothing(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will smooth the sharp edges of the mesh within a limb by adjusting the normals data. A percentage value of zero will perform no smoothing and create a facet surface for the limb. A percentage value of 100 will perform full smoothing, averaging all normals that share a vertex position and create a smoothing effect elimiating all edges. A value between these two limits will determine the degree beyond which an edge will be smoothed or left sharp. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleLimbTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will scale the UV data of the specified limb of the 3D object. The UV data controls how a texture is mapped onto your object. By scaling the UV data, you can effectively stretch or tile the texture over your object. The U value controls the horizontal spread of the data. The V value controls the vertical spread of the data. A U or V value of 1 means no scale change. A value of 0.5 will scale the texture by half. A value of 2.0 will double the scale of the texture. The scale effect is permanent. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScrollLimbTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will scroll the UV data of the specified limb of the 3D object. The UV data controls how a texture is mapped onto your object. By scrolling the UV data, you can effectively scroll the texture over your limb. The U value controls the horizontal shift of the data. The V value controls the vertical shift of the data. The scroll effect is permanent. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ColorLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color the specified limb of a 3D object using an RGB colour value. The parameters must be integer values. The RGB color value can be generated by using the dbRGB command. Some objects loaded from a model file may not be colored if they do not already contain diffuse color data. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply an existing image to the limb of a 3D object as a texture. You must create an image first using the dbGetImage command before attempting to texture part of the 3D object. The parameters should be specified using integer values. An additional texture stage index can be provided to the command to specify multi-textures directly, and is required when using shaders that take pixel data from secondary textures. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lStage" />
            <param name="lImageID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply an existing image to the limb of a 3D object as a texture. You must create an image first using the dbGetImage command before attempting to texture part of the 3D object. The parameters should be specified using integer values. An additional texture stage index can be provided to the command to specify multi-textures directly, and is required when using shaders that take pixel data from secondary textures. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lImageID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LinkLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will link a newly created limb to a limb within an existing 3D object. When a limb is connected to another, it becomes a child limb that will be affected by the position, rotation and scale of its parent limbs. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lParentID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RemoveLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will remove an existing limb from an object. Destroying a limb will also remove every limb associated as a child node from the removed limb. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a new limb from a specified mesh and add it to an existing 3D object. Limbs can only be added sequentially, so you must ensure you specify a new limb number that immediately follows an existing limb. The parameters should be specified using integer values. When a limb is added to a 3D object, it will not have a place in the object hierarchy. You can position the limb in the object hierarchy using the dbLinkLimb command. Do not confuse dbLinkLimb with dbOffsetLimb which sets the actual 3D position of the limb within the object.
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lMeshID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the scale of the specified limb within the 3D object by affecting the percentage scale value of all three dimensions. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="lBoundFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will change the scale of the specified limb within the 3D object by affecting the percentage scale value of all three dimensions. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RotateLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the rotation of the specified limb within the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The object and limb parameters should be specified using integer values. The offset parameters should be specified using real numbers. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="lBoundFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RotateLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will change the rotation of the specified limb within the 3D object. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The object and limb parameters should be specified using integer values. The offset parameters should be specified using real numbers. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.OffsetLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will change the relative position of the specified limb within the 3D object. The position of the limb is always offset from the main coordinates of the 3D object and from any parent limbs. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The object and limb parameters should be specified using integer values. The offset parameters should be specified using real numbers. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="lBoundFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.OffsetLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will change the relative position of the specified limb within the 3D object. The position of the limb is always offset from the main coordinates of the 3D object and from any parent limbs. Specifying a limb number of zero provides access to the objects own root data, and should not normally be used in this way. The object and limb parameters should be specified using integer values. The offset parameters should be specified using real numbers. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ShowLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show the specified limb within the 3D object previously hidden. The parameters should be specified using integer values. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.HideLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide the specified limb within the 3D object. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerformCheckListForObjectLimbs(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make a list of all limbs contained in a 3D object. Objects that have been loaded may contain hundreds of limbs, and are identified by number. All limbs include an internal limb description that often indicates which part of the overall 3D object it belongs to. You can access the limb description using the string item of the checklist when you have performed the check. Use the checklist commands in the System command set to read the checklist. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ShowObjectLimbBounds(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimb" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ShowObjectBoundsB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show the wireframe bounds that reveal the collision sphere and collision boundbox associated with the object. These bounds can later be hidden by using the dbHideObjectBounds command. By specifying the optional iBox flag, the bound sphere is not shown with the box, allowing a clearer view of the bounding box on the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ShowObjectBounds(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show the wireframe bounds that reveal the collision sphere and collision boundbox associated with the object. These bounds can later be hidden by using the dbHideObjectBounds command. By specifying the optional iBox flag, the bound sphere is not shown with the box, allowing a clearer view of the bounding box on the object. 
</summary>
            <param name="lID" />
            <param name="lBoxOnly" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.HideObjectBounds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide the wireframe bounds that reveal the collision sphere and collision boundbox associated with the object. These bounds are originally revealed by using the dbShowObjectBounds command. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CalculateAutomaticCollision">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AutomaticCameraCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified camera to automatic collision. Automatic collision takes over the task of adjusting the camera when it hits an object in the 3D scene. Cameras with automatic collision use a collision sphere of the specified radius. If the Response value is set to one, the new position backtracks to the last collision free position when a hit occurs. 
</summary>
            <param name="lCameraID" />
            <param name="fRadius" />
            <param name="lResponse" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AutomaticObjectCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to automatic collision. Automatic collision takes over the task of adjusting the object when it hits another object in the 3D scene. Objects with automatic collision use a collision sphere of the specified radius, ignoring its previous collision shape. If the Response value is set to one, the new position backtracks to the last collision free position when a hit occurs. 
</summary>
            <param name="lObjectID" />
            <param name="fRadius" />
            <param name="lResponse" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.IntersectObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return the distance to the point of intersection between two coordinates, in reference to the specified object. Use this command to project a line from your current position to a destination to determine whether a collision will occur with an object. Ideal for bullet calculations and fast manual polygon collision. 
</summary>
            <param name="lObjectID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fNewX" />
            <param name="fNewY" />
            <param name="fNewZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectRadius(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the collision radius of the specified object. You can use this command to remove the outer most parts of your object from the collision system where collision at such extents are undesirable. 
</summary>
            <param name="lID" />
            <param name="fRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalCollisionOff">
            <summary>
This command will deactivate the influence of global collision. No 3D objects will be able to detect collisions with each other, unless the object has individual collision detection active. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalCollisionOn">
            <summary>
This command will activate the detection of collisions with any two 3D object, irrespective of their individual collision settings. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCollisionToPolygons(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to use polygon checking for collision detection. Polygon detection is much slower that box and sphere detection, but allows you to detect perfect collision against an object that has a complex polygon structure. The parameter should be specified using an integer value. When a polygon test is carried out, the primary object is always treated as a polygon object and the secondary object is always a sphere representative of the size of the second object. This method is significantly faster that a test against two polygon structures. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCollisionToBoxes(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to use a box area for collision detection. An invisible collision box will be used for every limb in the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCollisionToSpheres(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to use a spherical area for collision detection. An invisible collision sphere will be used for every limb in the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteObjectCollisionBox(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make an object use normal collision. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectCollisionBox(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make an object use box collision. If a value of zero is specified for the flag value, the box will be deemed to be a non-rotating box and able to generate sliding collision data using the dbGetObjectCollisionX, dbGetObjectCollisionY and dbGetObjectCollisionZ expressions. If the flag value is one, the box is deemed to be a rotated-box and will provide more accurate collision feedback as the object rotates. 
</summary>
            <param name="lID" />
            <param name="fIX1" />
            <param name="fIY1" />
            <param name="fIZ1" />
            <param name="fIX2" />
            <param name="fIY2" />
            <param name="fIZ2" />
            <param name="lRotatedBoxFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCollisionOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to ignore and be ignored should any collision occur. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCollisionOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to detect for and be detected for any collisions that occur. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalShadowsOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalShadowsOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CreateLightMaps(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary />
            <param name="lLMSize" />
            <param name="lLMQuality" />
            <param name="sPathForLightMaps" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteLightMapLights">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddLightMapLight(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int16)">
            <summary />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fRadius" />
            <param name="fRed" />
            <param name="fGreen" />
            <param name="fBlue" />
            <param name="fBrightness" />
            <param name="bCastShadow" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddStaticObjectsToLightMapPool">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddLimbToLightMapPool(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimb" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddObjectToLightMapPool(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectBlocking(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <param name="fX1" />
            <param name="fY1" />
            <param name="fZ1" />
            <param name="fX2" />
            <param name="fY2" />
            <param name="fZ2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGClip(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGIntersection(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGDifference(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PeformCSGUnion(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjectA" />
            <param name="lObjectB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddStaticLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lLightIndex" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fRange" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AddStaticScorch(System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="fSize" />
            <param name="lType" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticScorch(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lImageID" />
            <param name="lWidth" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.BuildStaticPortals">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticPortalsOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticPortalsOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DetachObjectFromStatic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AttachObjectToStatic(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoadStaticObjects(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilename" />
            <param name="lDivideTextureSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SaveStaticObjects(System.Char*)">
            <summary />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableStaticOcclusion">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableStaticOcclusion">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetSetStaticObjectsTexture(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeStaticCollisionBox(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command will create invisible collision zones within the static world data. Once defined, you can use the dbGetStaticCollisionHit command to detect whether another dynamically specified box area collides with this one. This command is ideally used to define solid areas within your 3D world. 
</summary>
            <param name="fX1" />
            <param name="fY1" />
            <param name="fZ1" />
            <param name="fX2" />
            <param name="fY2" />
            <param name="fZ2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticObjectsWireframeOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticObjectsWireframeOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteStaticObjects">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteStaticObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeStaticLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lLimb" />
            <param name="lType" />
            <param name="lArbitaryValue" />
            <param name="lCastShadow" />
            <param name="lPortalBlocker" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeStaticObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lType" />
            <param name="lArbitaryValue" />
            <param name="lCastShadow" />
            <param name="lPortalBlocker" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetStaticUniverse(System.Single,System.Single,System.Single)">
            <summary />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectKeyFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ClearObjectKeyFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ClearAllObjectKeyFrames(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AppendObjectAnimation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary />
            <param name="lID" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SaveObjectAnimation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary />
            <param name="lID" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetPixelShaderTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will select the image to be used by the specified pixel shader. 
</summary>
            <param name="lShader" />
            <param name="lSlot" />
            <param name="lTexture" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeletePixelShader(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified pixel shader if one exists. Delete pixel shaders when you have no further use for them to save a small amount of memory. 
</summary>
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CreatePixelShaderFromFile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will create a pixel shader from a specified text file. Use this command in concert with other pixel shader commands to create a special effect on a 3D object. Pixel shaders are powerful programmable effects, and not all 3D devices support them. 
</summary>
            <param name="lID" />
            <param name="sFile" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetPixelShaderOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will remove the influence of the pixel shader from the object. The pixel shader is not deleted, or deactivated, only the specified object will be affected. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetPixelShaderOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will assign a pixel shader to an object. If the pixel shader is valid, the shader effect will be applied immediately to the object. 
</summary>
            <param name="lID" />
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteVertexShader(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified vertex shader if one exists. Delete vertex shaders when you have no further use for them to save a small amount of memory. 
</summary>
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will select the matrix to be used by the specified vertex shader. 
</summary>
            <param name="lID" />
            <param name="ulRegister" />
            <param name="lMatrix" />
            <param name="ulConstantCount" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderVector(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will select the vector to be used by the specified vertex shader. 
</summary>
            <param name="lID" />
            <param name="ulRegister" />
            <param name="lVector" />
            <param name="ulConstantCount" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CreateVertexShaderFromFile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will create a vertex shader from a specified text file. Use this command in concert with other vertex shader commands to create a special effect on a 3D object. Vertex shaders are powerful programmable effects, and not all 3D devices support them. Make sure that your shader text file includes the minimum amount of information with your code in order that assembly can take place. Ensure you are using the correct versioning label and that the input vertex data format is specified. An example of this syntax might be 'vs.1.0 dcl_position v0 dcl_normal v3 dcl_color v6 dcl_texcoord0 v7'. 
</summary>
            <param name="lID" />
            <param name="sFile" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderStream(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lStreamPos" />
            <param name="lData" />
            <param name="lDataType" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderStreamCount(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vertex shader stream count for the specified vertex shader. 
</summary>
            <param name="lID" />
            <param name="lCount" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ConvertObjectFVF(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will convert the specified object to use a new FVF Format. FVF stands for Flexible Vertex Format and represents how much data each vertex of your objects meshes contain. Use this command to prepare an object for use with a vertex shader effect. The FVF Format is specified using bits. Each bit represents an element that will be created within the vertex data. The FVF bits are specified within a DWORD and are as follows: FVF_XYZ=0x002, FVF_XYZRHW=0x004, FVF_XYZB1=0x006, FVF_XYZB2=0x008, FVF_XYZB3=0x00a, FVF_XYZB4=0x00c, FVF_XYZB5=0x00e, FVF_NORMAL=0x010, FVF_PSIZE=0x020, FVF_DIFFUSE=0x040, FVF_SPECULAR=0x080, FVF_TEX0=0x000, FVF_TEX1=0x100, FVF_TEX2=0x200, FVF_TEX3=0x300, FVF_TEX4=0x400, FVF_TEX5=0x500, FVF_TEX6=0x600, FVF_TEX7=0x700, FVF_TEX8=0x800. 
</summary>
            <param name="lID" />
            <param name="ulFVF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will remove the influence of the vertex shader from the object. The vertex shader is not deleted, or deactivated, only the specified object will be affected. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetVertexShaderOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will assign a vertex shader to an object. If the vertex shader is valid, the shader effect will be applied immediately to the object. 
</summary>
            <param name="lID" />
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetShadowShadingOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to cast a hardware shadow. This command requires hardware specifically designed for this feature, as it's a very intensive calculation. Use this command sparingly for best performance. 
</summary>
            <param name="lID" />
            <param name="lMesh" />
            <param name="lRange" />
            <param name="lUseShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetShadowPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lMode" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetShadowShadingOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalReflectionColor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <param name="lAlphaLevel" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalShadowShades(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lShades" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetGlobalShadowColor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <param name="lAlphaLevel" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetReflectionShadingOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to use reflection. Use this command when you want to give your object a reflective quality, though not all 3D hardware will support Vertex Shaders which are required to produce this effect. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetShadowShadingOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to cast a hardware shadow. This command requires hardware specifically designed for this feature, as it's a very intensive calculation. Use this command sparingly for best performance. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EffectExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified FX effect exists. If an attempt was made to dbLoadEffect and the load fails, no runtime error is presented. Use this command to determine if an effect was loaded successfully. Given the nature of FX files, failures can occur often when loading so use of this command is highly recommended. 
</summary>
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectTechnique(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will set the technique of the specified FX effect. The technique is specified by name, and the name can be found heading the technique within the FX file itself. An FX effect can have multiple techniques within the file. 
</summary>
            <param name="lEffectID" />
            <param name="sTechniqueName" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectConstantMatrix(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the value of an FX effect matrix constant. An FX effect constant is one of many internal variables of the effect which control the effect in real-time based on what the FX does. Some constants are automatically provided to the FX system effect such as world and camera positions, time and other critical data. Often, FX files will contain extra constants to create a variety of results and these constants can be altered in real-time by this command. Use the dbPerformCheckListForEffectValues to get the names of all the constants you can alter. 
</summary>
            <param name="lEffectID" />
            <param name="sConstantName" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectConstantVector(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the value of an FX effect vector constant. An FX effect constant is one of many internal variables of the effect which control the effect in real-time based on what the FX does. Some constants are automatically provided to the FX system effect such as world and camera positions, time and other critical data. Often, FX files will contain extra constants to create a variety of results and these constants can be altered in real-time by this command. Use the dbPerformCheckListForEffectValues to get the names of all the constants you can alter. 
</summary>
            <param name="lEffectID" />
            <param name="sConstantName" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectConstantFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Single)">
            <summary>
This command will set the value of an FX effect float constant. An FX effect constant is one of many internal variables of the effect which control the effect in real-time based on what the FX does. Some constants are automatically provided to the FX system effect such as world and camera positions, time and other critical data. Often, FX files will contain extra constants to create a variety of results and these constants can be altered in real-time by this command. Use the PERFORM CHECKLIST FOR EFFECT VALUES to get the names of all the constants you can alter. 
</summary>
            <param name="lEffectID" />
            <param name="sConstantName" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectConstantInteger(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the value of an FX effect integer constant. An FX effect constant is one of many internal variables of the effect which control the effect in real-time based on what the FX does. Some constants are automatically provided to the FX system effect such as world and camera positions, time and other critical data. Often, FX files will contain extra constants to create a variety of results and these constants can be altered in real-time by this command. Use the dbPerformCheckListForEffectValues to get the names of all the constants you can alter. 
</summary>
            <param name="lEffectID" />
            <param name="sConstantName" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectConstantBoolean(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the value of an FX effect boolean constant. An FX effect constant is one of many internal variables of the effect which control the effect in real-time based on what the FX does. Some constants are automatically provided to the FX system effect such as world and camera positions, time and other critical data. Often, FX files will contain extra constants to create a variety of results and these constants can be altered in real-time by this command. Use the dbPerformCheckListForEffectValues to get the names of all the constants you can alter. 
</summary>
            <param name="lEffectID" />
            <param name="sConstantName" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectTranspose(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the transpose method of the FX effect. Low and high level shaders perform 3D maths using the matrix data passed in by the application. Some of these shaders require that the matrix data is tranposed, where others require untransposed matrix data. Setting the transpose flag to one will tranpose any matrix data passed to the shader. 
</summary>
            <param name="lEffectID" />
            <param name="lTransposeFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerformChecklistForEffectErrorsB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a checklist an error report upon failure to load an FX file. The checklist strings will contain a single line of the report, for however large the report is. 
</summary>
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerformChecklistForEffectErrors">
            <summary>
This command will create a checklist an error report upon failure to load an FX file. The checklist strings will contain a single line of the report, for however large the report is. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PerformChecklistForEffectValues(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create a checklist of all the effect constants used by the loaded FX file. The checklist strings will contain the names of the constants, which can then be individually set with the dbSetEffectConstant command. 
</summary>
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetLimbEffect(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply a previously loaded FX effect onto the specified limb of an object. You can use this command to apply an FX effect to a single part of a model. You can apply different effects to different parts of the same model to create some stunning results. 
</summary>
            <param name="lID" />
            <param name="lLimbID" />
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectEffect(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply a previously loaded FX effect onto the specified object. Using this command instead of dbSetEffectOn allows many objects to share a single FX system and increase the performance of your application. 
</summary>
            <param name="lID" />
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteEffect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete an FX effect. Any effects that are using this effect will cease to render correctly if the FX is deleted while it is being used by the application. 
</summary>
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoadEffect(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load an FX file. 
</summary>
            <param name="sFilename" />
            <param name="lEffectID" />
            <param name="lUseDefaultTextures" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetEffectOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load and apply an FX file to an object. If the object does not exist onto which an effect is set, a default model is created either specified by the FX file or if none is specified, an internal pyramid model. The FX filename must point to an FX file that is compatible with the DX9 effect framework and typically uses the extension '.fx'. If the Texture Flag is set to zero, the effect will use the textures already mapped to the model, and a value of one will discard the current textures and load the textures specified in the FX file. Typically, effects rely on the specified model and textures in the FX file to function properly. 
</summary>
            <param name="lID" />
            <param name="sFilename" />
            <param name="lUseDefaultTextures" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetRainbowShadingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to use rainbow rendering. By specifying a rainbow image, you can create a very colourful rainbow effect for your object. Your video card must have the ability to create this hardware effect. 
</summary>
            <param name="lID" />
            <param name="lStandardImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetCartoonShadingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the rendering method of the specified object. Otherwise known as toon shading, this command will apply a carton style render to the object using a shading image and an edge image. The shading image and edge image require layout for the toon shading to work correctly. Your video card must have the ability to create this hardware effect. 
</summary>
            <param name="lID" />
            <param name="lStandardImage" />
            <param name="lEdgeImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetBumpMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the bump map for the specified object. Bumpmapped textures are combined with the main texture to create an object with a visually uneven surface. Your video card must have the ability to create this hardware effect. 
</summary>
            <param name="lID" />
            <param name="lBumpMap" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetAlphaMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the true alpha value of an object to a percentage value from 0 to 100. Zero represents an alpha state that makes the object completely invisible. An alpha percentage of 100 will render the object fully visible. A value between these limits will create a true transparency effect when the object is transparent, as set by the dbSetObjectTransparency command. 
</summary>
            <param name="lID" />
            <param name="fPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetTextureMD3(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified object to use a special set of textures. The object must have been previously loaded as an MD3 model. MD3 models are blank by default and require this command to provide the textures. The six texture parameters H0, H1, L0, L1, L2 and U0 are values to images you must load prior to calling this command. 
</summary>
            <param name="lID" />
            <param name="lH0" />
            <param name="lH1" />
            <param name="lL0" />
            <param name="lL1" />
            <param name="lL2" />
            <param name="lU0" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetBlendMappingOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the blending map for the specified object. Blended textures are combined with the main texture to create a multitextured object. The Blend value is the mode used to create the blend effect. 
</summary>
            <param name="lID" />
            <param name="lStage" />
            <param name="lImage" />
            <param name="lTexCoordMode" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetBlendMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the blending map for the specified object. Blended textures are combined with the main texture to create a multitextured object. The Blend value is the mode used to create the blend effect. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetDetailMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the detail map for the specified object. Detail map textures are combined with the main texture to create a multitextured object. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetCubeMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply a cube map to the specified object. A cube map will give the impression of a reflective surface over the object. The images used specify a texture on each side of the object to be affected, which combine to create a 3D texture from which the reflective parts can be mapped to the object. Cube maps take up a lot of video memory so use this feature with care. 
</summary>
            <param name="lID" />
            <param name="l1" />
            <param name="l2" />
            <param name="l3" />
            <param name="l4" />
            <param name="l5" />
            <param name="l6" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetSphereMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will apply a sphere map to the specified object. A sphere map will give the impression of a reflective surface over the object. The image used for the sphere map is specially prepared to be used in concert with this command. The image is a fisheye spherical view of an entire scene placed in the center of the texture plate. 
</summary>
            <param name="lID" />
            <param name="lSphereImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetLightMappingOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the light map for the specified object. Light map textures are combined with the main texture to create a multitextured object. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectTextureB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set different texture modes used by the specified object. Every texture is painted onto an object using an internal set of values called UV data. This data contains a range of real numbers from zero to one. Zero specifying the top/left corner of your texture and one being the bottom/right corner of your texture. When an object uses UV data greater and less than this range, you are permitted a number of texture wrap modes to describe what should happen to paint these areas. Setting the Texture Wrap Mode to zero will use the default wrap mode which repeat the pattern of the texture over and over, a mode of one will mirror the texture to create a seamless texture pattern and a mode of two will set clamping which retains the colour of the last pixel at the textures edge and paint with that throughout the out of range area. The Mipmap Generation Flag is used to ensure the image has a mipmap texture. A mipmap is a texture that has many levels of detail, which the object can select and use based on the objects distance from the camera. 
</summary>
            <param name="lID" />
            <param name="lStage" />
            <param name="lMode" />
            <param name="lMipGeneration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set different texture modes used by the specified object. Every texture is painted onto an object using an internal set of values called UV data. This data contains a range of real numbers from zero to one. Zero specifying the top/left corner of your texture and one being the bottom/right corner of your texture. When an object uses UV data greater and less than this range, you are permitted a number of texture wrap modes to describe what should happen to paint these areas. Setting the Texture Wrap Mode to zero will use the default wrap mode which repeat the pattern of the texture over and over, a mode of one will mirror the texture to create a seamless texture pattern and a mode of two will set clamping which retains the colour of the last pixel at the textures edge and paint with that throughout the out of range area. The Mipmap Generation Flag is used to ensure the image has a mipmap texture. A mipmap is a texture that has many levels of detail, which the object can select and use based on the objects distance from the camera. 
</summary>
            <param name="lID" />
            <param name="lMode" />
            <param name="lMipGeneration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectNormals(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectSmoothing(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will smooth the sharp edges of the mesh within an object by adjusting the normals data. A percentage value of zero will perform no smoothing and create a facet surface for each limb within the object. A percentage value of 100 will perform full smoothing, averaging all normals that share a vertex position and create a smoothing effect elimiating all edges. A value between these two limits will determine the degree beyond which an edge will be smoothed or left sharp. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleObjectTextureB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will scale the UV data of the specified object. The UV data controls how a texture is mapped onto your object. By scaling the UV data, you can effectively stretch or tile the texture over your object. The U value controls the horizontal spread of the data. The V value controls the vertical spread of the data. A U or V value of 1 means no scale change. A value of 0.5 will scale the texture by half. A value of 2.0 will double the scale of the texture. The scale effect is permanent. 
</summary>
            <param name="lID" />
            <param name="lStage" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleObjectTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will scale the UV data of the specified object. The UV data controls how a texture is mapped onto your object. By scaling the UV data, you can effectively stretch or tile the texture over your object. The U value controls the horizontal spread of the data. The V value controls the vertical spread of the data. A U or V value of 1 means no scale change. A value of 0.5 will scale the texture by half. A value of 2.0 will double the scale of the texture. The scale effect is permanent. 
</summary>
            <param name="lID" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScrollObjectTexture(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary>
This command will scroll the UV data of the specified object. The UV data controls how a texture is mapped onto your object. By scrolling the UV data, you can effectively scroll the texture over your object. The U value controls the horizontal shift of the data. The V value controls the vertical shift of the data. The scroll effect is permanent. 
</summary>
            <param name="lID" />
            <param name="fU" />
            <param name="fV" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will texture an object using the specified image. The image can be any size, but the quality of the texture depends on the graphics card used. A texture size to the power of two is recommended size for all your textures. Where an image is larger than the supported texture size, the image is internally reduced when used as a texture. The object and image number must be integer values. You can use this command to remove the effects of multitexturing effects and shaders. An additional texture stage index can be provided to the command to specify multi-textures directly, and is required when using shaders that take pixel data from secondary textures. 
</summary>
            <param name="lID" />
            <param name="lStage" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TextureObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will texture an object using the specified image. The image can be any size, but the quality of the texture depends on the graphics card used. A texture size to the power of two is recommended size for all your textures. Where an image is larger than the supported texture size, the image is internally reduced when used as a texture. The object and image number must be integer values. You can use this command to remove the effects of multitexturing effects and shaders. An additional texture stage index can be provided to the command to specify multi-textures directly, and is required when using shaders that take pixel data from secondary textures. 
</summary>
            <param name="lID" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectToCameraOrientation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to point in the same direction as the camera. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectToObjectOrientationB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to point in the same direction as another 3D object. 
</summary>
            <param name="lID" />
            <param name="lWhichID" />
            <param name="lWhichLimbID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectToObjectOrientation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the specified 3D object to point in the same direction as another 3D object. 
</summary>
            <param name="lID" />
            <param name="lWhichID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FixObjectPivot(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will fix the current angles of the specified 3D object as the new absolute rotation of the model. It is often required to load, rotate and fix models to face a particular direction before using them. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectEmissive(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will alter the material emissive component of the object. The emissive component makes up one of the factors that controls the final colour of the object, specifically the colour the object emits irrespective of any light or ambience. Setting this value to a high colour will make it bright under its own inner colour. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectSpecularPower(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will alter the material specular power component of the object. The specular power component makes up one of the factors that controls the final colour of the object, specifically the strength of light reflected from the surface of the object. The amount of the specular reflection is controlled with the sister command dbSetObjectSpecular. 
</summary>
            <param name="lID" />
            <param name="fPower" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectSpecular(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will alter the material specular component of the object. The specular component makes up one of the factors that controls the final colour of the object, specifically the amount of light to be reflected from the surface of the object. The strength of the specular reflection is controlled with the sister command dbSetObjectSpecularPower. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectAmbience(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will alter the material ambience component of the object. The ambience component makes up one of the factors that controls the final colour of the object, specifically the amount of global ambient light it receives. If the global ambient was red, and this component was set to white, the object would receive 'full' ambient light and drown out any lighting otherwise applied to the object. The object would be completely red. This command should not be confused with dbSetObjectAmbient which controls the flag which states whether the object receives any ambient light whatsoever. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectDiffuse(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will alter the material diffuse component of the object. The diffuse component makes up one of the factors that controls the final colour of the object, specifically the amount of light it receives from all available light sources. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectAngleZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value Z angle of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectAngleY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value Y angle of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectAngleX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value X angle of the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full depth of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full height of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSizeX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the full width of the object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real number representing the full unit size of the specified 3D object. The unit size can be used to determine whether or not to scale the object for better visibility. Extremely small and extremely large objects will both suffer visual clipping when viewed by the camera. As a rule, your objects should have a unit size of between 50 and 3000. The finite visibility of the camera has a range of 5000 units, and objects of a distance greater than this will be clipped. Objects that are so close to the camera that they pass behind the camera will also be clipped. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value Z position of the specified 3D object in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value Y position of the specified 3D object in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ObjectPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return a real value X position of the specified 3D object in 3D space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RollObjectRight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to roll right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RollObjectLeft(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to roll left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PitchObjectDown(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to pitch downwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PitchObjectUp(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to pitch upwards. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative.value. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TurnObjectRight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to turn right. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.TurnObjectLeft(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate an existing 3D object to turn left. The rotation is independent of any axis orientation and allows free motion. The value of the angle can be positive or negative. 
</summary>
            <param name="lID" />
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ZRotateObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the specified 3D object around the Z axis dimension. 
</summary>
            <param name="lID" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.YRotateObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the specified 3D object around the Y axis dimension. 
</summary>
            <param name="lID" />
            <param name="fY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.XRotateObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will rotate the specified 3D object around the X axis dimension. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MoveObjectUp(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the object in a up direction relative to its forward facing angle, rather than an absolute world direction. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MoveObjectRight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the object in a right direction relative to its forward facing angle, rather than an absolute world direction. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MoveObjectLeft(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the object in a left direction relative to its forward facing angle, rather than an absolute world direction. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MoveObjectDown(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the object in a down direction relative to its forward facing angle, rather than an absolute world direction. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PointObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will point the specified 3D object towards a point in 3D space. The command sets the current direction of the object to face towards this point in space. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MoveObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will move the specified 3D object in 3D space. The command uses the current direction of the object and moves it using the specified step value. 
</summary>
            <param name="lID" />
            <param name="fStep" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.RotateObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will rotate the specified 3D object around all three dimensions. The object number should be specified using an integer value. This method of rotation is called euler rotation and differs from free flight rotation. Euler angles retrieved from a free flight rotation specify a ZYX rotation, and you must call the dbSetObjectRotationZYX command on the Euler based object to make the two rotation systems compatible. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ScaleObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will scale the specified 3D object to stretch or shrink in all three dimensions, using percentage scale values.values. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PositionObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will place the specified 3D object in 3D space. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableObjectZBias(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fSlopeScale" />
            <param name="fDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableObjectBias(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ClearObjectsOfTextureRef(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="pTextureRef" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteObjects(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lFrom" />
            <param name="lTo" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFOV(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableObjectZWrite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will enable the Z write state of the object. The Z write state controls whether each pixel of the rendered object writes into the Z depth buffer. The default value is enabled, where the object writes pixels to the Z buffer only when a pixel of the object is successfully rendered to the screen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableObjectZWrite(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will disable the Z write state of the object. The Z write state controls whether each pixel of the rendered object writes into the Z depth buffer. The default value is enabled, where the object writes pixels to the Z buffer only when a pixel of the object is successfully rendered to the screen. By deactivating this behaviour, the object does not affect the depth information on the rendered screen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableObjectZRead(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will enable the Z read state of the object. The Z read state controls whether each pixel of the rendered object obeys the rule of Z buffer depth culling. The default value is enabled, where the object will only render pixels of the object that are above any previous pixels rendered to the screen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableObjectZRead(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will disable the Z read state of the object. The Z read state controls whether each pixel of the rendered object obeys the rule of Z buffer depth culling. The default value is enabled, where the object will only render pixels of the object that are above any previous pixels rendered to the screen. By disabling this state, all pixels are rendered whether they occur behind prior pixels or not. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.EnableObjectZDepth(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will return the specified object to normal Zdepth operations. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DisableObjectZDepth(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make the specified object ignore the Zdepth data and render to the screen over standard polygons. This command is useful for ensuring your FPS Gun will not poke through walls when you get too close. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LockObjectOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will unlock the specified 3D object from the screen. Locking objects to the screen commands the object to completely ignore the camera's influence. By unlocking a previously locked object, you are commanding the object to associate itself with the influence of the camera once again. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LockObjectOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will lock the specified 3D object to the screen. Locking objects to the screen commands the object to completely ignore the camera's influence. A locked object will be positioned as though the camera had never been altered from its default orientation. To make locked objects visible, simply set the Z position to a significant positive value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.UnGlueObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will detach the specified 3D object from any limb. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GlueObjectToLimbB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will attach the specified 3D object to a limb of another 3D object. By attaching an object to the limb of another, the objects position, rotation and scale are entirely controlled by the limb. This technique can be used to allow a robot arm to easily grab and lift an item, or allow your hero character to hold and wear a variety of items. 
</summary>
            <param name="lSource" />
            <param name="lTarget" />
            <param name="lLimb" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GlueObjectToLimb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will attach the specified 3D object to a limb of another 3D object. By attaching an object to the limb of another, the objects position, rotation and scale are entirely controlled by the limb. This technique can be used to allow a robot arm to easily grab and lift an item, or allow your hero character to hold and wear a variety of items. 
</summary>
            <param name="lSource" />
            <param name="lTarget" />
            <param name="lLimb" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.FadeObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will make the specified 3D object fade to the current ambient light level. With ambient light set to zero and the object faded using a value of zero, the object will be completely unlit. With a fade value of 200 its illumination will be doubled. With a fade value of 50, the illumination is halved. This technique can also be used with a ghosted object to slowly fade an object until completely invisible. 
</summary>
            <param name="lID" />
            <param name="fIPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GhostObjectOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will deactivate the effect of ghosting on the specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GhostObjectOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make the specified 3D object semi-transparent if supported by the current display card. This technique is known as alpha-blending and causes the object to appear as a ghost image. If a value of one is specified for the dark ghosting, the object uses negative alphablending. 
</summary>
            <param name="lID" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.GhostObjectOn(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will make the specified 3D object semi-transparent if supported by the current display card. This technique is known as alpha-blending and causes the object to appear as a ghost image. If a value of one is specified for the dark ghosting, the object uses negative alphablending. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectRotationZYX(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will reverse the order of rotation for the specified object. The angles of rotation will transform the object first around the Z axis, then the Y axis and finally the X axis. The parameter should be specified using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectRotationXYZ(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the order of rotation to the default behaviour. The angles of rotation will transform the object first around the X axis, then the Y axis and finally the Z axis. The parameter should be specified using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectInterpolation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the percentage of animation frame interpolation in the specified 3D object. Interpolation occurs when the animation frame is manually set using the dbSetObjectFrame command. If the interpolation percentage is 100, the transition between frames is instant. When the value is set to 50, it would take two cycles to make the transition. You can use interpolation to make extremely smooth movements between two different animation frames. 
</summary>
            <param name="lID" />
            <param name="lJump" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the speed of the animation in the specified 3D object. A value of 1 will perform the animation at its slowest rate. A value of 100 is the maximum speed setting. 
</summary>
            <param name="lID" />
            <param name="lSpeed" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFrameC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the animation frame of the specified 3D object. 
</summary>
            <param name="lID" />
            <param name="fFrame" />
            <param name="lRecalculateBounds" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFrameB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the animation frame of the specified 3D object. 
</summary>
            <param name="lID" />
            <param name="fFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFrame(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the animation frame of the specified 3D object. 
</summary>
            <param name="lID" />
            <param name="lFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ColorObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will color the specified 3D object using an RGB colour value. The colour value can be specified using the dbRGB command. Some objects loaded from a model file may not be colored if they do not already contain diffuse color data. 
</summary>
            <param name="lID" />
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.ShowObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will reveal a specified 3D object that was previously hidden. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.HideObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide the specified 3D object from view. You can substantially increase the performance of your 3D program if you hide objects whenever possible. The contents of a room behind a closed door can be hidden for as long as the door remains closed, allowing your program to run much faster and improve overall performance. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.StopObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will stop the animation in a specified 3D object. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoopObjectC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the animation data contained within the specified 3D object from the beginning. You can optionally play and loop the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <param name="lEnd" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoopObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the animation data contained within the specified 3D object from the beginning. You can optionally play and loop the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoopObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the animation data contained within the specified 3D object from the beginning. You can optionally play and loop the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PlayObjectC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
These commands will play the animation data contained within the specified 3D object. You can optionally play the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <param name="lEnd" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PlayObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
These commands will play the animation data contained within the specified 3D object. You can optionally play the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.PlayObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
These commands will play the animation data contained within the specified 3D object. You can optionally play the animation by providing a specified start and end frame. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.AppendObject(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will append all animation data from an X file into the specified X file object. The new animation data will begin from the start frame specified up to the length of the files animation data. Ensure that the 3D object being appended uses the same limb names as the original object, otherwise the load will fail. The parameters should be specified using integer values. 
</summary>
            <param name="sString" />
            <param name="lID" />
            <param name="lFrame" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectTriangle(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command will construct a 3D object from values that describe a single triangle mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fX1" />
            <param name="fY1" />
            <param name="fZ1" />
            <param name="fX2" />
            <param name="fY2" />
            <param name="fZ2" />
            <param name="fX3" />
            <param name="fY3" />
            <param name="fZ3" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectPlane(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fWidth" />
            <param name="fHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectCone(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will construct a 3D object from a cone mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectCylinder(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will construct a 3D object from a cylinder mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectPyramid(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectBox(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will construct a 3D object from a box mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectCube(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will construct a 3D object from a cube mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fISize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectSphereB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will construct a 3D object from a sphere mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.InstanceObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will create an instance copy of the object. Unlike dbCloneObject, this instance will share most of the original objects data and be dependent on the original object remaining in existence to hold such data. Instanced objects do have the ability to hide/show both their limbs and hide/show the object, independent of the original object. This command is ideally suited to copying large numbers of primarily static objects such as trees and rocks where the original model data is to remaing largely unchanged. 
</summary>
            <param name="lDestinationID" />
            <param name="lSourceID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.CloneObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clone the specified object and make an exact duplicate of it. Cloned objects do not share any data allowing you to use the new object in any manner you wish. 
</summary>
            <param name="lDestinationID" />
            <param name="lSourceID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObjectSphere(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will construct a 3D object from a sphere mesh. The mesh is used as the root limb for the 3D object. The 3D object will be constructed untextured and such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="fRadius" />
            <param name="lRings" />
            <param name="lSegments" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.MakeObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will construct a 3D object from a single mesh and image. The mesh is used as the root limb for the 3D object and the image is used as a texture for the object. You do not have to specify an image value, but such models will appear white when displayed. 
</summary>
            <param name="lID" />
            <param name="lMeshID" />
            <param name="lTextureID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectAmbient(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the ambient state of the specified object. Setting the ambience to one will ensure the object is affected by the global ambient light level. 
</summary>
            <param name="lID" />
            <param name="bAmbient" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFog(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the fog state of the specified object. Setting the fog to one will ensure the object is affected by the global fog level. 
</summary>
            <param name="lID" />
            <param name="bFog" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectLight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the light state of the specified object. Setting the light to one will ensure the object is affected by any lights in the 3D scene. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bLight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFilterStage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lStage" />
            <param name="lFilter" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectFilter(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the texture filtering mode of the specified object. The Filter value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. 
</summary>
            <param name="lID" />
            <param name="lFilter" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectCull(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the cull state of the specified object. Setting the cull to one will ensure the object is culled so that away-facing polygons are not drawn. 
</summary>
            <param name="lID" />
            <param name="bCull" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectTransparency(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the transparency state of the specified object. Setting the transparency to one will ensure the object does not draw the transparent colour during final rendering. The transparent colour is determined by the dbSetImageColorKey command. 
</summary>
            <param name="lID" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectWireframe(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command will set the wireframe state of the specified object. Setting the wireframe to zero will ensure the object is solid. A value of one will cause the object to draw in wireframe form. 
</summary>
            <param name="lID" />
            <param name="bFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectE(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16)">
            <summary>
This command sets the internal properties of a specified 3D object number. When the wireframe flag is set to 0, the object only shows its wireframe form. When the transparency flag is set to 0, all parts of the object colored black are not drawn to the screen. When the cull flag is set to 0, the object will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the objects sensitivity to any lights in the scene. The Fog Flag activates and deactivates the objects sensitivity to fog in the scene. The Ambient Flag activates and deactivates the objects sensitivity to ambient light in the scene. The object number and flag values should be specified using integer values. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bWireframe" />
            <param name="bTransparency" />
            <param name="bCull" />
            <param name="lFilter" />
            <param name="bLight" />
            <param name="bFog" />
            <param name="bAmbient" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16)">
            <summary>
This command sets the internal properties of a specified 3D object number. When the wireframe flag is set to 0, the object only shows its wireframe form. When the transparency flag is set to 0, all parts of the object colored black are not drawn to the screen. When the cull flag is set to 0, the object will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the objects sensitivity to any lights in the scene. The Fog Flag activates and deactivates the objects sensitivity to fog in the scene. The Ambient Flag activates and deactivates the objects sensitivity to ambient light in the scene. The object number and flag values should be specified using integer values. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bWireframe" />
            <param name="bTransparency" />
            <param name="bCull" />
            <param name="lFilter" />
            <param name="bLight" />
            <param name="bFog" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16)">
            <summary>
This command sets the internal properties of a specified 3D object number. When the wireframe flag is set to 0, the object only shows its wireframe form. When the transparency flag is set to 0, all parts of the object colored black are not drawn to the screen. When the cull flag is set to 0, the object will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the objects sensitivity to any lights in the scene. The Fog Flag activates and deactivates the objects sensitivity to fog in the scene. The Ambient Flag activates and deactivates the objects sensitivity to ambient light in the scene. The object number and flag values should be specified using integer values. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bWireframe" />
            <param name="bTransparency" />
            <param name="bCull" />
            <param name="lFilter" />
            <param name="bLight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command sets the internal properties of a specified 3D object number. When the wireframe flag is set to 0, the object only shows its wireframe form. When the transparency flag is set to 0, all parts of the object colored black are not drawn to the screen. When the cull flag is set to 0, the object will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the objects sensitivity to any lights in the scene. The Fog Flag activates and deactivates the objects sensitivity to fog in the scene. The Ambient Flag activates and deactivates the objects sensitivity to ambient light in the scene. The object number and flag values should be specified using integer values. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bWireframe" />
            <param name="bTransparency" />
            <param name="bCull" />
            <param name="lFilter" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SetObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16,System.Int16,System.Int16)">
            <summary>
This command sets the internal properties of a specified 3D object number. When the wireframe flag is set to 0, the object only shows its wireframe form. When the transparency flag is set to 0, all parts of the object colored black are not drawn to the screen. When the cull flag is set to 0, the object will draw polygons normally hidden due to the direction the polygon faces. The Filter Value sets the texture filtering, which controls the smoothing effect of the texture as it is mapped to the object. A Filter value of zero does no mipmapping, a value of one uses no smoothing and a value of two uses Linear Filtering. The Light Flag activates and deactivates the objects sensitivity to any lights in the scene. The Fog Flag activates and deactivates the objects sensitivity to fog in the scene. The Ambient Flag activates and deactivates the objects sensitivity to ambient light in the scene. The object number and flag values should be specified using integer values. If the object uses diffuse based colour, deactivating the light source will also deactivate the ability of the object to show its colour as it uses the light to calculate the diffuse result. 
</summary>
            <param name="lID" />
            <param name="bWireframe" />
            <param name="bTransparency" />
            <param name="bCull" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.DeleteObject(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified 3D object previously loaded. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.SaveObject(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoadObjectB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command loads a model into the specified 3D object number. You must specify a model in the X, 3DS, MDL, MD2 or MD3 format. Once you have loaded the 3D object file successfully, you can use the specified 3D object number to position, rotate, scale, animate and manipulate your 3D object. The object number should be specified using an integer value. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <param name="lDBProMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic3D.LoadObject(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command loads a model into the specified 3D object number. You must specify a model in the X, 3DS, MDL, MD2 or MD3 format. Once you have loaded the 3D object file successfully, you can use the specified 3D object number to position, rotate, scale, animate and manipulate your 3D object. The object number should be specified using an integer value. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkBasic3D">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncRenderQuad">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncEnableQuad">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncDisableQuad">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawToScreen">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawToCamera">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncMask(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="ulMask" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.CL(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.EXP(System.Single,System.Single*)">
            <summary>
This command will return a result raised to the power of the input value. 
</summary>
            <param name="fExp" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.INT(System.Single,System.Single*)">
            <summary>
This command will return the largest integer before the decimal point of a real number. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.ABS(System.Single,System.Single*)">
            <summary>
This command will return the positive equivalent of a float value. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SQRT(System.Single,System.Single*)">
            <summary>
This command will return the square root of a value. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.HTAN(System.Single,System.Single*)">
            <summary>
This command will return the hyperbolic tangent of value. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.HSIN(System.Single,System.Single*)">
            <summary>
This command will return the hyperbolic sine of the value. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.HCOS(System.Single,System.Single*)">
            <summary>
This command will return the hyperbolic cosine of the value. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.ATANFULL(System.Single,System.Single,System.Single*)">
            <summary>
This command will return the angle of two points in degrees between 0 and 360. The distance values are calculated by finding the distance between two points for both the X and Y axis. 
</summary>
            <param name="fA" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.ATAN(System.Single,System.Single*)">
            <summary>
This command will return the tangent in degrees between 0 and 360. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.ASIN(System.Single,System.Single*)">
            <summary>
This command will return the arcsine of value. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.ACOS(System.Single,System.Single*)">
            <summary>
This command will return the arccosine of a floating point value. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.TAN(System.Single,System.Single*)">
            <summary>
This command will returns the tangent of the value. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SIN(System.Single,System.Single*)">
            <summary>
This command will return the sine of value where value is in degrees between 0 and 360. 
</summary>
            <param name="fAngle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.COS(System.Single,System.Single*)">
            <summary>
This command will return the cosine of value were the value is in degrees between 0 and 360. 
</summary>
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.AlwaysActiveOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.AlwaysActiveOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.CurveAngle(System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return an auto-interpolated angle based on a given speed. This command will gradually move a number from its current value to a destination value at a certain speed. This command can be used to create the technique of a camera swinging into position from another location by curving the value of the camera angles. 
</summary>
            <param name="fA" />
            <param name="fDa" />
            <param name="fSp" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.NewZValue(System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return a value that represents the new Z position of a point in 3D space. This command is used in conjunction with dbNewXValue and dbNewYValue commands to move from one point in space to another point in space based on a specified angle. Rather than using COS/SIN maths, these commands simplify the task of moving coordinates within 3D space. The step value specifies how far in the specified direction you would like to calculate. 
</summary>
            <param name="fZ" />
            <param name="fA" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.NewYValue(System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return a value that represents the new Y position of a point in 3D space. This command is used in conjunction with dbNewXValue and dbNewZValue commands to move from one point in space to another point in space based on a specified angle. Rather than using COS/SIN maths, these commands simplify the task of moving coordinates within 3D space. The step value specifies how far in the specified direction you would like to calculate. 
</summary>
            <param name="fY" />
            <param name="fA" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.NewXValue(System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return a value that represents the new X position of a point in 3D space. This command is used in conjunction with dbNewYValue and dbNewZValue commands to move from one point in space to another point in space based on a specified angle. Rather than using COS/SIN maths, these commands simplify the task of moving coordinates within 3D space. The step value specifies how far in the specified direction you would like to calculate. 
</summary>
            <param name="fX" />
            <param name="fA" />
            <param name="fB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.WrapValue(System.Single,System.Single*)">
            <summary>
This command will return a value that does not exceed the range of 0 to 360. Where a value is specified that exceeds this range, the command will wrap the value around to bring it back within the range. This command is best understood by using the number of a clock as a mental picture of how a number wraps. If the clock hand points to 11 and is then advanced 2 hours, the number has to wrap from 12 around to 1 to keep the cycle going. 
</summary>
            <param name="fDa" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.CurveValue(System.Single,System.Single,System.Single,System.Single*)">
            <summary>
This command will return an auto-interpolated value based on a given speed. This command will gradually move a number from its current value to a destination value at a certain speed. This command can be used to create the technique of controlling a cars velocity as it breaks to a halt. 
</summary>
            <param name="fA" />
            <param name="fDa" />
            <param name="fSp" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.GetTime(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.GetDate(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.InKey(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.HighPerformanceTimer(System.Int64*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Timer(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the internal system time, which continually increments at a thousand times a second. The system time is returned in milliseconds, where 1000 units represent 1 second. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.RND(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a random number between 0 and the range provided. The integer range will be the highest number you want returned. 
</summary>
            <param name="lDbr" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Randomize(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
The dbRandomize command reseeds the random number generator. If the random number generator is not reseeded the dbRND command can return the same sequence of random numbers. To change the sequence of random number every time the program is run, place a dbRandomize statement with an integer number at the beginning of the program and change the value with each run. 
</summary>
            <param name="lDbiSeed" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawSpritesLast">
            <summary>
This command change the order in which sprites are drawn to the screen. By calling this command, all sprites will be drawn to the screen 'after' any 3D is drawn. This will cause the sprites to appear over the top of any 3D being rendered. This is the default behaviour. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawSpritesFirst">
            <summary>
This command changes the order in which sprites are drawn to the screen. By calling this command, all sprites will be drawn to the screen 'before' any 3D is drawn. This will cause the sprites to appear to be behind 3D objects, and most likely obscured by them. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawToFront">
            <summary>
This command will ensure all 2D activities such as drawing text, images and bitmaps are performed after the 3D has rendered, allowing you to overlap the screen with 2D content. This is the default behaviour. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.DrawToBack">
            <summary>
This command will ensure all 2D activities such as drawing text, images and bitmaps are performed before any 3D is rendered. This allows you to create 2D effects in the background. In most cases 3D will obscure most if not all 2D activities and so this is not the default behaviour. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SuspendForMouse">
            <summary>
This command will pause the program from running until a mouse button is pressed. To detect for a specific mouse button, please refer to the dbMouseClick command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SuspendForKey">
            <summary>
This command will pause the program from running until a key is pressed. To detect for a specific key, please refer to the dbInKey$ or dbScanCode commands found in the Input Command Set. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.WaitKey">
            <summary>
This command will pause the program from running until a key is pressed. To detect for a specific key, please refer to the dbInKey$ or dbScanCode commands found in the Input Command Set. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.WaitMouse">
            <summary>
This command will pause the program from running until a mouse button is pressed. To detect for a specific mouse button, please refer to the dbMouseClick command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Sleep(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will pause the program for the specified duration. The iSleep parameter is specified in milliseconds, where 1000 units represent 1 second. 
</summary>
            <param name="lDbiDelay" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Wait(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will pause the program for the specified duration. The iWait parameter is specified in milliseconds, where 1000 units represent 1 second. 
</summary>
            <param name="lDbiDelay" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Input(System.Char**)">
            <summary>
This command will accept input data from the keyboard and store the entry in the specified variable. The string that heads the input command is optional, and allows the user to provide an on-screen prompt for the data. The data is output to the screen as it is entered. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Print(System.Char*)">
            <summary>
This command will print text, numbers, variables and strings to the screen. You can position where the text will print using the dbSetCursor command. You can separate items you wish to print on the same line by using either a semi-colon or a comma. If you add a semi-colon at the end of your print list, the next dbPrint command will add to the end of the last print line. 
</summary>
            <param name="strString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SetCursor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the cursor position used by the dbPrint command. You can use this command to place basic text anywhere on the screen. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.CLS">
            <summary>
This command will clear the screen using the specified color value. Color values range from 0 to over 16 million, that represent every combination of red, green and blue to make up the final Color. You can use the dbRGB command to make the generation of the Color value straightforward. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.FastSync">
            <summary>
This command will perform a regular dbSync command, and will skip processing a mandatory check for windows messages. You can use this command to squeeze a few extra clock cycles out of your main loop and make your applications faster. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncRate(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command is used to change the default refresh rate dbSyncOn uses to control the speed of the dbSync update speed. The default rate sustains the 'Frames Per Second' at no more than 40fps. You can specify an integer value from 1 to 1000 to set a new maximum rate. A rate of zero will allow the program to refresh as fast as the system will allow. A forced sync rate cannot produce an accurate rating as in order to keep the refresh smooth, the code can only work with milliseconds which is not an accurate method of timing. The system is designed to treat smoothness more important than frame rating accuracy. 
</summary>
            <param name="lDbiRate" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.Sync">
            <summary>
This command is used to improve the performance of demanding programs that require a consistent frame rate. This is especially true of games. By default, sync is set to off which allows the system to automatically handle screen refreshing. When dbSyncOn is used, your program is responsible for handling screen refreshing. You can refresh the screen using the dbSync command. When you want the system to automatically handle screen refreshing again, you can use the dbSyncOff command. By placing the dbSync command at the end of your main program loop, all drawing and refresh tasks can occur in a single call. This dramatically increases the speed and smoothness of graphical operations, allowing your programs to run at their best. It is important to note the very first dbSync will only render the back buffer and reveal the contents of that buffer on the second dbSync command, as the system is based on a double buffered refresh. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncOff">
            <summary>
This command is used to improve the performance of demanding programs that require a consistent frame rate. This is especially true of games. By default, sync is set to off which allows the system to automatically handle screen refreshing. When dbSyncOn is used, your program is responsible for handling screen refreshing. You can refresh the screen using the dbSync command. When you want the system to automatically handle screen refreshing again, you can use the dbSyncOff command. By placing the dbSync command at the end of your main program loop, all drawing and refresh tasks can occur in a single call. This dramatically increases the speed and smoothness of graphical operations, allowing your programs to run at their best. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.SyncOn">
            <summary>
This command is used to improve the performance of demanding programs that require a consistent frame rate. This is especially true of games. By default, sync is set to off which allows the system to automatically handle screen refreshing. When dbSyncOn is used, your program is responsible for handling screen refreshing. You can refresh the screen using the dbSync command. When you want the system to automatically handle screen refreshing again, you can use the dbSyncOff command. By placing the dbSync command at the end of your main program loop, all drawing and refresh tasks can occur in a single call. This dramatically increases the speed and smoothness of graphical operations, allowing your programs to run at their best. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkCore.GetGlobPtr(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command returns a pointer to the internal GlobStruct structure used by DarkGDK
</summary>
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkCore">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPFailure(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the ftp connection has failed to execute an ftp command. If a one was returned, you can use the dbGetFTPError command to determine the actual reason for the failure. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPStatus(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return zero if the ftp connection has failed. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPProgress(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a percentage value of the amount of the file being downloaded. When the download is complete, this command will return a value of minus one. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPFileSize(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the size of the current ftp file being pointed at. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPFileType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the ftp filetype pointed to by the commands dbFindFirst and dbFindNext. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPFileName(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPDir(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.GetFTPError(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPProceed">
            <summary>
This command will allow you to grab another chunk of the downloading file started by dbFTPGetFile. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPTerminate">
            <summary>
This command will allow you to terminate a current download started by dbFTPGetFile. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPFindNext">
            <summary>
This command will allow you to find the next ftp file in the current ftp directory. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPFindFirst">
            <summary>
This command will allow you to find the first ftp file in the current ftp directory. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPDeleteFile(System.Char*)">
            <summary>
This command will allow you to delete an ftp file from the current ftp directory. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPGetFileB(System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will allow you to use dbFTPProceed to grab. The GrabInBits Flag allows you to specify the amount in bytes to be grabbed each time dbFTPProceed is called, thus controlling the rate and responsiveness of your application during download. 
</summary>
            <param name="sString" />
            <param name="sString2" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPGetFile(System.Char*,System.Char*)">
            <summary>
This command will allow you to use dbFTPProceed to grab. The GrabInBits Flag allows you to specify the amount in bytes to be grabbed each time dbFTPProceed is called, thus controlling the rate and responsiveness of your application during download. 
</summary>
            <param name="sString" />
            <param name="sString2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPPutFile(System.Char*)">
            <summary>
This command will allow you to copy a local file into the current ftp directory. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPSetDir(System.Char*)">
            <summary>
This command will allow you to go to an FTP directory. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPDisconnectB(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will allow you to disconnect from an ftp site previously connected to using the dbFTPConnect command. You can optionally specify an integer parameter to disconnect the dial-up connection if dial-up access was used. 
</summary>
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPDisconnect">
            <summary>
This command will allow you to disconnect from an ftp site previously connected to using the dbFTPConnect command. You can optionally specify an integer parameter to disconnect the dial-up connection if dial-up access was used. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPConnectB(System.Char*,System.Char*,System.Char*)">
            <summary>
This command will allow you to connect to FTP sites. 
</summary>
            <param name="sString" />
            <param name="sString2" />
            <param name="sString3" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFTP.FTPConnect(System.Char*,System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will allow you to connect to FTP sites. 
</summary>
            <param name="sString" />
            <param name="sString2" />
            <param name="sString3" />
            <param name="lUseWindow" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkFTP">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkDisplay.DesktopHeight(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
Returns the Desktop Height
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.DesktopWidth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
Returns the Desktop Width
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetHWND(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This function returns the main DarkGDK window handle.  This handle usually referred
to as the HWND and can be used for various native windows tasks such as subclassing
and Windows messaging.
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.MinimizeWindow">
            <summary>
This command will minimise the window to a desktop iconized bar. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.MaximizeWindow">
            <summary>
This command will maximise the window to the entire desktop screen. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.Render">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.End">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.Begin">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetRenderState(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lState" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetSpecularMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetCullMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetLightMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetShadeMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDitherMode(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayDevice(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetNumberOfDisplayDevices(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetDisplayMode(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary />
            <param name="lID" />
            <param name="sMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetNumberOfDisplayModes(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetWindowedMode(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetGamma(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="ulR" />
            <param name="ulG" />
            <param name="ulB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.Clear(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.RestoreLostDevice">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.RestoreDisplayMode">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayModeExE(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <param name="lMode" />
            <param name="lVertexProcessing" />
            <param name="lLockable" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayModeExD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <param name="lMode" />
            <param name="lVertexProcessing" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayModeExC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayModeExB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayModeEx(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lWidth" />
            <param name="lHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayDebugMode(System.Int16*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetDirect3DDevice(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetDirect3D(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetBackbufferPitch(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the pitch of the backbuffer. The pitch is similar to the width of the backbuffer, and may be larger should the backbuffer use a cache at the end of each horizontal line. You can only use this command when you have used the dbLockBackBuffer command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetBackbufferDepth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the depth of the backbuffer. You can only use this command when you have used the dbLockBackBuffer command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetBackbufferHeight(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the height of the backbuffer. You can only use this command when you have used the dbLockBackBuffer command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetBackbufferWidth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the width of the backbuffer. You can only use this command when you have used the dbLockBackBuffer command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.GetBackbufferPtr(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the actual pointer to the backbuffer. You can only use this command when you have used the dbLockBackBuffer command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.UnlockBackbuffer">
            <summary>
This command unlocks the backbuffer and frees the system to continue as normal. The backbuffer is the actual screen you see each refresh. Locking the backbuffer prevents other activities to be performed regarding the backbuffer so it is essential you unlock the backbuffer when you have finished. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.LockBackbuffer">
            <summary>
This command locks the backbuffer and stores the backbuffer details for direct access. The backbuffer is the actual screen you see each refresh and this command allows you to use the pointer and other essential data for screen modification. Locking the backbuffer prevents other activities to be performed to the backbuffer, so it is essential you unlock the backbuffer when you have finished. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.WindowToBackB(System.Char*)">
            <summary />
            <param name="sTitleString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.WindowToFrontB(System.Char*)">
            <summary />
            <param name="sTitleString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.WindowToFront">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.WindowToBack">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.WindowExist(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sTitleString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowTitle(System.Char*)">
            <summary>
This command will change the title of the window. 
</summary>
            <param name="sTitleString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.RestoreWindow">
            <summary>
This command will restore the window to the original size and position. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.MaximiseWindow">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.MinimiseWindow">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ShowWindow">
            <summary>
This command will show the window. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.HideWindow">
            <summary>
This command will hide the window but keep the application active. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowSize(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the windows size. 
</summary>
            <param name="lSizex" />
            <param name="lSizey" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the window's position. 
</summary>
            <param name="lPosx" />
            <param name="lPosy" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowLayout(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set basic window properties. If the Style Flag is set to one the window is created with titlebar, minimise and close icons and an icon. If the Caption Flag is set to zero, the titlebar is removed from the window. If the Icon Number is zero, the icon reverts to the standard Windows application icon. 
</summary>
            <param name="lStyle" />
            <param name="lCaption" />
            <param name="lIcon" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowOff">
            <summary>
This command will deactivate Windows Mode. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetWindowOn">
            <summary>
This command will activate Windows Mode. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetGraphicsCard(System.Char*)">
            <summary>
This command will set the current display card as described by the name provided. The display card name can be found by performing a dbPeformCheckListForGraphicsCards. 
</summary>
            <param name="sCardname" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetEmulationOff">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetEmulationOn">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetDisplayMode(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the screen display mode if it is available on the current graphics card. This command will not cause your program to fail on machines that do not support the resolution. It is recommended, however, that you check the availability of the display mode before using this command. You can use the dbCheckDisplayMode command to see whether the display mode is supported. 
</summary>
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.SetGamma(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the screens red, green and blue gamma levels. You can change the gamma to fade in and out the contents of the screen or alter the ratio of colours displayed. The red, green and blue component values can range from 0 to 511, with 255 being the default values. Reducing these values fades each colour component out of the screen, and above the default value enhances the ratio of the component colour. Some graphics cards do not support gamma alteration. 
</summary>
            <param name="lR" />
            <param name="lG" />
            <param name="lB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenInvalid(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the application has been switched out and back in. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenFPS(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the current frames per second to measure how many times the screen is refreshed each second. The value returned is measured in units of 1/1000th of a second. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenDepth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the current screen depth. The depth value indicates the number of bits used to make up a color for the screen and therefore reveal how many colors in total can be used by the screen. A value of 16 indicates it is a 16-bit screen and uses 32000 colors, whereas a 32-bit screen uses 16 million colors. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenHeight(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the current screen height. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenWidth(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the current screen width. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.ScreenType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of the current screen type. A returned value of 0 indicates the screen is not hardware accelerated. A returned value of 1 indicates the screen is hardware accelerated. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.PerformChecklistForGraphicsCards">
            <summary>
This command will make a checklist of all installed display cards. Some system have more than one 3D accelerator installed and often provide different feature sets and levels of performance. Use the Checklist commands in the System command set to access the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.PerformChecklistForDisplayModes">
            <summary>
This command will scan your system and make a checklist of all display modes your video card can handle. Use the Checklist commands in the System command set to access the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.EmulationMode(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.CurrentGraphicsCard(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.CheckDisplayMode(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will check that the display mode you have specified is available on the current system. 
</summary>
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkDisplay.OverrideHWND(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="hWnd" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkDisplay">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.UnlockPixels">
            <summary>
This command will unlock the current bitmap after faster reading and writing of visual data. Rather than use dbDot and dbPoint to manipulate pixel data, use the dbLockPixels command to perform modification of visual data much faster. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.CopyArea(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lDestX" />
            <param name="lDestY" />
            <param name="lWidth" />
            <param name="lHeight" />
            <param name="lSourceX" />
            <param name="lSourceY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.GetPixelsPitch(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command in combination with dbLockPixels will return the pitch in bytes of the visual surface you have locked. A pitch is the number of bytes you must skip to get to the next physical line of pixels in a visual surface. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.GetPixelsPointer(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command in combination with dbLockPixels will return the pointer to the first pixel in the visual surface. You can use the indirect symbol to write and read using the value of this pointer. The indirect symbol is specified by placing a * character before the variable holding the pointer. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.LockPixels">
            <summary>
This command will lock the current bitmap for faster reading and writing of visual data. Rather than use dbDot and dbPoint to manipulate pixel data, use this command in combination with dbGetPixelsPointer to write directly to the memory storing the visual data. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.BoxB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will draw a filled box on screen in the current ink color. The command requires the top left and bottom right coordinates of the box. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lLeft" />
            <param name="lTop" />
            <param name="lRight" />
            <param name="lBottom" />
            <param name="clrColor1" />
            <param name="clrColor2" />
            <param name="clrColor3" />
            <param name="clrColor4" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.DotB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will put a pixel on the screen in the current ink color. The command requires the Coordinates to place the pixel on the screen. The parameters should be specified using integer values. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="clrRBG" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Point(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the pixel color value from the screen at the specified Coordinates. The parameters should be specified using integer values. You can also read from bitmaps by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.RgbB(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will extract the blue component value from the specified RGB value. You can generate an RGB value from color components using the RGB command. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.RgbG(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will extract the green component value from the specified RGB value. You can generate an RGB value from color components using the RGB command. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.RgbR(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will extract the red component value from the specified RGB value. You can generate an RGB value from color components using the RGB command. 
</summary>
            <param name="clrRGB" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Rgb(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the final color value of a combination of red, green and blue intensities. For each of the Red, Green and Blue components you must enter a value between 0 and 255. All zero will return a color value that represents black. All 255 will return a color value that represents white. By setting the Red component to 255 and the rest to zero, the command will return a color value that represents red. 
</summary>
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Elipse(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lX" />
            <param name="lY" />
            <param name="lXRadius" />
            <param name="lYRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Circle(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will draw a circle on screen using the current ink color. The command requires the radius and the Coordinates that will represent the center of the circle to be drawn. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <param name="lRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Line(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will put a line on the screen in the current ink color. The command requires two sets of Coordinates to draw a line from one to the other on the screen. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lXa" />
            <param name="lYa" />
            <param name="lXb" />
            <param name="lYb" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Box(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will draw a filled box on screen in the current ink color. The command requires the top left and bottom right coordinates of the box. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lLeft" />
            <param name="lTop" />
            <param name="lRight" />
            <param name="lBottom" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Dot(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will put a pixel on the screen in the current ink color. The command requires the Coordinates to place the pixel on the screen. The parameters should be specified using integer values. You can also draw to a bitmap, by using the dbSetCurrentBitmap command. 
</summary>
            <param name="lX" />
            <param name="lY" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.Ink(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the current ink color using the specified color value. color values range from 0 to over 16 million, that represent every combination of red, green and blue to make up the final color. You can use the RGB command to make the generation of the color value straight forward. 
</summary>
            <param name="clrForeColor" />
            <param name="clrBackColor" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkBasic2D.CLS(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clear the screen using the specified color value. Color values range from 0 to over 16 million, that represent every combination of red, green and blue to make up the final Color. You can use the dbRGB command to make the generation of the Color value straightforward. 
</summary>
            <param name="clrBackColor" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkBasic2D">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a long word of data to the file from an integer value. This is the standard command for writing data where the datatype is not important. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.CD(System.Char*)">
            <summary>
This command will set the current working directory to the specified path. The path can be absolute or relative. Absolute paths contain the entire path including the drive letter. A relative path assumes the program has a valid current working directory and continues the path from the current location. 
</summary>
            <param name="sPath" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ExecutableRunning(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="ulHIndiExecuteFileProcess" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.Windir(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.Appname(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FileEnd(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the file specified by the file number has no more data to read, otherwise zero is returned. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FileOpen(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the file specified by the file number is open, otherwise zero is returned. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.PathExist(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified path exists, otherwise zero is returned. You can use this command to check whether a directory exists. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FileSize(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the size of the specified file in bytes, otherwise zero is returned. The file must exist or the command will fail. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FileExist(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified file exists, otherwise zero is returned. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.GetFileCreation(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.GetFileDate(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.GetFileType(System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will get the type value of the file currently recorded by the file search commands dbFindFirst and dbFindNext. A type value of zero indicates it is a file. A type value of 1 indicates it is a directory. A type value of -1 indicates there are no more files in the current working directory. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.GetFileName(System.Char**)">
            <summary>
This command will get the filename of the file currently recorded by the file search commands dbFindFirst and dbFindNext.
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.GetDir(System.Char**)">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.MakeFileFromMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Create a file from a memblock, allowing you to directly create an arrangement of bytes in a memblock and create an exact file layout with no additional bytes written. 
</summary>
            <param name="lF" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Write the specified memblock to a file open for writing. You can store multiple memblocks within a currently open file, and is useful for creating your own file formats. To retrieve the memblock you must use the dbReadMemBlock command. You must specify the file and memblock numbers using integer values. 
</summary>
            <param name="lF" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.MakeMemblockFromFile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Create a memblock from the file specified. The memblock will be the same size as the currently open file, and contain the entire data of the file specified. You must specify the file and memblock numbers using integer values. 
</summary>
            <param name="lMbi" />
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadMemblock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Create a memblock from the currently open file. The file must contain a memblock created with the dbWriteMemBlock command, at the exact position within the file. You must specify the file and memblock numbers using integer values. 
</summary>
            <param name="lF" />
            <param name="lMbi" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteDirBlock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will write an entire directory to a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
</summary>
            <param name="lF" />
            <param name="sFolder" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFileBlockEx(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lF" />
            <param name="sFilename" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFileBlock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will write a file to a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
</summary>
            <param name="lF" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteString(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will write the specified string to the file. The string will be terminated in the file with the standard carriage return ASCII characters (13)+(10). The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will write a float to the file from a real value. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteLong(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a long word of data to the file from an integer value. A long word represents four bytes. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteWord(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a word of data to the file from an integer value. A word represents two bytes. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteByte(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a byte of data to the file from an integer value. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadDirBlock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command extracts an entire directory from a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
</summary>
            <param name="lF" />
            <param name="sFolder" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.SkipBytes(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will skip the specified number of bytes in a current open file, opened using the dbOpenToRead command. You would use this command where you have fore-knowledge of the file contents. 
</summary>
            <param name="lF" />
            <param name="lSkipValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadFileBlock(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will extract an entire file from a pack (PAK) file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but have the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
</summary>
            <param name="lF" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadString(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char**)">
            <summary>
This command will read a string from the file and store it as a string in the variable specified. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will read a float from the file and store it in the variable specified. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadFile(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a long word of data from the file and store it as an integer value in the variable specified. This is the standard command for reading data where the datatype is not important. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadWord(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a word of data from the file and store it as an integer value in the variable specified. A word represents two bytes. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadByte(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a byte of data from the file and store it as an integer value in the variable specified. The file specified by the file number must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.CloseFile(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will close a file that has been previously opened using dbOpenToRead or dbOpenToWrite. The file must be open or the command will fail. 
</summary>
            <param name="lF" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.OpenToWrite(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will open a file, ready for writing. The file must not exist or the command will fail. You can open up to 32 files at the same time, using a file number range of 1 through to 32. 
</summary>
            <param name="lF" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.OpenToRead(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*)">
            <summary>
This command will open a file, ready for reading. The file must exist or the command will fail. You can open up to 32 files at the same time, using a file number range of 1 through to 32. 
</summary>
            <param name="lF" />
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadFilemapString(System.Char*,System.Char**)">
            <summary />
            <param name="sFilemapname" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadFilemapValue(System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="sFilemapname" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFilemapString(System.Char*,System.Char*)">
            <summary />
            <param name="sFilemapname" />
            <param name="sString" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteFilemapValue(System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilemapname" />
            <param name="ulValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.StopExecutable(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will terminate an application process based on the handle of the process that was returned from ExecuteExecutable
</summary>
            <param name="ulHIndiExecuteFileProcess" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ExecuteExecutableB(System.Char*,System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will initiate an application process and return you the handle of that process. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory.
The Priority value specifies a process priority which tells Windows how much processing time to allocate to the process.
The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
</summary>
            <param name="sFilename" />
            <param name="sFilename2" />
            <param name="sFilename3" />
            <param name="lPriority" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ExecuteExecutable(System.Char*,System.Char*,System.Char*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will initiate an application process and return you the handle of that process. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory.
The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
</summary>
            <param name="sFilename" />
            <param name="sFilename2" />
            <param name="sFilename3" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ExecuteFileB(System.Char*,System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will shell execute a file. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory. The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
</summary>
            <param name="sFilename" />
            <param name="sFilename2" />
            <param name="sFilename3" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ExecuteFile(System.Char*,System.Char*,System.Char*)">
            <summary>
This command will shell execute a file. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory. The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
</summary>
            <param name="sFilename" />
            <param name="sFilename2" />
            <param name="sFilename3" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.DeleteDirectoryB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete an existing directory. The directory must exist or the command will fail. The directory must be completely empty or this command will not succeed. 
</summary>
            <param name="sFolder" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.DeleteDirectory(System.Char*)">
            <summary>
This command will delete an existing directory. The directory must exist or the command will fail. The directory must be completely empty or this command will not succeed. 
</summary>
            <param name="sFolder" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.MakeDirectory(System.Char*)">
            <summary>
This command will create an empty directory. The directory name must not exist or the command will fail. 
</summary>
            <param name="sFolder" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.ReadByteFromFile(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will read a single byte from the specified file. The position is specified in bytes from the beginning of the filedata. You can use this to obtain byte perfect reading of any file. 
</summary>
            <param name="sFilename" />
            <param name="lPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.WriteByteToFile(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will write a single byte to the specified file. The position is specified in bytes from the beginning of the filedata. You can use this to modify a file at the byte level. 
</summary>
            <param name="sFilename" />
            <param name="lPos" />
            <param name="lByte" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.MoveFileW(System.Char*,System.Char*)">
            <summary>
This command will move an existing file to a new location. The destination filename must not exist or the command will fail. 
</summary>
            <param name="sMoveFrom" />
            <param name="sMoveTo" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.RenameFile(System.Char*,System.Char*)">
            <summary>
This command will rename an existing file to a new name. The new filename must not exist or the command will fail. 
</summary>
            <param name="sRenameFrom" />
            <param name="sRenameTo" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.CopyFileW(System.Char*,System.Char*)">
            <summary>
This command will copy an existing file to a new file. The destination filename must not exist or the command will fail. 
</summary>
            <param name="sFileFrom" />
            <param name="sFileTo" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.DeleteFileW(System.Char*)">
            <summary>
This command will delete an existing file. The file must exist or the command will fail. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.MakeFile(System.Char*)">
            <summary>
This command will create an empty file. The filename must not exist or the command will fail. 
</summary>
            <param name="sFilename" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FindNext">
            <summary>
This command will continue a file search by locating the next file in the current working directory. If this command succeeds, a file will be stored internally and its data can be extracted using the dbGetFileName$, dbGetFileDate$ and dbGetFileType commands. A file search can be started with the dbFindFirst command. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.FindFirst">
            <summary>
This command will begin a file search by locating the first file in the current working directory. If this command succeeds, a file will be stored internally and its data can be extracted using the dbGetFileName$, dbGetFileDate$ and dbGetFileType commands. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.PerformCheckListForDrives">
            <summary>
This command will output the available drives to a checklist. The command provides a convenient way to store the available drives without using additional data structures, but does tie up the checklist when in use. Use the Checklist commands in the System command set to access the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.PerformCheckListForFiles">
            <summary>
This command will output the contents of the current working directory to a checklist. The command provides a convenient way to store the contents of a directory without using additional data structures, but does tie up the checklist when in use. Use the Checklist commands in the System command set to access the checklist. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.DriveList">
            <summary>
This command will output the available drives to the screen. The command serves little use for effective drive scanning, but provides a simple way to view available drives. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.Dir">
            <summary>
This command will output the entire contents of the current working directory to the screen. The command serves little use for effective file scanning, but provides a simple way to view files. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkFile.SetDir(System.Char*)">
            <summary>
This command will set the current working directory to the specified path. The path can be absolute or relative. Absolute paths contain the entire path including the drive letter. A relative path assumes the program has a valid current working directory and continues the path from the current location. 
</summary>
            <param name="sString" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkFile">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkParticles.PositionParticleEmissions(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will adjust the emissions position of a particles object. By moving the emissions position of the particles object, you can create very effective visual trails. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleEmissions(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the number of particles emitted from the particles object each cycle. A value of zero will stop the particles object emitting new particles. 
</summary>
            <param name="lID" />
            <param name="lNumber" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ParticlesPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Z position of the particles object in 3D world space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ParticlesPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the Y position of the particles object in 3D world space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ParticlesPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the X position of the particles object in 3D world space. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ParticlesExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary>
This command will return a value of one if the particles object exists, otherwise zero. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetVector3ToParticlesRotation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z angles from the specified particles rotation. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.RotateParticlesB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will rotate a particles object. Rotating the particles object will rotate every particle currently existing as part of the particles object. To correct the behaviour of the individual particles themselves, refer to the other particles object commands. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetVector3ToParticlesPosition(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the vector3 data using the X, Y and Z coordinates from the specified particles position. 
</summary>
            <param name="lVector" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.PositionParticlesB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will position a particles object in 3D world space. By moving a particles object you will be moving at the same time every particle that belongs to the particles object. To create the effect of trails, see dbPositionParticleEmissions command. 
</summary>
            <param name="lID" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.MakeFireParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command will create a particles object and set it to act like fire particles. The area specified by the position and size is identical to that of a box created with the same dimensions. 
</summary>
            <param name="lID" />
            <param name="lImageIndex" />
            <param name="lMaxParticles" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.MakeSnowParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
This command will create a particles object and set it to act like a snow drift. The area specified by the position and size is identical to that of a box created with the same dimensions. 
</summary>
            <param name="lID" />
            <param name="lImageIndex" />
            <param name="lMaxParticles" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <param name="fWidth" />
            <param name="fHeight" />
            <param name="fDepth" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ShowParticles(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will show a particles object, and will instantly show every particle which is deemed part of the particles object previously hidden with the dbHideParticles command. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.HideParticles(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will hide a particles object, and will instantly hide every particle which is deemed part of the particles object. To emit no new particles and leave the rest to descend, either reduce the number of emissions or reposition the particles object offscreen. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.GhostParticlesOnB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will ghost a particles object. Ghosted particles will appear transparent when rendered, creating effects such as see-through smoke and fire. The Ghost Mode with a range of 0 to 5 specify the type of ghosting to perform. 
</summary>
            <param name="lID" />
            <param name="lMode" />
            <param name="fPercentage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.GhostParticlesOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will deactivate ghosting of a particles object. Ghosted particles will appear transparent when rendered, creating effects such as see-through smoke and fire. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.GhostParticlesOn(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will ghost a particles object. Ghosted particles will appear transparent when rendered, creating effects such as see-through smoke and fire. The Ghost Mode with a range of 0 to 5 specify the type of ghosting to perform. 
</summary>
            <param name="lID" />
            <param name="lMode" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleFloor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set whether the particle within the particles object will hit a predetermined floor at zero Y in 3D world space. The default is a flag value of one. A value of zero will remove the invisible floor allowing particles to continue to exist until they eventually fade. 
</summary>
            <param name="lID" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleLife(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the life duration of particles within the particles object. This controls how long the particle will stay alive. The default value of 100 keeps the particle alive long enough to arc, hit the floor and spark. A value smaller than this will stop short this existence. 
</summary>
            <param name="lID" />
            <param name="lLifeValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleChaos(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the chaos behaviour of particles within the particles object. This controls the stability of the particles position in 3D world space. The default is zero. A value greater or less than zero will vibrate the particle by the magnitude of the chaos value. 
</summary>
            <param name="lID" />
            <param name="fChaos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleGravity(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the gravity of particles within the particles object. This controls the actual course of the particle. A negative gravity value will actually pull the particle upwards at a rotation of 0,0,0. A high positive gravity value will make the particle very heavy. The default is a gravity value of 5. 
</summary>
            <param name="lID" />
            <param name="fGravity" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.RotateParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will rotate a particles object. Rotating the particles object will rotate every particle currently existing as part of the particles object. To correct the behaviour of the individual particles themselves, refer to the other particles object commands. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.ColorParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the color of new particles emitted from a particles object. By using a generally white image, the color you specify will show up the best from the particles. An image that is not white will produce a blending of colour between the image and the specified color. 
</summary>
            <param name="lID" />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.PositionParticleEmmissions(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.PositionParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will position a particles object in 3D world space. By moving a particles object you will be moving at the same time every particle that belongs to the particles object. To create the effect of trails, see dbPositionParticleEmissions command. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleVelocity(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the velocity of particles within the particles object. This controls the velocity at which the particles will move once emitted, and reflect the amount of energy expelled from the particles object. 
</summary>
            <param name="lID" />
            <param name="fVelocity" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleEmmissions(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lNumber" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetParticleSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the number of seconds that are to pass each frame within the particles object. This controls whether the particles move very quickly, or very slowly. The default seconds per frame value is 0.005. 
</summary>
            <param name="lID" />
            <param name="fTime" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.DeleteParticles(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete a particles object from memory. If you simply wish to hide an object, it is suggested you reposition or hide the particles object as recreating particle objects from scratch has a performance hit. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.MakeParticles(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will create a particles object using a specified image and radius. A particles object will emit single particles given a default set of rules than can be changed using the particle commands. 
</summary>
            <param name="lID" />
            <param name="lImageIndex" />
            <param name="lMaxParticles" />
            <param name="fRadius" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetTime(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fTime" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.SetColor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lRed" />
            <param name="lGreen" />
            <param name="lBlue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.Delete(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkParticles.Make(System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int16*)">
            <summary />
            <param name="lID" />
            <param name="ulFlush" />
            <param name="ulDiscard" />
            <param name="fRadius" />
            <param name="lImage" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkParticles">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkApp.InitDGDK(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Used to initialize the DarkGDK COM component
</summary>
            <param name="hProcess" />
            <param name="strDgdk" />
        </member>
        <member name="M:DGDK.CdgdkApp.#ctor">
            <summary>
 Default Constructor
 </summary>
        </member>
        <member name="T:DGDK.CdgdkApp">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCollisionThreshold(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary />
            <param name="lID" />
            <param name="fSensitivity" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.UpdateBSP">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.EndBSP">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.StartBSP">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.BSPCollisionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return an Z coordinate modifier value when the specified collision index is involved in a hit against solid BSP geometry during the rendering cycle. Use this command in combination with the BSP COLLISION HIT command to determine when the hit occurs. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.BSPCollisionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return an Y coordinate modifier value when the specified collision index is involved in a hit against solid BSP geometry during the rendering cycle. Use this command in combination with the BSP COLLISION HIT command to determine when the hit occurs. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.BSPCollisionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return an X coordinate modifier value when the specified collision index is involved in a hit against solid BSP geometry during the rendering cycle. Use this command in combination with the BSP COLLISION HIT command to determine when the hit occurs. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.BSPCollisionHit(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a value of one if the specified collision index hit solid BSP geometry during the last rendering cycle. Use this command in combination with the BSP COLLISION X, Y and Z to return sliding collision data from the collision event. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.ProcessBSPCollision(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will calculate the effect the BSP collision has on the respective camera or object. Normally the BSP collision effects are calculated and applied during the refresh, however with this command you can process the effect immediately. This can be useful when you wish to obtain the new position of a collided object or camera position for additional calculations such as associating a carried item to the location of a player or enemy character. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPMultiTexturingOff">
            <summary>
This command will switch off multitexturing within a BSP rendered world. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPMultiTexturingOn">
            <summary>
This command will switch on multitexturing within a BSP rendered world. This is the default behaviour. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCollisionHeightAdjustment(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set an offset used when positioning the collision sphere used during BSP collision. This can be useful for when the mass of your collision area of the object is off center from the mathematical center of your entity, or when you would like to move your camera off the floor of a BSP world to give your first person player some height. 
</summary>
            <param name="lID" />
            <param name="fHeight" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPObjectCollisionRadius(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set the BSP object collision radius used during collision detection. You can use this command in combination with the dbSetBSPCollisionHeightAdjustment to fine tune your collision entity within the BSP universe. 
</summary>
            <param name="lID" />
            <param name="lEntityID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCameraCollisionRadius(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will set the BSP camera collision radius used during collision detection. You can use this command in combination with the dbSetBSPCollisionHeightAdjustment to fine tune your collision entity within the BSP universe. 
</summary>
            <param name="lID" />
            <param name="lEntityID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCollisionOff(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will remove the collision system assigned to the BSP collision index previously assigned a collision type using the command dbSetBSPObjectCollision or dbSetBSPCameraCollision. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCollisionThreshhold(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
            <summary>
This command will set the sensitivity of the auto-adjustment effect of the automated collision activated by the dbSetBSPObjectCollision and dbSetBSPCameraCollision commands. The default is zero, which causes the collision to slowly affect the entity from even the smallest pull of negative Y movement. The effect is a slow slide down uneven surfaces. Increasing the sensitivity value will provide a range under which this sliding effect does not occur. 
</summary>
            <param name="lID" />
            <param name="fSensitivity" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPObjectCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the collision sphere of the specified object for the BSP world. This will automatically adjust the position of the object when it attempts to enter solid BSP geometry. The object will be repositioned to produce the smoothest collision response. If the Response value is set to one, the new position backtracks to the last collision free position when a hit occurs. It is worth noting that even commands that reposition the object are subject to the BSP collision once active. To avoid problems repositioning your objects, simply deactivate and reactivate the collision during positioning. 
</summary>
            <param name="lID" />
            <param name="lEntityID" />
            <param name="fRadius" />
            <param name="lResponse" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCameraCollision(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the collision sphere of the camera for the BSP world. This will automatically adjust the position of the camera when it attempts to enter solid BSP geometry. The camera will be repositioned to produce the smoothest collision response. If the Response value is set to one, the new position backtracks to the last collision free position when a hit occurs. It is worth noting that even commands that reposition the camera are subject to the BSP collision once active. To avoid problems repositioning the camera, simply deactivate and reactivate the collision during positioning. 
</summary>
            <param name="lID" />
            <param name="lEntityID" />
            <param name="fRadius" />
            <param name="lResponse" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.SetBSPCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the main camera for the BSP system. The BSP camera is used to calculate how to crop the BSP polygons to keep the performance level high. Binary Space Partitioning works by drawing only the polygons currently visible from the perspective of the specified camera. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.DeleteBSP">
            <summary>
This command will delete a BSP world from the 3D scene. All data loaded with the LOAD BSP command will be removed from the system allowing you to load a new BSP world. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkWorld.LoadBSP(System.Char*,System.Char*)">
            <summary>
This command will load a BSP world into the 3D scene. The BSP world automatically draws to the current camera and cannot be rotated or repositioned. Culling, texturing and collision are all handled automatically and through the related world commands. The first parameter allows you to specify a packed file containing the BSP world files, normally a PAK or PK3 file. If the BSP world is not being loaded from a packed file, this parameter should be an empty string. The second parameter is the BSP filename of the world you wish to load. This file can either be contained within the specified packed file, or exist as a standalone BSP file. If loading the BSP file as a standalone file, ensure the current directory contains any files used by the BSP world. 
</summary>
            <param name="sFilename" />
            <param name="sMap" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkWorld">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkAnimation.UpdateAllAnimation">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PreventTextureLock(System.Int16)">
            <summary />
            <param name="bDoNotLock" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.TotalDVDChapters(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the number of chapters contained in the specified title of the DVD volume. A value of zero means the title value does not contain any chapters and can be treated as a non existent title. 
</summary>
            <param name="lAnimindex" />
            <param name="lTitle" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the integer value representing the speed of the animation. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the integer value representing the volume of the animation. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.SetDVDChapter(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the chapter of a DVD and start it playing from the beginning. There can be between 1 and 99 titles per DVD volume, and between 1 and 999 chapters per title. 
</summary>
            <param name="lAnimindex" />
            <param name="lTitle" />
            <param name="lChapterNumber" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.SetAnimationSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the speed of the specified animation. A value of 100 is normal, where 50 is half speed and 200 is double the speed. You can specify any integer value for the speed. 
</summary>
            <param name="lAnimindex" />
            <param name="lSpeed" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.SetAnimationVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the volume of the specified animation. A value of 100 is normal, where 50 is half volume and 200 is double the volume. 
</summary>
            <param name="lAnimindex" />
            <param name="lVolume" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.LoadDVDAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a DVD movie if both a DVD driver exists on the system and a DVD CD is in a DVD Drive attached to the system. Once the DVD movie has been loaded, it can be played and controlled like any other animation. This command will fail silently. If a DVD does not exist to play, use the dbTotalDVDChapters command to find out. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.LoadAnimation(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command loads an animation file into the specified animation number. The animation file must be of the MPEG, AVI, Quicktime, WAV, AIFF, AU or SND format. You must specify an Animation Number between 1 and 32. Once you have loaded the animation file successfully, you can use the specified animation number to place, play and stop the animation. 
</summary>
            <param name="sFilename" />
            <param name="lIndex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationHeight(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current height of the specified animation. If you have resized the animation when playing or placing then the height of the modified animation will be returned. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationWidth(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current width of the specified animation. If you have resized the animation when playing or placing then the width of the modified animation will be returned. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the topmost position of the specified animation via its Y coordinate. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the leftmost position of the specified animation via its X coordinate. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationLooping(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified animation is looping, otherwise zero will be returned. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationPaused(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified animation is paused, otherwise zero is returned.. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationPlaying(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified animation is playing, otherwise zero is returned. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.AnimationExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return a one if the specified animation exists, otherwise zero is returned. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlaceAnimation(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command redefines the drawing area of a previously loaded animation. Using this command, animations can be stretched, shrunk or moved across the screen even while the animation is playing. 
</summary>
            <param name="lAnimindex" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.LoopAnimationToBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lAnimindex" />
            <param name="lBitmapindex" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlayAnimationToBitmap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lAnimindex" />
            <param name="lBitmapindex" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlayAnimationToImage(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play a specified animation to an image. An image will be created, using the animation as a source of animating texture and copy the animation to the specified region within the image. You can use this as a rapid method of streaming an animation to any polygon. 
</summary>
            <param name="lAnimindex" />
            <param name="lMageindex" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlayAnimationC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play an animation on the screen or to the current Bitmap. By default, animations are played to the screen. You must provide an Animation Number of a previously loaded animation file. You can optionally provide either one or two sets of X and Y Coordinates to place and resize the animation anywhere on the screen. 
</summary>
            <param name="lAnimindex" />
            <param name="lX1" />
            <param name="lY1" />
            <param name="lX2" />
            <param name="lY2" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlayAnimationB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play an animation on the screen or to the current Bitmap. By default, animations are played to the screen. You must provide an Animation Number of a previously loaded animation file. You can optionally provide either one or two sets of X and Y Coordinates to place and resize the animation anywhere on the screen. 
</summary>
            <param name="lAnimindex" />
            <param name="lX1" />
            <param name="lY1" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.LoopAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command plays the specified animation on the screen or to the current bitmap, and repeats the animation continuously. You must provide an Animation Number of a previously loaded animation file. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.ResumeAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command resumes the specified animation if it is currently paused. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PauseAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will pause the specified animation if it is playing. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.StopAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command stops the specified animation if it is playing. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.PlayAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play an animation on the screen or to the current Bitmap. By default, animations are played to the screen. You must provide an Animation Number of a previously loaded animation file. You can optionally provide either one or two sets of X and Y Coordinates to place and resize the animation anywhere on the screen. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkAnimation.DeleteAnimation(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command deletes an animation previously loaded into the specified Animation Number. Deleting animations when you have finished with them improves system performance. If the animation is not stopped before the animation is deleted, the current frame of the animation remains on the screen or bitmap. 
</summary>
            <param name="lAnimindex" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkAnimation">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerAngleZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerAngleY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerAngleX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetListenerPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetSoundPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetSoundPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.GetSoundPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerAngleZ(System.Single*)">
            <summary>
This command will return the current Z angle of the listeners direction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerAngleY(System.Single*)">
            <summary>
This command will return the current Y angle of the listeners direction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerAngleX(System.Single*)">
            <summary>
This command will return the current X angle of the listeners direction. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerPositionZ(System.Single*)">
            <summary>
This command will return the current Z position of the listener. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerPositionY(System.Single*)">
            <summary>
This command will return the current Y position of the listener. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ListenerPositionX(System.Single*)">
            <summary>
This command will return the current X position of the listener. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPositionZ(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the current Z position of the 3D sound specified by Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPositionY(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the current Y position of the 3D sound specified by Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPositionX(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*)">
            <summary>
This command will return the current X position of the 3D sound specified by Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current percentage volume of the specified Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current frequency of the specified Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPan(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return the current pan value of the specified Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPaused(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified Sound Number is paused, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundLooping(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified Sound Number is looping, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundPlaying(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified Sound Number is playing, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundType(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified Sound Number is a special 3D sound, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SoundExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary>
This command will return an integer value of one if the specified Sound Number exists, otherwise zero will be returned. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SetEAX(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lEffect" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ScaleListener(System.Single)">
            <summary>
This command will scale the listener in 3D space. The 3D sounds you hear are calculated based on the scale as well as the position of the sound and the listener. A value of 1 is the default setting, and a value of 0.5 will make the listener half as sensitive. 
</summary>
            <param name="fScale" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.RotateListener(System.Single,System.Single,System.Single)">
            <summary>
This command will set the direction of the listener. The 3D sounds being played would sound different based on which direction the listener was facing. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.PositionListener(System.Single,System.Single,System.Single)">
            <summary>
This command will position the listener in 3D space. The 3D sounds you hear are calculated based on the position of the sound and the listener. 
</summary>
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.PositionSound(System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary>
This command will position the specified 3D sound in 3D space. The 3D sounds you hear are calculated based on the position of the sound and the listener. 
</summary>
            <param name="lID" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.Load3DSound(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a WAV sound file into the specified Sound Number as a special 3D sound. The specified WAV sound file must by Mono or the load will fail. 3D sounds can be placed in 3D space and heard through the virtual ears of a listener. The listener can also be placed anywhere in 3D space creating true surround sound capabilities. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SaveSound(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will save a sound to a file previously captured using the dbRecordSound command. You cannot save a sound file that originated from any other source. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.StopRecordingSound">
            <summary>
This command will stop recording a sound previously started using dbRecordSound. 
</summary>
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.RecordSoundB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will start recording a sound from the microphone. You can optionally specify an additional integer parameter to record a sound for any amount of seconds. The default if this parameter is not specified is five seconds of recording. You must specify an empty sound number using an integer value. 
</summary>
            <param name="lID" />
            <param name="lCaptureDuration" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.RecordSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will start recording a sound from the microphone. You can optionally specify an additional integer parameter to record a sound for any amount of seconds. The default if this parameter is not specified is five seconds of recording. You must specify an empty sound number using an integer value. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SetSoundVolume(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the percentage volume used by the specified Sound Number. The volume value should use an integer value. 
</summary>
            <param name="lID" />
            <param name="lVolume" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SetSoundSpeed(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the frequency used by the specified Sound Number. Decibel frequency ranges from 100 to 100,000 and must be specified using an integer value. 
</summary>
            <param name="lID" />
            <param name="lFrequency" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.SetSoundPan(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will set the pan of standard sounds by locating it between the left and right speakers. A negative value will move the sound to the left speaker, a positive value will move it to the right. Sound panning does not work with 3D sounds. The pan value must be an integer value between -10,000 and 10,000. 
</summary>
            <param name="lID" />
            <param name="lPan" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.PauseSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will pause the specified Sound Number whilst it is playing. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.ResumeSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will resume the specified Sound Number after it has been paused. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.StopSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will stop the specified Sound Number if it is playing. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoopSoundD(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the specified Sound Number continuously. Optional parameters allow you to specify a start position, end position and initial position in bytes that a looping sound will use as it plays. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <param name="lEnd" />
            <param name="lInitialPos" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoopSoundC(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the specified Sound Number continuously. Optional parameters allow you to specify a start position, end position and initial position in bytes that a looping sound will use as it plays. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <param name="lEnd" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoopSoundB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the specified Sound Number continuously. Optional parameters allow you to specify a start position, end position and initial position in bytes that a looping sound will use as it plays. 
</summary>
            <param name="lID" />
            <param name="lStart" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoopSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play and loop the specified Sound Number continuously. Optional parameters allow you to specify a start position, end position and initial position in bytes that a looping sound will use as it plays. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.PlaySoundB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play the specified Sound Number. An optional parameter allows you to specify a start position in bytes that skips the initial part of the sample to be played. 
</summary>
            <param name="lID" />
            <param name="lOffset" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.PlaySoundW(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will play the specified Sound Number. An optional parameter allows you to specify a start position in bytes that skips the initial part of the sample to be played. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.DeleteSound(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will delete the specified sound previously loaded into Sound Number. 
</summary>
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.CloneSound(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will clone a sound into the specified Destination Sound Number. Cloning a sound will create a new sound that can be played like any other loaded sound, but uses the same WAV data of the original sound. The advantage of sound cloning is that one hundred sounds could be used with only a single instance of the sound data stored in memory. 
</summary>
            <param name="lDestination" />
            <param name="lSource" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoadSoundB(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a WAV sound file into the specified Sound Number. The Sound Number must be an integer value. To load other sound formats, use dbLoadMusic or in extreme cases dbLoadAnimation. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <param name="lFlag" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkSound.LoadSound(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
This command will load a WAV sound file into the specified Sound Number. The Sound Number must be an integer value. To load other sound formats, use dbLoadMusic or in extreme cases dbLoadAnimation. 
</summary>
            <param name="sFilename" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkSound">
            <summary />
        </member>
        <member name="M:DGDK.CdgdkShaders.SyncCamera(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lCamera" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.RemoveCameraEffect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lCamera" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.SetCameraEffect(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lCamera" />
            <param name="lEffect" />
            <param name="lMage" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.SetCameraEffectConstantVector(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lEffectID" />
            <param name="sVarName" />
            <param name="lVector" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.SetCameraEffectConstantInt(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lEffectID" />
            <param name="sVarName" />
            <param name="lValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.SetCameraEffectConstantFloat(System.Int32!System.Runtime.CompilerServices.IsLong,System.Char*,System.Single)">
            <summary />
            <param name="lEffectID" />
            <param name="sVarName" />
            <param name="fValue" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.CameraEffectExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.DeleteCameraEffect(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lEffectID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.LoadCameraEffect(System.Char*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="sFilename" />
            <param name="lEffectID" />
            <param name="lLoadTex" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.DynamicCubeMapExist(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.ApplyCubeMapToObjectB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjID" />
            <param name="lStage" />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.ApplyCubeMapToObject(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lObjID" />
            <param name="lStage" />
            <param name="lID" />
            <param name="lShader" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.RenderDynamicCubeMap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single)">
            <summary />
            <param name="lID" />
            <param name="lCamera" />
            <param name="fX" />
            <param name="fY" />
            <param name="fZ" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.DeleteDynamicCubeMap(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.MakeDynamicCubeMapB(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lSize" />
            <param name="lMipmapped" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.MakeDynamicCubeMap(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary />
            <param name="lID" />
            <param name="lSize" />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.ReloadShaderDisplayPointer">
            <summary />
            <remarks />
        </member>
        <member name="M:DGDK.CdgdkShaders.ShaderDataStart">
            <summary />
            <remarks />
        </member>
        <member name="T:DGDK.CdgdkShaders">
            <summary />
        </member>
        <member name="T:CryptoPP.SHA1">
            <a href="http://www.weidai.com/scan-mirror/md.html#SHA-1">SHA-1</a>
        </member>
        <member name="T:CryptoPP.Rijndael">
            <a href="http://www.weidai.com/scan-mirror/cs.html#Rijndael">Rijndael</a>
        </member>
        <member name="T:CryptoPP.MaurerRandomnessTest">
This class implements Maurer's Universal Statistical Test for Random Bit Generators
    it is intended for measuring the randomness of *PHYSICAL* RNGs.
    For more details see his paper in Journal of Cryptology, 1992. 
</member>
        <member name="T:CryptoPP.Filter">
provides an implementation of BufferedTransformation's attachment interface
</member>
        <member name="T:CryptoPP.ByteQueueNode">
The queue is implemented as a linked list of byte arrays, but you don't need to
    know about that.  So just ignore this next line. :) 
</member>
    </members>
</doc>