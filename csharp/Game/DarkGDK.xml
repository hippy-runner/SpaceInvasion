<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkGDK</name>
    </assembly>
    <members>
        <member name="T:DarkGDK.ctlDarkGDKViewport">
            <summary>
            DarkGDK viewport control for allowing you to show your 3D view on your WinForm
            </summary>
        </member>
        <member name="F:DarkGDK.ctlDarkGDKViewport._bIsUsed">
            <summary>
            Used by some classes to determine if certain engine
            initialisations have taken place (such as Terrain)
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.ResetSyncRate">
            <summary>
            Resets the SyncRate Property to the default (60)
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.ResetGraphicsMode">
            <summary>
            Resets the GraphicsMode Property to the default (800x600x32)
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.ResetFullScreen">
            <summary>
            Resets the FullScreen Property to the default (false)
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.ResetEmbedded">
            <summary>
            Resets the Embedded Property to the default (true)
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control Paint event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Control Background Paint event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.OnCreateControl">
            <summary>
            Control Created event
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.OnInitDarkGDK">
            <summary>
            
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.IsUsed">
            <summary>
            Returns true if the control has been initialized by the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.SetUsed">
            <summary>
            This forces the control be told that it's being used
            Purely for engine components that must be initialized only once, such as Terrain
            </summary>
        </member>
        <member name="F:DarkGDK.ctlDarkGDKViewport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DarkGDK.ctlDarkGDKViewport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:DarkGDK.ctlDarkGDKViewport.InitDarkGDK">
            <summary>
            This is the DarkGDK.NET Initialisation event
            </summary>
        </member>
        <member name="E:DarkGDK.ctlDarkGDKViewport.TerminateDarkGDK">
            <summary>
            This is the DarkGDK.NET Termination event
            </summary>
        </member>
        <member name="P:DarkGDK.ctlDarkGDKViewport.SyncRate">
            <summary>
            Sets or gets the initial Sync Rate of this viewport control
            </summary>
        </member>
        <member name="P:DarkGDK.ctlDarkGDKViewport.GraphicsMode">
            <summary>
            Sets or gets the current GraphicsMode for the Control
            </summary>
        </member>
        <member name="P:DarkGDK.ctlDarkGDKViewport.FullScreen">
            <summary>
            Sets or gets the current FullScreen flag for the Control
            </summary>
        </member>
        <member name="P:DarkGDK.ctlDarkGDKViewport.Embedded">
            <summary>
            Sets or gets the embedding window flag.  If true, the control will
            override the Winform container control and embed the DarkGDK window
            into the control.  If false, the normal DarkGDK window will be
            created and used for your application.
            </summary>
        </member>
        <member name="T:DarkGDK.ctlDarkGDKViewport.InitDarkGDKHandler">
            <summary>
            This is the DarkGDK.NET Initialisation delegate
            </summary>
            <param name="oSource"></param>
        </member>
        <member name="T:DarkGDK.ctlDarkGDKViewport.TerminateDarkGDKHandler">
            <summary>
            This is the DarkGDK.NET Termination delegate
            </summary>
            <param name="oSource"></param>
        </member>
        <member name="T:DarkGDK.Math.Vector4">
            <summary>
            Represents a Vector4 math object.
            </summary>
        </member>
        <member name="T:DarkGDK.Entity">
            <summary>
            Any entity in DGDK that is referenced by Id.
            </summary>
        </member>
        <member name="F:DarkGDK.Entity.id">
            <summary>
            Entity ID.
            </summary>
        </member>
        <member name="P:DarkGDK.Entity.Id">
            <summary>
            Gets or sets the Entity ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector4.#ctor">
            <summary>
            Creates a new Vector4 object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Delete">
            <summary>
            Deletes the Vector4 and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector4.CatmullRom(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,System.Single)">
            <summary>
            Performs a catmull rom interpolation on the specified vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="vectorD">A vector object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.CopyTo(DarkGDK.Math.Vector4)">
            <summary>
            Copies the contents of this vector to the specified vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.CopyFrom(DarkGDK.Math.Vector4)">
            <summary>
            Copies the contents of the specified vector to this vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Normalize(DarkGDK.Math.Vector4)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.BaryCentricCoordinates(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,System.Single,System.Single)">
            <summary>
            Produces the BaryCentricCoordinates vector. 
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="f">F value.</param>
            <param name="g">G value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Hermite(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,System.Int32,System.Single)">
            <summary>
            Performs a hermite spline interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="d">D value.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.LinearInterpolate(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4,System.Single)">
            <summary>
            Performs a hermite linear interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Maximize(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4)">
            <summary>
            Maximizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Minimize(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4)">
            <summary>
            Minimizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Scale(DarkGDK.Math.Vector4,System.Single)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="value">Scale value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
            <param name="w">W value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.TransformCoordinates(DarkGDK.Math.Vector4,DarkGDK.Math.Matrix4)">
            <summary>
            Transforms the vector coordinates.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="matrix">A matrix object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Equals(DarkGDK.Math.Vector4)">
            <summary>
            Checks if if this vector is identical to the one specified.
            </summary>
            <param name="vector">The vector to check with.</param>
            <returns>true if both are identical; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Add(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Divide(System.Single)">
            <summary>
            Divides the vector by the specified value,
            </summary>
            <param name="value">The value to divide the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Multiply(System.Single)">
            <summary>
            Multiplies the vector by the specified value,
            </summary>
            <param name="value">The value to multiply the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector4.Subtract(DarkGDK.Math.Vector4,DarkGDK.Math.Vector4)">
            <summary>
            Substracts the vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="P:DarkGDK.Math.Vector4.SquaredLength">
            <summary>
            Gets the squared length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector4.Length">
            <summary>
            Gets the length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector4.X">
            <summary>
            Gets the X coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector4.Y">
            <summary>
            Gets the Y coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector4.Z">
            <summary>
            Gets the Z coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector4.W">
            <summary>
            Gets the W coordinate of the vector.
            </summary>
        </member>
        <member name="T:DarkGDK.Math.Math">
            <summary>
            Contains general Math methods and properties.
            </summary>
        </member>
        <member name="F:DarkGDK.Math.Math.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Math.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="T:DarkGDK.Basic3D.Effect">
            <summary>
            Represents an Effect object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.Effect.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.#ctor(System.String,System.Boolean)">
            <summary>
            Loads a .FX file.
            </summary>
            <param name="fileName">
            An FX file that is compatible with the DX9 effect framework and that typically uses
            the extension '.fx'. 
            </param>
            <param name="useCurrentTextures">
            If set to true the effect will use the textures already mapped to the model; otherwise, 
            discards the current textures and loads the textures specified in the FX file. 
            Typically, effects rely on the specified model and textures in the FX file to function 
            properly. 
            </param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.#ctor(DarkGDK.ResourceAssembly,System.String,System.Boolean)">
            <summary>
            Loads an Effect from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>  
            <param name="useCurrentTextures">Should it use current model textures?</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.Delete">
            <summary>
            Deletes the effect and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.PerformChecklistForErrors">
            <summary>
            Creates a checklist an error report upon failure to load an FX file. The checklist
            strings will contain a single line of the report, for however large the report is.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.PerformChecklistForValues">
            <summary>
            Creates a checklist of all the effect constants used by the loaded FX file. 
            The checklist strings will contain the names of the constants, which can then be
            individually set with the SetConstant method. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetConstant(System.String,System.Boolean)">
            <summary>
            Sets the value of an FX effect constant. An FX effect constant is one of many internal
            variables of the effect which control the effect in real-time based on what the FX 
            does. Some constants are automatically provided to the FX system effect such as world 
            and camera positions, time and other critical data. Often, FX files will contain extra 
            constants to create a variety of results and these constants can be altered in 
            real-time by this method. Use the PerformChecklistForValues to get the names of all
            the constants you can alter. 
            </summary>
            <param name="constant">The constant name.</param>
            <param name="value">The value to apply.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetConstant(System.String,System.Int32)">
            <summary>
            Sets the value of an FX effect constant. An FX effect constant is one of many internal
            variables of the effect which control the effect in real-time based on what the FX 
            does. Some constants are automatically provided to the FX system effect such as world 
            and camera positions, time and other critical data. Often, FX files will contain extra 
            constants to create a variety of results and these constants can be altered in 
            real-time by this method. Use the PerformChecklistForValues to get the names of all
            the constants you can alter. 
            </summary>
            <param name="constant">The constant name.</param>
            <param name="value">The value to apply.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetConstant(System.String,System.Single)">
            <summary>
            Sets the value of an FX effect constant. An FX effect constant is one of many internal
            variables of the effect which control the effect in real-time based on what the FX 
            does. Some constants are automatically provided to the FX system effect such as world 
            and camera positions, time and other critical data. Often, FX files will contain extra 
            constants to create a variety of results and these constants can be altered in 
            real-time by this method. Use the PerformChecklistForValues to get the names of all
            the constants you can alter. 
            </summary>
            <param name="constant">The constant name.</param>
            <param name="value">The value to apply.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetConstant(System.String,DarkGDK.Math.Vector3)">
            <summary>
            Sets the value of an FX effect constant. An FX effect constant is one of many internal
            variables of the effect which control the effect in real-time based on what the FX 
            does. Some constants are automatically provided to the FX system effect such as world 
            and camera positions, time and other critical data. Often, FX files will contain extra 
            constants to create a variety of results and these constants can be altered in 
            real-time by this method. Use the PerformChecklistForValues to get the names of all
            the constants you can alter. 
            </summary>
            <param name="constant">The constant name.</param>
            <param name="value">The value to apply.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetConstant(System.String,DarkGDK.Math.Vector4)">
            <summary>
            Sets the value of an FX effect constant. An FX effect constant is one of many internal
            variables of the effect which control the effect in real-time based on what the FX 
            does. Some constants are automatically provided to the FX system effect such as world 
            and camera positions, time and other critical data. Often, FX files will contain extra 
            constants to create a variety of results and these constants can be altered in 
            real-time by this method. Use the PerformChecklistForValues to get the names of all
            the constants you can alter. 
            </summary>
            <param name="constant">The constant name.</param>
            <param name="value">The value to apply.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetTechnique(System.String)">
            <summary>
            Sets the technique of the specified FX effect. The technique is specified by name, 
            and the name can be found heading the technique within the FX file itself. An FX 
            effect can have multiple techniques within the file. 
            </summary>
            <param name="name">The name of the technique to be applied.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetTranspose(System.Boolean)">
            <summary>
            Sets the transpose method of the FX effect. Low and high level shaders perform 3D maths
            using the matrix data passed in by the application. Some of these shaders require that
            the matrix data is tranposed, where others require untransposed matrix data. Setting 
            the transpose flag to true will tranpose any matrix data passed to the shader.
            </summary>
            <param name="transpose">Set to true if it should transpose any matrix.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetToLimb(DarkGDK.Basic3D.Limb)">
            <summary>
            Applies a the loaded FX effect onto the specified limb of an object. You can use this
            method to apply an FX effect to a single part of a model. You can apply different 
            effects to different parts of the same model to create some stunning results. 
            </summary>
            <param name="limb">The limb to set the effect to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Effect.SetToObject(DarkGDK.Basic3D.Object3D)">
            <summary>
            Applies the loaded FX effecto onto the specified object.
            </summary>
            <param name="obj">The object to set the effect to.</param>
        </member>
        <member name="T:DarkGDK.Basic2D.Image">
            <summary>
            Represents an Image object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Image.idManager">
            <summary>
            Internal ID Manager
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Image.imageDictionary">
            <summary>
            Image dictionary
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.Int32)">
            <summary>
            Instantiate a new Image with an existing Image ID.
            </summary>
            <param name="id">An already existing Image ID.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.String)">
            <summary>
            Creates a new image from a file
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.String,System.Boolean)">
            <summary>
            Loads a picture file as an image. The picture file must be of the BMP, JPG, TGA, DDS, 
            DIB or PNG format. All images loaded are prepared with mipmaps if they do not already 
            have them. TGA, DDS and PNG will retain their alpha channel data when loaded, providing 
            the required transparency information when combined with transparency commands. 
            </summary>
            <param name="fileName">The picture file to be loaded.</param>
            <param name="treatAsTexture">
            If true, it will treat the image as a texture and load to fill a texture surface in 
            memory, else, it will preserve the image without adding mipmaps, scaling or filtering 
            and so retaining its pixel perfect quality. </param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new blank image using the specified width and height in Pixels.  Once the
            image has been created, it can be used like any other image that can be used for
            texturing, or camera rendering.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a selected area of the current bitmap. Amongst other things, you can use this 
            command to store sequences of image data and provide animations for sprites. When images
            are grabbed, they are stored in memory and do not require the bitmap from which the image 
            was taken. 
            </summary>
            <param name="x1">Leftmost position.</param>
            <param name="y1">Topmost position.</param>
            <param name="x2">Rightmost position.</param>
            <param name="y2">Bottommost position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,DarkGDK.Basic2D.TextureFlag)">
            <summary>
            Copies a selected area of the current bitmap. Amongst other things, you can use this 
            command to store sequences of image data and provide animations for sprites. When images
            are grabbed, they are stored in memory and do not require the bitmap from which the image 
            was taken. 
            </summary>
            <param name="x1">Leftmost position.</param>
            <param name="y1">Topmost position.</param>
            <param name="x2">Rightmost position.</param>
            <param name="y2">Bottommost position.</param>
            <param name="textureFlag">The texture flag to use.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.ImageByID(System.Int32)">
            <summary>
            Gets an already existing Image by Id. 
            </summary>
            <param name="id">The ID of an already existing Image.</param>
            <returns>
            Returns a Image object ia an Image with the specified ID exists; otherwise,
            returns null.
            </returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads an Image from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic2D.Image.#ctor(DarkGDK.ResourceAssembly,System.String,System.Boolean)">
            <summary>
            Loads an Image from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>   
            <param name="treatAsTexture"></param>     
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Delete">
            <summary>
            Deletes the image from memory and frees the ID. You must not delete images that are 
            being used by sprites, otherwise those sprites would disappear. Deleting unused images 
            increases system performance. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Save(System.String)">
            <summary>
            Saves the image to a file. The file must not already exist, otherwise the command will 
            fail. The image file format is determined by the extension given, and can be 
            'BMP', 'DDS', 'JPG' or 'DIB'.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Paste(System.Int32,System.Int32)">
            <summary>
            Pastes the specified image to the screen. Optionally, you can paste images to bitmaps 
            using the Bitmap.SetCurrent command. 
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Paste(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Pastes the specified image to the screen. Optionally, you can paste images to bitmaps 
            using the Bitmap.SetCurrent command. 
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
            <param name="transparent">If true, all colored pixels of RGB(0,0,0) are not drawn.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Rotate(System.Int32)">
            <summary>
            Rotates the image by the specified angle.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.Stretch(System.Int32,System.Int32)">
            <summary>
            Resizes the image.
            </summary>
            <param name="width">New image width.</param>
            <param name="height">New image height.</param>
        </member>
        <member name="F:DarkGDK.Basic2D.Image._fileName">
            <summary>
            Internal filename
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Image.SetColorKey(System.Drawing.Color)">
            <summary>
            Sets the general colorkey for all images. A colorkey allows you to specify a particular 
            RGB color that will be treated as transparent by the image when used. Transparent pixels 
            of an image are not drawn. You must use this command before loading or grabbing an image
            in order that a suitable alpha map be generated from the transparent pixels of the 
            desired image to be calculated. The alpha map is then used to decide which pixels are 
            drawn and which pixels are never rendered. 
            </summary>
            <param name="color">The color that should not be drawn.</param>
        </member>
        <member name="P:DarkGDK.Basic2D.Image.fileName">
            <summary>
            Returns the FileName from which the picture was loaded.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Image.Height">
            <summary>
            Returns the image height.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Image.Width">
            <summary>
            Returns the image width.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic2D.Drawing">
            <summary>
            Contains all Basic2D methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Box(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled box on screen in the current ink color. The command 
            requires the top left and bottom right coordinates of the box. You can also draw to 
            a bitmap, by using the Bitmap.SetCurrent command. 
            </summary>
            <param name="left">The leftmost position.</param>
            <param name="top">The topmost position.</param>
            <param name="right">The rightmost position.</param>
            <param name="bottom">The bottommost position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Box(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a filled box on screen in the current ink color. The command 
            requires the top left and bottom right coordinates of the box. You can also draw to 
            a bitmap, by using the Bitmap.SetCurrent command. 
            </summary>
            <param name="left">The leftmost position.</param>
            <param name="top">The topmost position.</param>
            <param name="right">The rightmost position.</param>
            <param name="bottom">The bottommost position.</param>
            <param name="color1">First color.</param>
            <param name="color2">Second color.</param>
            <param name="color3">Third color.</param>
            <param name="color4">Fourth color.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Circle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle on screen using the current ink color. The command requires the radius 
            and the Coordinates that will represent the center of the circle to be drawn. You can 
            also draw to a bitmap, by using the Bitmap.SetCurrent command.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="Radius">Circle radius.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.ClearBackground(System.Drawing.Color)">
            <summary>
            This command will clear the screen using the specified background ink color. 
            This command differs from the Core.ClearScreen command  
            which will paint the screen with the currently selected background color. 
            </summary>
            <param name="rgbBackColor">A System.Color</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Dot(System.Int32,System.Int32)">
            <summary>
            Puts a pixel on the screen in the current ink color. The command requires the Coordinates 
            to place the pixel on the screen. You can also draw to a bitmap, by using the 
            Bitmap.SetCurrent command. 
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Dot(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Puts a pixel on the screen in the current ink color. The command requires the Coordinates 
            to place the pixel on the screen. You can also draw to a bitmap, by using the 
            Bitmap.SetCurrent command. 
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="color">A System.Color</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse on screen using the current ink color. The command requires the X-Radius,
            Y-Radius and the Coordinates that will represent the center of the ellipse to be drawn. 
            You can also draw to a bitmap, by using the Bitmap.SetCurrent command. 
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="xRadius">X-Radius.</param>
            <param name="yRadius">Y-Radius.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Ink(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets the current ink color using the specified color values.
            </summary>
            <param name="rgbForeColor">Foreground color.</param>
            <param name="rgbBackColor">Background color.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Line(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Puts a line on the screen in the current ink color. The command requires two sets of 
            Coordinates to draw a line from one to the other on the screen. You can also draw to 
            a bitmap, by using the Bitmap.SetCurrent command.
            </summary>
            <param name="aX">X start position</param>
            <param name="aY">Y start position</param>
            <param name="bX">X end position</param>
            <param name="bY">Y end position</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.LockPixels">
            <summary>
            Locks the current bitmap for faster reading and writing of visual data. Rather than use 
            Basic2D.Dot and Basic2D.Point to manipulate pixel data, use this command in 
            combination with Basic2D.PixelsPointer to write directly to the memory storing 
            the visual data. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.UnlockPixels">
            <summary>
            Unlocks the current bitmap after faster reading and writing of visual data.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.Point(System.Int32,System.Int32)">
            <summary>
            Returns the pixel color value from the screen at the specified Coordinates. You can also 
            read from bitmaps by using the Bitmap.SetCurrent command. 
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>Pixel color value</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.GetNetCompliantColor(System.UInt32)">
            <summary>
            Gets a .NET compliant color from DGDK.NET uint color value.
            </summary>
            <param name="color">A uint color value, as used with DGDK.NET.</param>
            <returns>A .NET System.Color value.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Drawing.GetDGDKCompliantColor(System.Drawing.Color)">
            <summary>
            Gets a DGDK.NET compliant uint value from a System.Color value.
            </summary>
            <param name="color">A .NET System.Color value.</param>
            <returns>A uint color value.</returns>
        </member>
        <member name="P:DarkGDK.Basic2D.Drawing.PixelsPitch">
            <summary>
            In combination with Basic2D.LockPixels will return the pitch in bytes of the visual 
            surface you have locked. A pitch is the number of bytes you must skip to get to the next 
            physical line of pixels in a visual surface. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Drawing.PixelsPointer">
            <summary>
            In combination with Basic2D.LockPixels will return the pointer to the first pixel 
            in the visual surface. You can use the indirect symbol to write and read using the value
            of this pointer. The indirect symbol is specified by placing a * character before the 
            variable holding the pointer. 
            </summary>
        </member>
        <member name="T:DarkGDK.Lighting.AdditionalLight">
            <summary>
            Represents additional light objects.
            </summary>
        </member>
        <member name="T:DarkGDK.Lighting.LightBase">
            <summary>
            Base class that light classes should inherit from.
            </summary>
        </member>
        <member name="F:DarkGDK.Lighting.AdditionalLight.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.#ctor">
            <summary>
            Creates a new .
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Delete">
            <summary>
            Deletes the light and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Color(System.Drawing.Color)">
            <summary>
            Sets the color of the light.
            </summary>
            <param name="color">The color to set the  to.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Position(System.Single,System.Single,System.Single)">
            <summary>
            Positions the light.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Position(DarkGDK.Math.Vector3)">
            <summary>
            Positions the light.
            </summary>
            <param name="vector">A Vector3 representing the position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the light.
            </summary>
            <param name="x">X angle.</param>
            <param name="y">Y angle.</param>
            <param name="z">Z angle.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Rotate(DarkGDK.Math.Vector3)">
            <summary>
            Rotates the light.
            </summary>
            <param name="vector">A Vector3 representing the rotation.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.Point(System.Single,System.Single,System.Single)">
            <summary>
            Points the light to the specified position. Only spot lights and 
            directional lights can be pointed.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetToObjectPosition(DarkGDK.Basic3D.Object3D)">
            <summary>
            Positions the light to the specified object position
            </summary>
            <param name="obj">The object to get information from.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetToObjectOrientation(DarkGDK.Basic3D.Object3D)">
            <summary>
            Rotates the light to the specified object position
            </summary>
            <param name="obj">The object to get information from.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetVector3ToPosition(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the 's position.
            </summary>
            <param name="vector">The vector 3 that will get the 's information.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetVector3ToRotation(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the 's rotation.
            </summary>
            <param name="vector">The vector 3 that will get the 's information.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetSpotLight(System.Single,System.Single)">
            <summary>
            Sets the light to spot light. The spot light is defined by a constant cone of inner 
            light and a gradual fading of light within an outer cone. The inner and outer cones 
            are defined by an angle ranging from 0 to 360. 
            </summary>
            <param name="inner">The inner cone.</param>
            <param name="outer">The outer cone.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetPointLight(System.Single,System.Single,System.Single)">
            <summary>
            Sets the light to a point light.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.AdditionalLight.SetDirectionalLight(System.Single,System.Single,System.Single)">
            <summary>
            Sets the light to a directional light.
            </summary>
            <param name="x">X direction.</param>
            <param name="y">Y direction.</param>
            <param name="z">Z direction.</param>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.Type">
            <summary>
            Gets the light type.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.Visible">
            <summary>
            Gets or sets the visible state of the light (Hidden/Shown).
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.PositionX">
            <summary>
            Gets the light X position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.PositionY">
            <summary>
            Gets the light Y position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.PositionZ">
            <summary>
            Gets the light Z position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.DirectionX">
            <summary>
            Gets the light X direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.DirectionY">
            <summary>
            Gets the light Y direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.AdditionalLight.DirectionZ">
            <summary>
            Gets the light Z direction.
            </summary>
        </member>
        <member name="T:DarkGDK.Math.Vector3">
            <summary>
            Represents a Vector3 math object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector3.#ctor">
            <summary>
            Creates a new Vector3 object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Delete">
            <summary>
            Deletes the Vector3 and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector3.CatmullRom(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,System.Single)">
            <summary>
            Performs a catmull rom interpolation on the specified vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="vectorD">A vector object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.CopyTo(DarkGDK.Math.Vector3)">
            <summary>
            Copies the contents of this vector to the specified vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.CopyFrom(DarkGDK.Math.Vector3)">
            <summary>
            Copies the contents of the specified vector to this vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.CrossProduct(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Calculates the Cross Product Vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Normalize(DarkGDK.Math.Vector3)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.DotProduct(DarkGDK.Math.Vector3)">
            <summary>
            Calculates the Dot Product of this vector with the specified vector.
            </summary>
            <param name="vector">A vector object.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector3.BaryCentricCoordinates(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,System.Single,System.Single)">
            <summary>
            Produces the BaryCentricCoordinates vector. 
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="f">F value.</param>
            <param name="g">G value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Hermite(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,System.Int32,System.Single)">
            <summary>
            Performs a hermite spline interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="d">D value.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.LinearInterpolate(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,System.Single)">
            <summary>
            Performs a hermite linear interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Maximize(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Maximizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Minimize(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Minimizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Project(DarkGDK.Math.Vector3,DarkGDK.Math.Matrix4,DarkGDK.Math.Matrix4,DarkGDK.Math.Matrix4)">
            <summary>
            Projects a given vector from object space into screen space. 
            </summary>
            <param name="vector">A vector object.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Scale(DarkGDK.Math.Vector3,System.Single)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="value">Scale value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.SetToMatrixPosition(DarkGDK.Basic3D.Matrix)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the specified matrix 
            position. 
            </summary>
            <param name="matrix">The matrix to get the coordinates from.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.SetToMatrixRotation(DarkGDK.Basic3D.Matrix)">
            <summary>
            Sets the vector3 data using the X, Y and Z angles from the specified matrix 
            position. 
            </summary>
            <param name="matrix">The matrix to get the angles from.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.TransformCoordinatess(DarkGDK.Math.Vector3,DarkGDK.Math.Matrix4)">
            <summary>
            Transforms the vector coordinates.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="matrix">A matrix object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.TransformNormals(DarkGDK.Math.Vector3,DarkGDK.Math.Matrix4)">
            <summary>
            Transforms the vector normals coordinates.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="matrix">A matrix object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Equals(DarkGDK.Math.Vector3)">
            <summary>
            Checks if if this vector is identical to the one specified.
            </summary>
            <param name="vector">The vector to check with.</param>
            <returns>true if both are identical; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Add(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Divide(System.Single)">
            <summary>
            Divides the vector by the specified value,
            </summary>
            <param name="value">The value to divide the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Multiply(System.Single)">
            <summary>
            Multiplies the vector by the specified value,
            </summary>
            <param name="value">The value to multiply the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector3.Subtract(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Substracts the vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="P:DarkGDK.Math.Vector3.SquaredLength">
            <summary>
            Gets the squared length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector3.Length">
            <summary>
            Gets the length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector3.X">
            <summary>
            Gets the X coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector3.Y">
            <summary>
            Gets the Y coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector3.Z">
            <summary>
            Gets the Z coordinate of the vector.
            </summary>
        </member>
        <member name="T:DarkGDK.Math.Vector2">
            <summary>
            Represents a Vector2 math object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector2.#ctor">
            <summary>
            Creates a new Vector2 object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Delete">
            <summary>
            Deletes the Vector2 and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Vector2.CatmullRom(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,System.Single)">
            <summary>
            Performs a catmull rom interpolation on the specified vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="vectorD">A vector object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.CopyTo(DarkGDK.Math.Vector2)">
            <summary>
            Copies the contents of this vector to the specified vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.CopyFrom(DarkGDK.Math.Vector2)">
            <summary>
            Copies the contents of the specified vector to this vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.DotProduct(DarkGDK.Math.Vector2)">
            <summary>
            Calculates the Dot Product of this vector with the specified vector.
            </summary>
            <param name="vector">A vector object.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector2.BaryCentricCoordinates(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,System.Single,System.Single)">
            <summary>
            Produces the BaryCentricCoordinates vector. 
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="f">F value.</param>
            <param name="g">G value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.CCW(DarkGDK.Math.Vector2)">
            <summary>
            Gets the z component by taking the cross product of both vectors.
            </summary>
            <param name="vector">A vector object.</param>
            <returns>The z component.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Hermite(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,System.Int32,System.Single)">
            <summary>
            Performs a hermite spline interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="vectorC">A vector object.</param>
            <param name="d">D value.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.LinearInterpolate(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2,System.Single)">
            <summary>
            Performs a hermite linear interpolation on a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
            <param name="s">S value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Maximize(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2)">
            <summary>
            Maximizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Minimize(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2)">
            <summary>
            Minimizes a vector.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Normalize(DarkGDK.Math.Vector2)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Scale(DarkGDK.Math.Vector2,System.Single)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="value">Scale value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Set(System.Single,System.Single)">
            <summary>
            Sets the vector.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.TransformCoordinates(DarkGDK.Math.Vector2,DarkGDK.Math.Matrix4)">
            <summary>
            Transforms the vector coordinates.
            </summary>
            <param name="vector">A vector object.</param>
            <param name="matrix">A matrix object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Equals(DarkGDK.Math.Vector2)">
            <summary>
            Checks if if this vector is identical to the one specified.
            </summary>
            <param name="vector">The vector to check with.</param>
            <returns>true if both are identical; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Add(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Divide(System.Single)">
            <summary>
            Divides the vector by the specified value,
            </summary>
            <param name="value">The value to divide the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Multiply(System.Single)">
            <summary>
            Multiplies the vector by the specified value,
            </summary>
            <param name="value">The value to multiply the vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Vector2.Subtract(DarkGDK.Math.Vector2,DarkGDK.Math.Vector2)">
            <summary>
            Substracts the vectors.
            </summary>
            <param name="vectorA">A vector object.</param>
            <param name="vectorB">A vector object.</param>
        </member>
        <member name="P:DarkGDK.Math.Vector2.SquaredLength">
            <summary>
            Gets the squared length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector2.Length">
            <summary>
            Gets the length of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector2.X">
            <summary>
            Gets the X coordinate of the vector.
            </summary>
        </member>
        <member name="P:DarkGDK.Math.Vector2.Y">
            <summary>
            Gets the Y coordinate of the vector.
            </summary>
        </member>
        <member name="T:DarkGDK.IO.Mouse">
            <summary>
            Contains all mouse methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Mouse.Show">
            <summary>
            Shows the mouse cursor.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Mouse.Hide">
            <summary>
            Hides the mouse cursor.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Mouse.Position(System.Int32,System.Int32)">
            <summary>
            Changes the position of the mouse pointer. By specifying a 2D screen coordinate, you
            can relocate the location of the mouse pointer at any time. 
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.IO.Mouse.ChangeCursor(System.Int32)">
            <summary>
            Changes the cursor that belongs to the mouse pointer. A value of zero uses the 
            applications arrow cursor and a value of one will use the hourglass cursor. 
            Values 2 to 31 are custom cursors (Actually undocumented how to do on DGDK.NET). 
            </summary>
            <param name="cursorIndex">The index of the cursor.</param>
        </member>
        <member name="M:DarkGDK.IO.Mouse.Pick(DarkGDK.Basic3D.Object3D)">
            <summary>
            Checks if an specified object is at the mouse's current position. If true is returned, 
            additional data will be generated and stored internally. This extra data can be 
            retrieved using Basic3D.PickDistance,  Basic3D.PickX, Basic3D.PickY and 
            Basic3D.PickZ, methods. Be aware that there may be multiple cameras when picking 
            objects. To make sure you are selecting the correct screen object, use the SetCurrent
            for the screen being rendered by that camera view. Do not use extreme camera range or
            object distances with this method, as this increases the inaccuracy of the raycast
            line being used internally.
            </summary>
            <param name="objectToTest">The object to test for (it will only test for this object).</param>
            <returns>true if the specified object was picked; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IO.Mouse.Pick">
            <summary>
            Returns the closest object at the mouse's current position (relative to the screen).
            If no object exists at the coordinate, null is returned. If an object is returned, 
            additional data will be generated and stored internally. This extra data can be 
            retrieved using Basic3D.PickDistance,  Basic3D.PickX, Basic3D.PickY and 
            Basic3D.PickZ, methods. Be aware that there may be multiple cameras when picking 
            objects. To make sure you are selecting the correct screen object, use the SetCurrent
            for the screen being rendered by that camera view. Do not use extreme camera range or
            object distances with this method, as this increases the inaccuracy of the raycast
            line being used internally.
            </summary>
            <returns>A Object if one was picked; otherwise, null.</returns>
            <remarks>This method goes through all the collection of objects, so it should be
            really slow. Use one of the other two overloads for a faster search.</remarks>
        </member>
        <member name="P:DarkGDK.IO.Mouse.Click">
            <summary>
            Gets a value if a mouse button is pressed. The integer return value will depend on
            which mouse button has been pressed. A mouse can have up to four buttons, and each
            one can be detected using this command. Each button is assigned a value. The left 
            button is assigned a value of 1. The right button is assigned a value of 2. Buttons 
            three and four are assigned values of 4 and 8 respectively. When more than one button 
            is pressed, the value of the buttons are added to produce a combined value you can
            check for. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.LeftClick">
            <summary>
            Returns true if the user clicked the left button exclusively (for combined button,
            read the Click property).
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.RightClick">
            <summary>
            Returns true if the user clicked the right button exclusively (for combined button,
            read the Click property).
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MiddleClick">
            <summary>
            Returns true if the user clicked the middle button exclusively (for combined button,
            read the Click property).
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveX">
            <summary>
            Gets the current X movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse X position
            and the last mouse X position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveY">
            <summary>
            Gets the current Y movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse Y position
            and the last mouse Y position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveZ">
            <summary>
            Gets the current Z movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse Z position
            and the last mouse Z position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveXAlternative">
            <summary>
            Gets the current X movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse X position
            and the last mouse X position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveYAlternative">
            <summary>
            Gets the current Y movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse Y position
            and the last mouse Y position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.MoveZAlternative">
            <summary>
            Gets the current Z movement value of the mouse pointer. Instead of the actual mouse 
            position, this property returns the difference between the current mouse Z position
            and the last mouse Z position. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.X">
            <summary>
            Gets the current X position of the mouse pointer. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.Y">
            <summary>
            Gets the current Y position of the mouse pointer. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Mouse.Z">
            <summary>
            Gets the current Z position of the mouse pointer. 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Cylinder">
            <summary>
            Represents a Cylinder Object. 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Object3D">
            <summary>
            Represents a 3D object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.Object3D.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor">
            <summary>
            Finds an unused ID before instantiating and initializes the dictionaries.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(System.String)">
            <summary>
            Creates an Object by loading a model from the specified file. You must specify a 
            model in the X, 3DS, MDL, MD2 or MD3 format. Once you have loaded the 3D object file
            successfully, you can position, rotate, scale, animate and manipulate it. 
            </summary>
            <param name="fileName">The file to load the object from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(System.String,DarkGDK.Basic3D.TextureMode)">
            <summary>
            Creates an Object by loading a model from the specified file. You must specify a 
            model in the X, 3DS, MDL, MD2 or MD3 format. Once you have loaded the 3D object file
            successfully, you can position, rotate, scale, animate and manipulate it. 
            </summary>
            <param name="fileName">The file to load the object from.</param>
            <param name="textureMode">The texture mode.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.Basic3D.Mesh)">
            <summary>
            Constructs a 3D object from a single mesh. The mesh is used as the root limb
            for the 3D object.  
            </summary>
            <param name="mesh">The mesh to make the object from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.Basic3D.Mesh,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a 3D object from a single mesh and image. The mesh is used as the root limb
            for the 3D object and the image is used as a texture for the object.  
            </summary>
            <param name="mesh">The mesh to make the object from.</param>
            <param name="texture">The texture to apply to the object.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.Basic3D.Limb)">
            <summary>
            Make a simple object from the specified limb. You can use this method to remove a limb
            element such as an arm or gun from an object and create a new object using just this 
            element. Ideal for deconstructing loaded models and using their elements for other
            uses. 
            </summary>
            <param name="sourceLimb">The limb to create the object from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new object by loading an effect (.FX) file. If a model is specified on the
            .FX, this model will be loaded, else, it creates a new internal pyramid model
            </summary>
            <param name="effectFile">
            An FX file that is compatible with the DX9 effect framework and that typically uses
            the extension '.fx'. 
            </param>
            <param name="useCurrentTextures">
            If set to true the effect will use the textures already mapped to the model; otherwise, 
            discards the current textures and loads the textures specified in the FX file. 
            Typically, effects rely on the specified model and textures in the FX file to function 
            properly. 
            </param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.ResourceAssembly,System.String,System.Boolean)">
            <summary>
            Creates a new object by loading an embedded .FX file on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
            <param name="useCurrentTextures">Should it use the current model textures?</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads an Object from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.ResourceAssembly,System.String,System.String[])">
            <summary>
            Loads an Object from an embedded resource on the specified ResourceAssembly, but first
            it extracts the textures it will use
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param> 
            <param name="textures">A string array containing the files used as textures for the object</param>       
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.ResourceAssembly,System.String,DarkGDK.Basic3D.TextureMode)">
            <summary>
            Loads an Object from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
            <param name="textureMode">The Texture Mode</param>        
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.#ctor(DarkGDK.ResourceAssembly,System.String,System.String[],DarkGDK.Basic3D.TextureMode)">
            <summary>
            Loads a Object from an embedded resource on the specified ResourceAssembly, but first
            it extracts the textures it will use
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param> 
            <param name="textures">A string array containing the files used as textures for the object</param>          
            <param name="textureMode">The Texture Mode</param>          
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.AddLimb(DarkGDK.Basic3D.Mesh)">
            <summary>
            Creates a new limb from a specified mesh and add it to an existing 3D object. Limbs can
            only be added sequentially, so you must ensure you specify a new limb number that 
            immediately follows an existing limb. When a limb is added to a 3D object, it will not
            have a place in the object hierarchy. You can position the limb in the object hierarchy 
            using the Limb.Link method. Do not confuse Limb.Link with Limb.Offset
            which sets the actual 3D position of the limb within the object.
            </summary>
            <param name="mesh">The mesh to be attached.</param>
            <returns>The newly created limb.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.AppendAnimation(System.String)">
            <summary>
            This command will append all animation data from an X file into the specified X file 
            object. The new animation data will begin from the start frame specified up to the 
            length of the files animation data. Ensure that the 3D object being appended uses the
            same limb names as the  original object, otherwise the load will fail.
            </summary>
            <param name="fileName">The X file to load the animation from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.AppendAnimation(System.String,System.Int32)">
            <summary>
            This command will append all animation data from an X file into the specified X file 
            object. The new animation data will begin from the start frame specified up to the 
            length of the files animation data. Ensure that the 3D object being appended uses the
            same limb names as the  original object, otherwise the load will fail.
            </summary>
            <param name="fileName">The X file to load the animation from.</param>
            <param name="startFrame">The starting frame of the animation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.AutomaticCollision(System.Single,System.Boolean)">
            <summary>
            Sets the object to automatic collision. Automatic collision takes over the task of 
            adjusting the object when it hits another object in the 3D scene. Objects with 
            automatic collision use a collision sphere of the specified radius, ignoring its 
            previous collision shape.
            </summary>
            <param name="radius">The radius of the collision sphere.</param>
            <param name="response">If true, the new position backtracks to the last collision
            free position when a hit occurs.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Clone">
            <summary>
            Creates a new Object that is an exact duplicate of itself. 
            Cloned objects do not share any data allowing you to use the new object in any manner
            you wish.
            </summary>
            <returns>A clone of the object.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Collision">
            <summary>
            Check if a collision occured.
            </summary>
            <returns>The collided object if a collision ocurred; othewise, null.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Collision(DarkGDK.Basic3D.Object3D)">
            <summary>
            Check if a collision occured with the specified object.
            </summary>
            <param name="objectToTest">Object to test collision with.</param>
            <returns>true if they collided; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ConvertFVF(DarkGDK.Basic3D.ObjectFVFValues)">
            <summary>
            Converts the specified object to use a new FVF Format. FVF stands for Flexible Vertex 
            Format and represents how much data each vertex of your objects meshes contain. Use 
            this command to prepare an object for use with a vertex shader effect. The FVF Format 
            is specified using bits. Each bit represents an element that will be created within the
            vertex data. 
            </summary>
            <param name="fvf">The FVF value.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Delete">
            <summary>
            Releases object resource from the engine and frees the Id so it 
            can be re-used.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.DeleteCollisionBox">
            <summary>
            Makes an object use normal collision.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.DisableZBias">
            <summary>
            Disables the setting of Z-Bias, used to alter how an object renders to the screen 
            based on the Z buffer. See the EnableZBias for details of the Z-Bias effect. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.EnableZBias(System.Single,System.Single)">
            <summary>
            Enables the setting of a Z-Bias slope and depth value, used to alter how an object
            renders to the screen based on its own Z buffer value and the Z buffer values already 
            present in the scene. This command can be used to favour rendering one object over 
            another, where both objects are in identical positions in the scene. 
            </summary>
            <param name="slopeScale">The slope scale.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.EnumerateLimbs">
            <summary>
            Re-populates Limbs list with data from the engine using PerformCheckListForObjectLimbs. 
            Use this method to syncronize the wrapper with the real engine object.
            Caution: LimbParent information is not retrieved by this method!  This could cause limb
            ID's to become invalid if modifications (linking or removing) is done after this method
            is called.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Fade(System.Single)">
            <summary>
            Makes the specified 3D object fade to the current ambient  level. With ambient
             set to zero and the object faded using a value of zero, the object will be 
            completely unlit. With a fade value of 200 its illumination will be doubled. With a
            fade value of 50, the illumination is halved. This technique can also be used with a
            ghosted object to slowly fade an object until completely invisible.
            </summary>
            <param name="percentage">The fade percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Fade(System.Int32)">
            <summary>
            Makes the specified 3D object fade to the current ambient  level. With ambient
             set to zero and the object faded using a value of zero, the object will be 
            completely unlit. With a fade value of 200 its illumination will be doubled. With a
            fade value of 50, the illumination is halved. This technique can also be used with a
            ghosted object to slowly fade an object until completely invisible.
            </summary>
            <param name="percentage">The fade percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.FixPivot">
            <summary>
            Fixes the current angles of the specified 3D object as the new absolute rotation of the
            model. It is often required to load, rotate and fix models to face a particular
            direction before using them.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.GhostOff">
            <summary>
            Deactivates the effect of ghosting on the specified 3D object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.GhostOn">
            <summary>
            Makes the specified 3D object semi-transparent if supported by the current display 
            card. This technique is known as alpha-blending and causes the object to appear as a 
            ghost image. If a value of one is specified for the dark ghosting, the object uses 
            negative alphablending.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.GhostOn(System.Int32)">
            <summary>
            Makes the specified 3D object semi-transparent if supported by the current display 
            card. This technique is known as alpha-blending and causes the object to appear as a 
            ghost image. If a value of one is specified for the dark ghosting, the object uses 
            negative alphablending.
            </summary>
            <param name="flag">The ghosting flag.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.HideBounds">
            <summary>
            Hides the wireframe bounds that reveal the collision sphere and collision boundbox 
            associated with the object. These bounds are originally revealed by using the
            ShowBounds method.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Hit">
            <summary>
            Check if a hit occured.
            </summary>
            <returns>The object if a hit ocurred; othewise, null.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Hit(DarkGDK.Basic3D.Object3D)">
            <summary>
            Check if a hit occured with the specified object.
            </summary>
            <param name="objectToTest">Object to test hit with.</param>
            <returns>true if they hit; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.InstanceCopy">
            <summary>
            This method will create an instance copy of the object. Unlike the Clone method, this 
            instance will share most of the original objects data and be dependent on the original
            object remaining in existence to hold such data. Instanced objects do have the ability
            to hide/show both their limbs and hide/show the object, independent of the original 
            object. This method is ideally suited to copying large numbers of primarily static 
            objects such as trees and rocks where the original model data is to remaing largely
            unchanged.
            </summary>
            <returns>New instance of Object that shares instance data.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Intersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>        
            This method returns the distance to the point of intersection between two coordinates, 
            in reference to the specified object. Use this method to project a line from your current
            position to a destination to determine whether a collision will occur with an object. 
            Ideal for bullet calculations and fast manual polygon collision. 
            </summary>
            <param name="x">Current X position.</param>
            <param name="y">Current Y position.</param>
            <param name="z">Current Z position.</param>
            <param name="newX">New X position.</param>
            <param name="newY">New Y position.</param>
            <param name="newZ">New Z position.</param>
            <returns>The distance to the point of intersection.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.LoopAnimation">
            <summary>
            Plays and loops the animation data contained within the specified 3D object from the
            beginning. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.LoopAnimation(System.Int32)">
            <summary>
            Plays and loops the animation data contained within the specified 3D object from the
            beginning. 
            </summary>
            <param name="startFrame">The starting frame of the animation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.LoopAnimation(System.Int32,System.Int32)">
            <summary>
            Plays and loops the animation data contained within the specified 3D object from the
            beginning. 
            </summary>
            <param name="startFrame">The starting frame of the animation.</param>
            <param name="endFrame">The ending frame of the animation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.MakeCollisionBox(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Makes an object use box collision. The rotating box provides more accurate collision 
            feedback as the object rotates, while a non-rotated isable to generate sliding 
            collision data using the CollisionX, CollisionY and CollisionZ properties. 
            </summary>
            <param name="x1">X position of the first corner of the box.</param>
            <param name="y1">Y position of the first corner of the box.</param>
            <param name="z1">Z position of the first corner of the box.</param>
            <param name="x2">X position of the second corner of the box.</param>
            <param name="y2">Y position of the second corner of the box.</param>
            <param name="z2">Z position of the second corner of the box.</param>
            <param name="rotatingBox">True if the collision box should rotate.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Move(System.Single)">
            <summary>
            Moves the specified 3D object in 3D space. The method uses the current direction of 
            the object and moves it using the specified step value.
            </summary>
            <param name="step">Ammount of movement.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.MoveUp(System.Single)">
            <summary>
            Moves the object in a up direction relative to its forward facing angle, rather than
            an absolute world direction.
            </summary>
            <param name="step">Ammount of movement.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.MoveDown(System.Single)">
            <summary>
            Moves the object in a down direction relative to its forward facing angle, rather than
            an absolute world direction.
            </summary>
            <param name="step">Ammount of movement.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.MoveLeft(System.Single)">
            <summary>
            Moves the object in a left direction relative to its forward facing angle, rather than
            an absolute world direction.
            </summary>
            <param name="step">Ammount of movement.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.MoveRight(System.Single)">
            <summary>
            Moves the object in a right direction relative to its forward facing angle, rather than
            an absolute world direction.
            </summary>
            <param name="step">Ammount of movement.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PerformCheckListForLimbs">
            <summary>
            Makes a list of all limbs contained in a 3D object. Objects that have been loaded may
            contain hundreds of limbs, and are identified by number. All limbs include an internal 
            limb description that often indicates which part of the overall 3D object it belongs 
            to. You can access the limb description using the string item of the checklist when
            you have performed the check. Use Checklist to read the checklist.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PitchDown(System.Single)">
            <summary>
            Rotates an existing 3D object to pitch downwards. The rotation is independent of any
            axis orientation and allows free motion. The value of the angle can be positive or
            negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PitchUp(System.Single)">
            <summary>
            Rotates an existing 3D object to pitch upwards. The rotation is independent of any
            axis orientation and allows free motion. The value of the angle can be positive or
            negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PlayAnimation">
            <summary>
            Plays the animation data contained within the specified 3D object from the beginning. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PlayAnimation(System.Int32)">
            <summary>
            Plays the animation data contained within the specified 3D object from the beginning. 
            </summary>
            <param name="startFrame">The starting frame of the animation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.PlayAnimation(System.Int32,System.Int32)">
            <summary>
            Plays the animation data contained within the specified 3D object from the beginning. 
            </summary>
            <param name="startFrame">The starting frame of the animation.</param>
            <param name="endFrame">The ending frame of the animation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Position(System.Single,System.Single,System.Single)">
            <summary>
            Place the specified 3D object in 3D space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Point(System.Single,System.Single,System.Single)">
            <summary>
            Points the specified 3D object towards a point in 3D space. The method sets the current 
            direction of the object to face towards this point in space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.RemoveLimb(DarkGDK.Basic3D.Limb)">
            <summary>
            Remove an existing limb from an object. Destroying a limb will also remove every limb
            associated as a child node from the removed limb.
            </summary>
            <param name="limb">The limb to be removed.</param>
            <remarks>Do not use this after calling EnumerateLimbs.</remarks>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.RemoveLimb(System.Int32)">
            <summary>
            Remove an existing limb from an object. Destroying a limb will also remove every limb
            associated as a child node from the removed limb.
            </summary>
            <param name="index">The index of the limb to be removed.</param>
            <remarks>Do not use this after calling EnumerateLimbs.</remarks>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.RollLeft(System.Single)">
            <summary>
            Rotates an existing 3D object to roll left. The rotation is independent of any axis 
            orientation and allows free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.RollRight(System.Single)">
            <summary>
            Rotates an existing 3D object to roll right. The rotation is independent of any axis 
            orientation and allows free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the object.
            </summary>
            <param name="angleX">X rotation.</param>
            <param name="angleY">Y rotation.</param>
            <param name="angleZ">Z rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.RotateRelative(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the object relative to its current rotation angles
            </summary>
            <param name="angleX">X rotation.</param>
            <param name="angleY">Y rotation.</param>
            <param name="angleZ">Z rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Save(System.String)">
            <summary>
            Saves the object in the DBO file format.
            </summary>
            <param name="fileName">The file to save the object to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the 3D object to stretch or shrink in all three dimensions, using 
            percentage scale values.
            </summary>
            <param name="x">Width scale.</param>
            <param name="y">Height scale.</param>
            <param name="z">Depth scale.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ScaleTexture(System.Single,System.Single)">
            <summary>
            Scales the UV data of the object. The UV data controls how a texture is 
            mapped onto your object. By scaling the UV data, you can effectively stretch or tile 
            the texture over your object. A U or V value of 1 means no scale change. A value of
            0.5 will scale the texture by half. A value of 2.0 will double the scale of the 
            texture. The scale effect is permanent.
            </summary>
            <param name="uScale">Controls the horizontal spread of the data.</param>
            <param name="vScale">Controls the vertical spread of the data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ScaleTexture(System.Single,System.Single,System.Int32)">
            <summary>
            Scales the UV data of the object. The UV data controls how a texture is 
            mapped onto your object. By scaling the UV data, you can effectively stretch or tile 
            the texture over your object. A U or V value of 1 means no scale change. A value of
            0.5 will scale the texture by half. A value of 2.0 will double the scale of the 
            texture. The scale effect is permanent.
            </summary>
            <param name="uScale">Controls the horizontal spread of the data.</param>
            <param name="vScale">Controls the vertical spread of the data.</param>
            <param name="stage">The stage number.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ScrollTexture(System.Single,System.Single)">
            <summary>
            Scrolls the UV data of the 3D object. The UV data controls how 
            a texture is mapped onto your object. By scrolling the UV data, you can effectively 
            scroll the texture over your limb. The scroll effect is permanent.
            </summary>
            <param name="uScroll">Controls the horizontal shift of the data.</param>
            <param name="vScroll">Controls the vertical shift of the data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Set(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Changes the visual properties of the object.
            </summary>
            <param name="wireframe">Wireframe state. If true, shows in wireframe form.</param>
            <param name="transparency">Transparency state. If true, black colored parts are not
            drawn to the screen.</param>
            <param name="cull">Cull state. If false, the object will draw polygons normally 
            hidden due to the direction the polygon faces. </param>
            <param name="filter">Sets the texture filtering, which controls the smoothing effect 
            of the texture as it is mapped to the object. </param>
            <param name="light">Activates and deactivates the object sensitivity to any lights 
            in the scene. </param>
            <param name="fog">Activates and deactivates the object sensitivity to fog in the
            scene.</param>
            <param name="ambient">Activates and deactivates the object sensitivity to ambient 
             in the scene. </param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetAlphaMappingOn(System.Single)">
            <summary>
            Sets the true alpha value of an object to a percentage value from 0 to 100. Zero 
            represents an alpha state that makes the object completely invisible. An alpha
            percentage of 100 will render the object fully visible. A value between these limits
            will create a true transparency effect when the object is transparent, as set by the 
            Transparency property.
            </summary>
            <param name="percentage">The percentage of alpha.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetAlphaMappingOn(System.Int32)">
            <summary>
            Sets the true alpha value of an object to a percentage value from 0 to 100. Zero 
            represents an alpha state that makes the object completely invisible. An alpha
            percentage of 100 will render the object fully visible. A value between these limits
            will create a true transparency effect when the object is transparent, as set by the 
            Transparency property.
            </summary>
            <param name="percentage">The percentage of alpha.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetAnimationFrame(System.Int32)">
            <summary>
            Sets the animation frame of the 3D object.
            </summary>
            <param name="frame">The frame to set to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetBlendMappingOn(DarkGDK.Basic2D.Image,DarkGDK.Basic3D.BlendMode)">
            <summary>
            Sets the blending map for the specified object.
            Blended textures are combined with the main texture to create a multitextured object. 
            </summary>
            <param name="image">The image to blend.</param>
            <param name="blendMode">The mode used to create the blend effect.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetBlendMappingOn(DarkGDK.Basic2D.Image,DarkGDK.Basic3D.BlendMode,System.Int32,DarkGDK.Basic3D.TextureCoordMode)">
            <summary>
            Sets the blending map for the specified object.
            Blended textures are combined with the main texture to create a multitextured object. 
            </summary>
            <param name="image">The image to blend.</param>
            <param name="blendMode">The mode used to create the blend effect.</param>
            <param name="stage">The stage value.</param>
            <param name="textureCoordMode">The texture coordinate mode.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetBumpMappingOn(DarkGDK.Basic2D.Image)">
            <summary>
            Sets the bump map for the specified object. Bumpmapped textures are combined with the 
            main texture to create an object with a visually uneven surface. Your video card must 
            have the ability to create this hardware effect.
            </summary>
            <param name="image">The Bumpmapped texture.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCartoonShadingOn(DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image)">
            <summary>
            Sets the rendering method of the specified object. Otherwise known as toon shading, 
            this command will apply a carton style render to the object using a shading image and
            an edge image. The shading image and edge image require layout for the toon shading to
            work correctly. Your video card must have the ability to create this hardware effect.
            </summary>
            <param name="shadeImage">The shade texture.</param>
            <param name="edgeImage">The edge texture.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCollisionRadius(System.Single)">
            <summary>
            Sets the collision radius of the specified object. You can use this command to remove 
            the outer most parts of your object from the collision system where collision at such 
            extents are undesirable. 
            </summary>
            <param name="radius">The radius of the collision.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCollisionToBoxes">
            <summary>
            Sets the specified 3D object to use a box area for collision detection. An invisible 
            collision box will be used for every limb in the object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCollisionToPolygons">
            <summary>
            Sets the specified 3D object to use polygon checking for collision detection. Polygon
            detection is much slower that box and sphere detection, but allows you to detect
            perfect collision against an object that has a complex polygon structure. When a
            polygon test is carried out, the primary object is always treated as a polygon object 
            and the secondary object is always a sphere representative of the size of the second
            object. This method is significantly faster that a test against two polygon structures.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCollisionToSpheres">
            <summary>
            Sets the specified 3D object to use a spherical area for collision detection. An 
            invisible collision sphere will be used for every limb in the object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetCubeMappingOn(DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image)">
            <summary>
            Applies a cube map to the specified object. A cube map will give the impression of a
            reflective surface over the object. The images used specify a texture on each side of 
            the object to be affected, which combine to create a 3D texture from which the
            reflective parts can be mapped to the object. Cube maps take up a lot of video memory
            so use this feature with care.
            </summary>
            <param name="face1">First face image.</param>
            <param name="face2">Second face image.</param>
            <param name="face3">Third face image.</param>
            <param name="face4">Fourth face image.</param>
            <param name="face5">Fifth face image.</param>
            <param name="face6">Sixth face image.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetDetailMappingOn(DarkGDK.Basic2D.Image)">
            <summary>
            Sets the detail map for the specified object. Detail map textures are combined with 
            the main texture to create a multitextured object.
            </summary>
            <param name="image">The detail image.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetFieldOfView(System.Single)">
            <summary>
            Sets the Field-Of-View of the object.
            </summary>
            <param name="radius">The radius of the Field-Of-View.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetLightMappingOn(DarkGDK.Basic2D.Image)">
            <summary>
            Sets the light map for the specified object.  Light map textures are combined with
            the main texture to create a multitextured object.
            </summary>
            <param name="image">The light map texture.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.GenerateObjectNormals">
            <summary>
            Generates normals for the object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetOrientation(DarkGDK.Camera.CameraBase)">
            <summary>
            Sets the orientation of the object based on a source.
            </summary>
            <param name="camera">Copies the orientation from the camera.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetOrientation(DarkGDK.Basic3D.Object3D)">
            <summary>
            Sets the orientation of the object based on a source.
            </summary>
            <param name="source">Copies the orientation from the object.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetRainbowShadingOn(DarkGDK.Basic2D.Image)">
            <summary>
            Sets the specified object to use rainbow rendering. By specifying a rainbow image, you 
            can create a very colorful rainbow effect for your object. Your video card must have 
            the ability to create this hardware effect. 
            </summary>
            <param name="image">A rainbow image.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetReflectionShadingOn">
            <summary>
            Sets the specified object to use reflection. Use this command when you want to give 
            your object a reflective quality, though not all 3D hardware will support Vertex 
            Shaders which are required to produce this effect. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetSpecularPower(System.Single)">
            <summary>
            Alters the material specular power component of the object. The specular power
            component makes up one of the factors that controls the final color of the object,
            specifically the strength of  reflected from the surface of the object. The 
            amount of the specular reflection is controlled with the sister property Specular.
            </summary>
            <param name="power">The specular power.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetShadingOff">
            <summary>
            Deactivates any shading currently being applied to the specified object. Shading
            activated by such methos as SetShadowShadingOn will be switched off restoring the 
            object to a regular object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetShadowShadingOn">
            <summary>
            Sets the specified object to cast a hardware shadow. This command requires hardware
            specifically designed for this feature, as it's a very intensive calculation. Use this
            method sparingly for best performance. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetShadowShadingOn(DarkGDK.Basic3D.Mesh,System.Int32,System.Boolean)">
            <summary>
            Sets the specified object to cast a hardware shadow. This command requires hardware
            specifically designed for this feature, as it's a very intensive calculation. Use this
            method sparingly for best performance. Shader based shadows cannot be used in 
            combination with animated bone models. You must use CPU based shadow rendering for
            this. To change the offset to reduce/increase self-shadowing artifact described above,
            simply copy the stencilshadow.fx from the effects folder of the compiler directory,
            and paste it into your project folder. Open it up and you can change the shader near 
            the bottom to a value other than 0.1 to choose your own value. 
            </summary>
            <param name="mesh">A Mesh.</param>
            <param name="range">The range of the shadow.</param>
            <param name="useShaders">True if it is to use shaders.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetShadowShadingOn(System.Int32,System.Boolean)">
            <summary>
            Sets the specified object to cast a hardware shadow. This command requires hardware
            specifically designed for this feature, as it's a very intensive calculation. Use this
            method sparingly for best performance. Shader based shadows cannot be used in 
            combination with animated bone models. You must use CPU based shadow rendering for
            this. To change the offset to reduce/increase self-shadowing artifact described above,
            simply copy the stencilshadow.fx from the effects folder of the compiler directory,
            and paste it into your project folder. Open it up and you can change the shader near 
            the bottom to a value other than 0.1 to choose your own value. 
            </summary>
            <param name="range">The range of the shadow.</param>
            <param name="useShaders">True if it is to use shaders.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetSmoothing(System.Int32)">
            <summary>
            Smooths the sharp edges of the mesh within a limb by adjusting the normals data.
            A percentage value of zero will perform no smoothing and create a facet surface for 
            the limb. A percentage value of 100 will perform full smoothing, averaging all normals
            that share a vertex position and create a smoothing effect elimiating all edges. A 
            value between these two limits will determine the degree beyond which an edge will be 
            smoothed or left sharp.
            </summary>
            <param name="percentage">Smoothing percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetSmoothing(System.Single)">
            <summary>
            Smooths the sharp edges of the mesh within a limb by adjusting the normals data.
            A percentage value of zero will perform no smoothing and create a facet surface for 
            the limb. A percentage value of 100 will perform full smoothing, averaging all normals
            that share a vertex position and create a smoothing effect elimiating all edges. A 
            value between these two limits will determine the degree beyond which an edge will be 
            smoothed or left sharp.
            </summary>
            <param name="percentage">Smoothing percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetSphereMappingOn(DarkGDK.Basic2D.Image)">
            <summary>
            Applies a sphere map to the specified object. A sphere map will give the impression of
            a reflective surface over the object. The image used for the sphere map is specially 
            prepared to be used in concert with this command. The image is a fisheye spherical view
            of an entire scene placed in the center of the texture plate. 
            </summary>
            <param name="image">The sphere image.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetTexture(DarkGDK.Basic3D.TextureWrapMode,System.Int32)">
            <summary>
            Sets different texture modes used by the  object. Every texture is painted 
            onto a matrix using an internal set of values called UV data. This data contains a 
            range of real numbers from zero to one. Zero specifying the top/left corner of your 
            texture and one being the bottom/right corner of your texture. When a matrix uses UV
            data greater and less than this range, you are permitted a number of texture wrap modes
            to describe what should happen to paint these areas. 
            </summary>
            <param name="textureMode">The texture mode.</param>
            <param name="iMipMaps">Ensures the image has a mipmap texture. A mipmap is a
            texture that has many levels of detail, which the matrix can select and use based on 
            the matrix vertex distance from the camera.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetTexture(System.Int32,DarkGDK.Basic3D.TextureWrapMode,System.Int32)">
            <summary>
            Sets different texture modes used by the  object. Every texture is painted 
            onto a matrix using an internal set of values called UV data. This data contains a 
            range of real numbers from zero to one. Zero specifying the top/left corner of your 
            texture and one being the bottom/right corner of your texture. When a matrix uses UV
            data greater and less than this range, you are permitted a number of texture wrap modes
            to describe what should happen to paint these areas. 
            </summary>
            <param name="stage">The texture stage number.</param>
            <param name="textureMode">The texture mode.</param>
            <param name="iMipMaps">Ensures the image has a mipmap texture. A mipmap is a
            texture that has many levels of detail, which the matrix can select and use based on 
            the matrix vertex distance from the camera.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetTexture(System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Textures an object using the specified image. The image can be any size, but the
            quality of the texture depends on the graphics card used. A texture size to the power 
            of two is recommended size for all your textures. Where an image is larger than the
            supported texture size, the image is internally reduced when used as a texture. You can
            use this method to remove the effects of multitexturing effects and shaders. An 
            additional texture stage index can be provided to the command to specify multi-textures
            directly, and is required when using shaders that take pixel data from secondary 
            textures. 
            </summary>
            <param name="stage">The texture stage index.</param>
            <param name="image">The image to be applied.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetTextureMD3(DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image)">
            <summary>
            Sets the specified object to use a special set of textures. The object must have been
            previously loaded as an MD3 model. MD3 models are blank by default and require this 
            method to provide the textures. The six texture parameters H0, H1, L0, L1, L2 and U0 
            are images you must load prior to calling this command. 
            </summary>
            <param name="h0">H0 texture image.</param>
            <param name="h1">H1 texture image.</param>
            <param name="l0">L0 texture image.</param>
            <param name="l1">L1 texture image.</param>
            <param name="l2">L2 texture image.</param>
            <param name="u0">U0 texture image.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.SetTransparency(System.Boolean)">
            <summary>
            Sets the transparency state of the specified object. 
            The transparent color is determined by the Image.SetColorKey method. 
            </summary>
            <param name="drawTransparentColor">Set this to true to draw the transparent color.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ShowBounds">
            <summary>
            Shows the wireframe bounds that reveal the collision sphere and collision boundbox
            associated with the object. These bounds can later be hidden by using the 
            HideBounds method. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ShowBounds(System.Boolean)">
            <summary>
            Shows the wireframe bounds that reveal the collision sphere and collision boundbox
            associated with the object. These bounds can later be hidden by using the 
            HideBounds method. 
            </summary>
            <param name="boxOnly">If true, does not show the sphere.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.TurnLeft(System.Single)">
            <summary>
            Rotates an existing 3D object to turn left. The rotation is independent of any axis 
            orientation and allows free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.TurnRight(System.Single)">
            <summary>
            Rotates an existing 3D object to turn right. The rotation is independent of any axis 
            orientation and allows free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.UnGlue">
            <summary>
            Detachs the 3D object from any limb. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.XRotate(System.Single)">
            <summary>
            Rotates the specified 3D object around the X axis dimension. 
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.YRotate(System.Single)">
            <summary>
            Rotates the specified 3D object around the Y axis dimension. 
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.ZRotate(System.Single)">
            <summary>
            Rotates the specified 3D object around the Z axis dimension. 
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.TextureStage(System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Gets or sets the texture image, and a specific texture stage of the object.
            The image can be any size, but the quality of the texture depends on the 
            graphics card used. A texture size to the power of two is recommended size for all your textures.
            Where an image is larger than the supported texture size,
            the image is internally reduced when used as a texture. You can
            use this method to remove the effects of multitexturing effects and shaders.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.Pick(System.Int32,System.Int32,DarkGDK.Basic3D.Object3D,DarkGDK.Basic3D.Object3D)">
            <summary>
            Returns the closest object at the specified screen coordinates. The objects that are 
            tested against the 2D coordinate are only those within the Object Start and Object End 
            range in order to speed up specific tests. If no object exists at the coordinate, null
            is returned. If an object is returned, additional data will be generated and stored 
            internally. This extra data can be retrieved using Basic3D.PickDistance, 
            Basic3D.PickX, Basic3D.PickY and Basic3D.PickZ, methods. Be aware that 
            there may be multiple cameras when picking objects. To make sure you are selecting the 
            correct screen object, use the SetCurrent for the screen being rendered by that camera
            view. Do not use extreme camera range or object distances with this method, as this 
            increases the inaccuracy of the raycast line being used internally.
            </summary>
            <param name="x">Screen X coordinate.</param>
            <param name="y">Screen Y coordinate.</param>
            <param name="objectStart">First object.</param>
            <param name="objectEnd">Last object.</param>
            <returns>A Object if one was picked; otherwise, null.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.DistanceTo(DarkGDK.Basic3D.Object3D)">
            <summary>
            Calculates the distance between two objects.
            </summary>
            <param name="Object">The other object to calculate.</param>
            <returns>The distance of the objects.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Object3D.AngleTo(DarkGDK.Basic3D.Object3D)">
            <summary>
            Calculates the angle to another object.
            </summary>
            <param name="Object">The other object to calculate.</param>
            <returns>The angle to the object.</returns>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AffectedByAmbientLightLevel">
            <summary>
            Gets or sets whether the object is affected by ambient light.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AffectedByAnyLights">
            <summary>
            Gets or sets whether the object is affected by any lights.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AffectedByGlobalFogLevel">
            <summary>
            Gets or sets whether the object is affected by global fog level.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Ambience">
            <summary>
            Gets or sets the material ambience component of the object. The ambience 
            component makes up one of the factors that controls the final color of the object,
            specifically the amount of global ambient  it receives. If the global ambient 
            was red, and this component was set to white, the object would receive 'full' ambient 
             and drown out any ing otherwise applied to the object. The object would be 
            completely red. This command should not be confused with AffectedByAmbientLevel
            which controls the states whether the object receives any ambient  whatsoever.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AngleX">
            <summary>
            Gets the X angle of the specified 3D object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AngleY">
            <summary>
            Gets the Y angle of the specified 3D object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AngleZ">
            <summary>
            Gets the Z angle of the specified 3D object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationFrame">
            <summary>
            Gets or sets the actual animation frame.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationFrameCount">
            <summary>
            Gets the total animation frame count.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationInterpolation">
            <summary>
            Gets or Sets the animation interpolation. Any float value specified will be internally
            converted to Int32 because of original DGDK.NET method
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationSpeed">
            <summary>
            Gets or Sets the animation speed. Any float value specified will be internally
            converted to Int32 because of original DGDK.NET method
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Collidable">
            <summary>
            Gets or sets whether the object has collision turned on or off.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionCenterX">
            <summary>
            Gets the X position of the center of the collision sphere associated with the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionCenterY">
            <summary>
            Gets the Y position of the center of the collision sphere associated with the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionCenterZ">
            <summary>
            Gets the Z position of the center of the collision sphere associated with the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionRadius">
            <summary>
            Gets the radius of the collision sphere associated with the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionX">
            <summary>
            Gets the sliding data for X if the rotated-box flag false. The rotated-box flag is set
            when you used the method MakeCollisionBox. You must have used the make method in order
            to generate a return value here.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionY">
            <summary>
            Gets the sliding data for Y if the rotated-box flag false. The rotated-box flag is set
            when you used the method MakeCollisionBox. You must have used the make method in order
            to generate a return value here.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.CollisionZ">
            <summary>
            Gets the sliding data for Z if the rotated-box flag false. The rotated-box flag is set
            when you used the method MakeCollisionBox. You must have used the make method in order
            to generate a return value here.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Color">
            <summary>
            Gets or sets the object color. Some objects loaded from a model file may not be 
            colored if they do not already contain diffuse color data.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Culled">
            <summary>
            Gets or sets the culling state of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Diffuse">
            <summary>
            Gets or sets the diffuse color of the object.The diffuse component makes up one of 
            the factors that controls the final color of the object, specifically the amount 
            of  it receives from all available  sources.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Emissive">
            <summary>
            Gets or sets the emissive color of the object. The emissive component makes up one of
            the factors that controls the final color of the object, specifically the color the
            object emits irrespective of any  or ambience. Setting this value to a high color 
            will make it bright under its own inner color.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Excluded">
            <summary>
            Gets or sets whether the object is excluded physically from any loops involving 
            multi-object checking, used to increase performance in scenes that use a large 
            quantity of redundant objects in memory. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.InScreen">
            <summary>
            Returns true if the specified 3D object is wholly or partly visible within the screen
            borders, otherwise false is returned. Even if the object is behind the camera, its 
            overall size may partially clip the screen area.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Limbs">
            <summary>
            Gets a read-only collection of limbs.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Locked">
            <summary>
            Gets or sets whether the object is locked to the screen. Locking objects to the screen
            commands the object to completely ignore the camera's influence. A locked object will 
            be positioned as though the camera had never been altered from its default orientation.
            To make locked objects visible, simply set the Z position to a significant positive 
            value.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationLooping">
            <summary>
            Returns true if the animation is looping.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.AnimationPlaying">
            <summary>
            Returns true if the animation is playing.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.RotationMode">
            <summary>
            Gets or sets the rotation mode of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.ScreenX">
            <summary>
            Gets the current X screen coordinate of the specified 3D object, even if the object is
            not actually within the borders of the screen. You can use this for providing such 
            things as text labels for your 3D objects or adding lens flare to a nearby street lamp.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.ScreenY">
            <summary>
            Gets the current Y screen coordinate of the specified 3D object, even if the object is
            not actually within the borders of the screen. You can use this for providing such 
            things as text labels for your 3D objects or adding lens flare to a nearby street lamp.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Size">
            <summary>
            Gets a real number representing the full unit size of the specified 3D object. The unit
            size can be used to determine whether or not to scale the object for better visibility.
            Extremely small and extremely large objects will both suffer visual clipping when
            viewed by the camera. As a rule, your objects should have a unit size of between 50 
            and 3000. The finite visibility of the camera has a range of 5000 units, and objects 
            of a distance greater than this will be clipped. Objects that are so close to the 
            camera that they pass behind the camera will also be clipped.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.SizeX">
            <summary>
            Gets the full width of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.SizeY">
            <summary>
            Gets the full height of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.SizeZ">
            <summary>
            Gets the full depth of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Specular">
            <summary>
            Gets or sets the material specular component of the object. The specular component
            makes up one of the factors that controls the final color of the object, specifically 
            the  amount of  to be reflected from the surface of the object. The strength of 
            the specular reflection is controlled with the sister method SetSpecularPower.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.TotalAnimationFrames">
            <summary>
            Gets the total number of animation frames on the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Texture">
            <summary>
            Gets or sets the texture image of the object. The image can be any size, but the
            quality of the texture depends on the graphics card used. A texture size to the power 
            of two is recommended size for all your textures. Where an image is larger than the
            supported texture size, the image is internally reduced when used as a texture. You can
            use this method to remove the effects of multitexturing effects and shaders.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Transparency">
            <summary>
            Gets or sets the transparency flag of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Visible">
            <summary>
            Gets or sets the visibility of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.WireFrame">
            <summary>
            Gets or sets the wireframe state of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.X">
            <summary>
            Gets the X position of the 3D object in 3D space.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Y">
            <summary>
            Gets the Y position of the 3D object in 3D space.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.Z">
            <summary>
            Gets the Z position of the 3D object in 3D space.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.ZDepthEnabled">
            <summary>
            Gets or sets the Z-Depth state of the object.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.ZReadEnabled">
            <summary>
            Gets or sets the Z-Read state of the object. The Z read state controls whether each 
            pixel of the rendered object obeys the rule of Z buffer depth culling. The default
            value is enabled, where the object will only render pixels of the object that are 
            above any previous pixels rendered to the screen.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Object3D.ZWriteEnabled">
            <summary>
            Gets or sets the Z-Write state of the object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Cylinder.#ctor(System.Single)">
            <summary>
            Constructs a new 3D object from a cylinder mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the cylinder.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cylinder.#ctor(System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a cylinder mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the cylinder.</param>
            <param name="texture">Texture to give to the cylinder.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cylinder.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a cylinder mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the cylinder.</param>
            <param name="color">Color to give to the cylinder.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Basic3D">
            <summary>
            Contains all Basic3D methods and properties not directly related to any kind of 3D objects.
            I.E. Global Functions.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.CalculateAutomaticCollision">
            <summary>
            Calculates and update the positions of all objects and the camera using automatic 
            collision. This is usually done within the Core.Sync method, thus allowing the
            feature to be automated, however you may want to do this calculation early if you
            depend on the results of the calculation for further visual work such as placing a HUD
            object at the camera position (after the camera has responded to its collision 
            environment). 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.FlushVideoMemory">
            <summary>
            Flushs all textures and other resources from active video memory. You should use this 
            command when you are dramatically changing the contents of your 3D scene such as 
            changing game levels or entering a new environment. This technique will improve 
            performance during the initial renders of a new scene. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.PickScreen(System.Int32,System.Int32,System.Single)">
            <summary>
            Calculates a relative 3D coordinate from a 2D screen coordinate.  The resulting 3D 
            coordinate is not a world position, but a relative 3D vector from the current camera 
            position. The world coordinate can be obtained by adding the camera position to the 
            resulting vector. The resulting vector is generated internally and can be retrieved 
            the Pick properties.
            </summary>
            <param name="x">Screen X position.</param>
            <param name="y">Screen Y position.</param>
            <param name="distance">Indicates how far into the screen the 3D coordinate is to be 
            calculated.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.Statistic(System.Int32)">
            <summary>
            Returns an internal statistic from the engine. Providing a value of one as the 
            parameter will cause the command to return the current number of polygons used to 
            render the scene. 
            </summary>
            <param name="statisticCode">The statistics from the engine.</param>
            <returns>An internal statistic from the engine.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.TextureScreen(System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Texture's the provided image to the Screen
            </summary>
            <param name="iStage">Texture stage</param>
            <param name="oImage">An Image to texture</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.SetScreenEffect(DarkGDK.Basic3D.Effect)">
            <summary>
            Sets the screen effect using the provided effect object
            </summary>
            <param name="oEffect"></param>
        </member>
        <member name="M:DarkGDK.Basic3D.Basic3D.RenderQuad(System.Int32)">
            <summary>
            Renders the quad to the screen
            </summary>
            <param name="iMode"></param>
            <returns></returns>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.AlphaAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.AlphaBlendingAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.AlphaComparisionAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.AnisotropicFilteringAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.AntiAliasAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.BlitSysToLocalAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.CalibrateGammaAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ClipAndScalePointsAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ClipTLVertsAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ColorPerspectiveAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ColorWriteEnableAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.CubeMapAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.CullCCWAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.CullCWAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.DeviceType">
            <summary>
            Gets the device type of the current 3D device. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.DitherAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FilteringAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FogAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FogRangeAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FogTableAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FogVertexAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.FullScreenGammaAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.GlobalCollision">
            <summary>
            Gets or sets the global collision state. Activates or deactivates the detection of
            collisions with any two 3D object, irrespective of their individual collision settings.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.Maximums">
            <summary>
            Gets the maximum number of lights you can have in any 3D scene. It 
            is determined by the 3D device you are currently using. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumPixelShaderValue">
            <summary>
            Gets the maximum pixel shader value allowed by the current 3D device. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumPixelShaderVersion">
            <summary>
            Gets the maximum pixel shader version allowed by the current 3D device. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumTextureWidth">
            <summary>
            Gets the maximum texture width allowed by the current 3D device.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumTextureHeight">
            <summary>
            Gets the maximum texture height allowed by the current 3D device.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumVertexShaderConstants">
            <summary>
            Gets the maximum number of vertex shader constants allowed by the current 3D device.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumVertexShaderVersion">
            <summary>
            Gets the maximum pixel vertex version allowed by the current 3D device. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MaximumVolumeExtent">
            <summary>
            Gets the maximum volume extent allowed by the current 3D device. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MipCubeMapAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MipMapAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MipMapLODBiasAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.MipMapVolumeAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.NonLocalVideoMemoryAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.NonPowTexturesAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.OnlySquareTexturesAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.PerspectiveTexturesAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.PickDistance">
            <summary>
            Gets the distance value from previously generated pick data. The pick data is 
            generated when the Basic3D.Pick and Object.Pick methods are used. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.PickX">
            <summary>
            Gets the X position from previously generated pick data. The pick data is 
            generated when the Basic3D.Pick and Object.Pick methods are used. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.PickY">
            <summary>
            Gets the Y position from previously generated pick data. The pick data is 
            generated when the Basic3D.Pick and Object.Pick methods are used. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.PickZ">
            <summary>
            Gets the Z position from previously generated pick data. The pick data is 
            generated when the Basic3D.Pick and Object.Pick methods are used. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ProjectedTexturesAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.RenderAfterFlipAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.RenderWindowedAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.SeparateTextureMemoriesAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ShareVertexBuffers">
            <summary>
            Sets the creation mode of the object manager. Setting to true forces the objects to
            share vertex buffers where possible. Vertex buffers are the internal memory resource
            the engine uses to store all geometry data before it is rendered to the screen. By 
            sharing vertex buffers, you can gain performance on some 3D cards, but not others.
            By default vertex buffers are not shared for the sake of widest compatibility, better 
            generic performance and less prone to buffer overruns. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TextureAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TextureSystemMemoryAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TextureVideoMemoryAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TLVertexSystemMemoryAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TLVertexVideoMemoryAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.TNLAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.VolumeMapAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.WBufferAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.WFogAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ZBufferAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Basic3D.ZFogAvailable">
            <summary>
            Returns true if this technology is available.
            </summary>
        </member>
        <member name="T:DarkGDK.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DarkGDK.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DarkGDK.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DarkGDK.Particle.Particle">
            <summary>
            Represents a particle object.
            </summary>
        </member>
        <member name="F:DarkGDK.Particle.Particle.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Particle.Particle.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.Particle.#ctor(DarkGDK.Basic2D.Image,System.Int32,System.Single)">
            <summary>
            Creates a particles object using a specified image and radius. A particles object
            will emit single particles given a default set of rules than can be changed using
            the particle commands. 
            </summary>
            <param name="image">The image to be used by the particles.</param>
            <param name="maximum">The maximum number of particles.</param>
            <param name="radius">The radius of the emit.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Delete">
            <summary>
            Deletes a particles object from memory and frees the ID. If you simply wish to hide 
            an object, it is suggested you reposition or hide the particles object as recreating
            particle objects from scratch has a performance hit. 
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Show">
            <summary>
            Show a particles object, and will instantly show every particle which is deemed part
            of the particles object previously hidden with the Hide method. 
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Hide">
            <summary>
            Hides a particles object, and will instantly hide every particle which is deemed part
            of the particles object. To emit no new particles and leave the rest to descend, 
            either reduce the number of emissions or reposition the particles object offscreen. 
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Position(System.Single,System.Single,System.Single)">
            <summary>
            Positions a particles object in 3D world space. By moving a particles object you will
            be moving at the same time every particle that belongs to the particles object. To
            create the effect of trails, see PositionEmissions command. 
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Position(DarkGDK.Math.Vector3)">
            <summary>
            Positions a particles object in 3D world space. By moving a particles object you will
            be moving at the same time every particle that belongs to the particles object. To
            create the effect of trails, see PositionEmissions command. 
            </summary>
            <param name="vector">The position of the particles object.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.PositionEmissions(System.Single,System.Single,System.Single)">
            <summary>
            Adjusts the emissions position of a particles object. By moving the emissions 
            position of the particles object, you can create very effective visual trails. 
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.Rotate(DarkGDK.Math.Vector3)">
            <summary>
            Rotates a particles object. Rotating the particles object will rotate every particle
            currently existing as part of the particles object. To correct the behaviour of the 
            individual particles themselves, refer to the other particles object commands. 
            </summary>
            <param name="vector">The position of the particles object.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetVector3ToPosition(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the specified particles 
            position. 
            </summary>
            <param name="vector">The position of the particles object.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetVector3ToRotation(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the specified particles 
            rotation. 
            </summary>
            <param name="vector">The position of the particles object.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of new particles emitted from a particles object. By using a generally
            white image, the color you specify will show up the best from the particles. An image 
            that is not white will produce a blending of color between the image and the 
            specified color. 
            </summary>
            <param name="color">The color that will be applied to the particles.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetEmissions(System.Int32)">
            <summary>
            Sets the number of particles emitted from the particles object each cycle. A value 
            of zero will stop the particles object emitting new particles. 
            </summary>
            <param name="frequency">The frequency of emission.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetVelocity(System.Single)">
            <summary>
            Sets the velocity of particles within the particles object. This controls the velocity
            at which the particles will move once emitted, and reflect the amount of energy 
            expelled from the particles object. 
            </summary>
            <param name="velocity">The velocity of the particles.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetGravity(System.Single)">
            <summary>
            Sets the gravity of particles within the particles object. This controls the actual
            course of the particle. 
            </summary>
            <param name="gravity">
            The gravity of the particles. A negative gravity value will actually pull the
            particle upwards at a rotation of 0,0,0. A high positive gravity value will make the 
            particle very heavy. The default is a gravity value of 5. 
            </param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetSpeed(System.Single)">
            <summary>
            Sets the number of seconds that are to pass each frame within the particles object.
            This controls whether the particles move very quickly, or very slowly. 
            </summary>
            <param name="speed">
            The speed of the particles. The default seconds per frame value is 0.005. 
            </param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetChaos(System.Single)">
            <summary>
            
            </summary>
            <param name="chaos"></param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetFloor(System.Boolean)">
            <summary>
            Sets whether the particle within the particles object will hit a predetermined floor 
            at zero Y in 3D world space.
            </summary>
            <param name="hasFloor">
            If true, removes the invisible floor allowing particles to continue to exist until 
            they eventually fade. 
            </param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.SetLife(System.Int32)">
            <summary>
            Sets the life duration of particles within the particles object. This controls how
            long the particle will stay alive. 
            </summary>
            <param name="duration">
            The duration which the particles will exist. The default value of 100 keeps the
            particle alive long enough to arc, hit the floor and spark. A value smaller than 
            this will stop short this existence. 
            </param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.GhostOn(System.Int32)">
            <summary>
            ghost a particles object. Ghosted particles will appear transparent when rendered, 
            creating effects such as see-through smoke and fire. The Ghost Mode with a range of 0
            to 5 specify the type of ghosting to perform. 
            </summary>
            <param name="mode">The type of ghosting to perform.</param>
        </member>
        <member name="M:DarkGDK.Particle.Particle.GhostOff">
            <summary>
            Deactivates ghosting of a particles object. Ghosted particles will appear transparent 
            when rendered, creating effects such as see-through smoke and fire. 
            </summary>
        </member>
        <member name="P:DarkGDK.Particle.Particle.X">
            <summary>
            Gets the X position of the particles object in 3D world space. 
            </summary>
        </member>
        <member name="P:DarkGDK.Particle.Particle.Y">
            <summary>
            Gets the Y position of the particles object in 3D world space. 
            </summary>
        </member>
        <member name="P:DarkGDK.Particle.Particle.Z">
            <summary>
            Gets the Z position of the particles object in 3D world space. 
            </summary>
        </member>
        <member name="T:DarkGDK.IO.Joystick">
            <summary>
            Contais all joystick methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Joystick.FireX(System.Int32)">
            <summary>
            Gives support to read up to 32 fire buttons. 
            </summary>
            <param name="button">The button to check for.</param>
            <returns>true if button is pressed; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IO.Joystick.HatAngle(System.Int32)">
            <summary>
            Gives support for reading up to 4 HAT controllers. When the hat controller is neutral,
            a value of -1 is returned.  
            </summary>
            <param name="hat">The hat to check for.</param>
            <returns>
            When the hat is being used, the return value is in tens of a degree so north would be
            zero, east would be 900, south is 1800 and west is 2700.
            </returns>
        </member>
        <member name="M:DarkGDK.IO.Joystick.PerformChecklistControlDevices">
            <summary>
            Makes a checklist of all installed control devices. Control devices can range from a
            force-feedback joystick to head mounted displays. You can read the name of each found 
            device by reading the Checklist String after using this command. Additionally, you can
            determine whether the control device has forcefeedback capability by checking for a
            value of 1 in Checklist Value A. In general, most devices simply provide input to the
            program in a standard X, Y and Z axis format. Use Checklist to read the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Joystick.SetControlDevice(System.String)">
            <summary>
            Selects a known control device for use as the current device. You must provide the 
            name of the device. Use the PerformChecklistControlDevices to find all the names of
            currently available control devices. 
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceUp(System.Int32)">
            <summary>
            Forces the device upward with a power of magnitude specified between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceDown(System.Int32)">
            <summary>
            Forces the device downward with a power of magnitude specified between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceLeft(System.Int32)">
            <summary>
            Forces the device left with a power of magnitude specified between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceRight(System.Int32)">
            <summary>
            Forces the device right with a power of magnitude specified between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceAngle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the device in the direction specified by the angle value and at a power 
            of magnitude specified between 0 and 100.
            </summary>
            <param name="magnitude">Force power.</param>
            <param name="angle">The angle value.</param>
            <param name="duration">
            Specifies how many milliseconds to sustain the effect of force. A duration value of 
            zero indicates an infinite effect of force.
            </param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceNoEffect">
            <summary>
            Forces the device to halt the effect of any forces. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceWaterEffect(System.Int32,System.Int32)">
            <summary>
            Forces the device to simulate the effect of moving through water. The force applied 
            to any joystick movement will simulate a dampening effect when fast movements are
            attempted by the user. 
            </summary>
            <param name="magnitude">Force power.</param>
            <param name="duration">
            Specifies how many milliseconds to sustain the effect of force. A duration value of 
            zero indicates an infinite effect of force.
            </param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceShoot(System.Int32,System.Int32)">
            <summary>
            Forces the device to recoil like a discharging pistol at a power of magnitude
            specified between 0 and 100.
            </summary>
            <param name="magnitude">Force power.</param>
            <param name="duration">
            Specifies how many milliseconds to sustain the effect of force. A duration value of 
            zero indicates an infinite effect of force.
            </param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceChainsaw(System.Int32,System.Int32)">
            <summary>
            Forces the device to rattle like a chainsaw at a power of magnitude specified 
            between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
            <param name="duration">
            Specifies how many milliseconds to sustain the effect of force. A duration value of 
            zero indicates an infinite effect of force.
            </param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceImpact(System.Int32,System.Int32)">
            <summary>
            Forces the device to shudder at a power of magnitude specified between 0 and 100. 
            </summary>
            <param name="magnitude">Force power.</param>
            <param name="duration">
            Specifies how many milliseconds to sustain the effect of force. A duration value of 
            zero indicates an infinite effect of force.
            </param>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceAutoCenterOn">
            <summary>
            Forces the device to pull to a central position as though connected by springs. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Joystick.ForceAutoCenterOff">
            <summary>
            Deactivates any effect of force that has been created with the ForceAutoCenterOn method. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Up">
            <summary>
            Returns true if joystick is pushed up; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Down">
            <summary>
            Returns true if joystick is pushed down; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Left">
            <summary>
            Returns true if joystick is pushed left; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Right">
            <summary>
            Returns true if joystick is pushed right; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.X">
            <summary>
            Gets the X axis value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Y">
            <summary>
            Gets the Y axis value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.Z">
            <summary>
            Gets the Z axis value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.FireA">
            <summary>
            Returns true if the default joystick button A is pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.FireB">
            <summary>
            Returns true if the default joystick button B is pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.FireC">
            <summary>
            Returns true if the default joystick button C is pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.FireD">
            <summary>
            Returns true if the default joystick button D is pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.SliderA">
            <summary>
            Gets the Slider A value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.SliderB">
            <summary>
            Gets the Slider B value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.SliderC">
            <summary>
            Gets the Slider C value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.SliderD">
            <summary>
            Gets the Slider D value of the default analogue joystick. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.TwistX">
            <summary>
            Gets the default joystick X twist.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.TwistY">
            <summary>
            Gets the default joystick Y twist.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.TwistZ">
            <summary>
            Gets the default joystick Z twist.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.ControlDeviceName">
            <summary>
            Gets the name of the current control device. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.ControlDeviceX">
            <summary>
            Gets the X axis value of the current control device. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.ControlDeviceY">
            <summary>
            Gets the Y axis value of the current control device. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Joystick.ControlDeviceZ">
            <summary>
            Gets the Z axis value of the current control device. 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic2D.AnimatedSprite">
            <summary>
            Represents an animated sprite.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic2D.Sprite">
            <summary>
            Represents a sprite.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Sprite.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Sprite.spriteDictionary">
            <summary>
            Sprite Dictionary.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="F:DarkGDK.Basic2D.Sprite._image">
            <summary>
            The Image associated with the sprite.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.#ctor(System.Int32,System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Creates an sprite from a Image the position and the image of the specified sprite. 
            Providing the position of the sprite is in the screen area, you will see your sprite
            displayed. 
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
            <param name="image">The image to use for the sprite.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Set(System.Boolean,System.Boolean)">
            <summary>
            Sets whether the specified sprite restores its background and whether background 
            transparency is ignored. If the backsave state is set to true, the sprite will not 
            restore its background and leave a trail as it moves. If the transparency state is set 
            to false, the sprite will not treat black as a transparent color. A transparent color 
            in the sprite image does not write to the screen. If this feature is disabled, the sprite
            would appear as though drawn inside a black rectangle where transparency had previously 
            been used. Both states are set to one as these are the most common settings. If you set 
            the backsave state to false, it is your responsibility to clear or paste the background
            each time the sprite is moved or animated. 
            </summary>
            <param name="backSave">Backsave state.</param>
            <param name="transparency">Transparency.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Delete">
            <summary>
            Deletes the sprite from memory and frees the ID. Deleting unused sprites increases system 
            performance.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Clone">
            <summary>
            Creates a clone of the sprite. A cloned sprite shares all the settings of the original 
            sprite, and once created can be modified as a sprite in its own right. 
            </summary>
            <returns>A new sprite based on this one.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Move(System.Single)">
            <summary>
            Moves the sprite a specified distance. Used in combination with the Sprite.Rotate
            command a very simple top-down player character can be achieved very easily. 
            </summary>
            <param name="distance">The distance to move the sprite.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Offset(System.Int32,System.Int32)">
            <summary>
            Shifts the position of the drawn image without affecting the coordinate of the specified 
            sprite. You can use this command to change the visible sprite in relation to the 
            coordinates you use to position it. 
            </summary>
            <param name="x">X offset.</param>
            <param name="y">Y offset.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Scale(System.Int32)">
            <summary>
            Expands or shrinks the sprite according to the scale value provided. If the scale value 
            is zero, the sprite will disappear. If the scale value is 100, the sprite will be set to 
            its original size. If the scale value is set to 200, the size of the sprite will double. 
            </summary>
            <param name="scale">Scale value.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Size(System.Int32,System.Int32)">
            <summary>
            Expands or shrinks the sprite according to the size values provided. You must specify 
            both a horizontal and vertical size when resizing sprites. The size values must be
            greater than zero or the command will fail. 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Stretch(System.Int32,System.Int32)">
            <summary>
            Expands or shrinks the sprite according to the scale values provided. If the scale value 
            is zero, the sprite will disappear. If the scale value is 100, the sprite will be set to 
            its original size. If the scale value is set to 200, the size of the sprite will double.
            You must specify both a horizontal and vertical scale when stretching sprites. 
            </summary>
            <param name="x">Horizontal scale.</param>
            <param name="y">Vertical scale.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Paste(System.Int32,System.Int32)">
            <summary>
            Pastes the sprite image to the screen, at the specified coordinates. The sprite image 
            pasted to the screen is identical to the current state of the sprite, taking into 
            account scaling, flipping and mirroring. 
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Paste">
            <summary>
            Pastes the sprite image to the screen, based on the sprite's current position. The sprite image 
            pasted to the screen is identical to the current state of the sprite, taking into 
            account scaling, flipping and mirroring. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.SetTextureCoordinates(System.Int32,System.Single,System.Single)">
            <summary>
            Modifies the internal UV data of the specified sprite. You can manipulate each vertex 
            of the sprite by specifying a vertex index from 0 to 3. The u and v specify a value 
            typically from 0.0 to 1.0. 
            </summary>
            <param name="vertex">Vertex index.</param>
            <param name="u">U value.</param>
            <param name="v">V value.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Hit">
            <summary>
            Checks if the the sprite has impacted against any sprite.
            </summary>
            <returns>A Sprite that it may have impacted with; otherwise, null.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Hit(DarkGDK.Basic2D.Sprite)">
            <summary>
            Checks if the the sprite has impacted against the target sprite specified.
            </summary>
            <param name="sprite">The sprite to check against.</param>
            <returns>true if has impacted; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Collision">
            <summary>
            Checks if the the sprite is overlapping any sprite.
            </summary>
            <returns>A Sprite that it may have overllaped; otherwise, null.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Collision(DarkGDK.Basic2D.Sprite)">
            <summary>
            Checks if the the sprite is overlapping the target sprite specified.
            </summary>
            <param name="sprite">The sprite to check against.</param>
            <returns>true if has overlapped; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Position(System.Int32,System.Int32)">
            <summary>
            Positions the sprite on the screen.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.SetPriority(System.Int32)">
            <summary>
            Sets the relative priority of the specified sprite. All sprites start with a value of 
            zero giving them equal chance of being drawn last. By setting a single sprite a value of
            one will cause that sprite to be drawn last. You can specify a unique priority value for 
            each sprite creating an order of drawing for every sprite in your program. 
            </summary>
            <param name="priority">Sprite priority.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.Exists">
            <summary>
            Determines whether this sprite exists
            </summary>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.ShowAll">
            <summary>
            Shows all sprites that are currently hidden.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Sprite.HideAll">
            <summary>
            Hides all sprites that are currently visible.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.X">
            <summary>
            Returns the Horizontal position.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Y">
            <summary>
            Returns the Vertical position.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.OffsetX">
            <summary>
            Returns the current amount of Horizontal shift applied to the sprite. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.OffsetY">
            <summary>
            Returns the current amount of Vertical shift applied to the sprite. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.ScaleX">
            <summary>
            Returns the value of the sprite's horizontal scale. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.ScaleY">
            <summary>
            Returns the value of the sprite's vertical scale.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Width">
            <summary>
            Returns the width of the sprite determined by the width of the current image being used. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Height">
            <summary>
            Returns the height of the sprite determined by the width of the current image being used.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Image">
            <summary>
            Gets or sets the image used by the sprite. You can manipulate which image the sprite uses 
            by specifying an existing Image for the sprite.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Flipped">
            <summary>
            Gets or sets flipped state of the sprite. By setting to true, it vertically flips the 
            visible image of the sprite. The image itself is untouched, but the specified sprite 
            will be drawn upside down. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Mirrored">
            <summary>
            Gets or sets mirrored state of the sprite. By setting to true, it mirrors flips the 
            visible image of the sprite horizontally. The image itself is untouched, but the 
            specified sprite will be drawn in reverse. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.RotationAngle">
            <summary>
            Gets or sets the angle of rotation of the sprite. You can rotate the sprite around 360
            degrees specified using the Angle Value using a range of 0 to 359. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Alpha">
            <summary>
            Gets or sets the alpha value of the sprite. The alpha controls how much of the sprite 
            is present on screen and is used to create a translucent sprite. The Alpha value range
            is 0 to 255, with 255 being completely solid and 0 being invisible. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Diffuse">
            <summary>
            Gets of sets the diffuse values of the specified sprite. The diffuse values controls 
            the quantity of color the sprite uses from each RGB component. The value ranges are 0 
            to 255, with 255 being completely full and 0 being no color use. If you only specified 
            a value in the Red component, the sprite would appear a shade of red. Same goes for the
            other colors, and combinations of color. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Sprite.Visible">
            <summary>
            Gets or sets the visibility of the sprite.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.AnimatedSprite.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates an animated sprite. The command automatically builds a sequence of animation
            frames from an image file by cutting up the image into a grid specified by the width and 
            height values. Use the Sprite.Play method to see the individual frames of this image. 
            </summary>
            <param name="fileName">The file to be loaded from.</param>
            <param name="width">Width of each individual frame.</param>
            <param name="height">Height of each individual frame.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.AnimatedSprite.#ctor(DarkGDK.ResourceAssembly,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a Animated Sprite from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>  
            <param name="width">Width of each individual frame.</param>
            <param name="height">Height of each individual frame.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.AnimatedSprite.Play(System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays an animated sprite. The command defines the start and end frames to be played. 
            These frames must have been previously set up by creating an animated sprite command. 
            </summary>
            <param name="start">The starting frame.</param>
            <param name="end">The ending frame.</param>
            <param name="delay">
            Specifies the delay factor between animating frames. A low value is fast, a high value 
            is slow. 
            </param>
        </member>
        <member name="P:DarkGDK.Basic2D.AnimatedSprite.Frame">
            <summary>
            Gets or sets the frame of the Animated Sprite.
            </summary>
        </member>
        <member name="T:DarkGDK.Animation.Animation">
            <summary>
            Represents a media loaded from  MPEG, AVI, Quicktime, WAV, AIFF, AU or SND format.
            </summary>
        </member>
        <member name="F:DarkGDK.Animation.Animation.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Animation.Animation.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.#ctor(System.String)">
            <summary>
            Loads an animation file. The animation file must be of the MPEG, AVI, Quicktime, WAV, 
            AIFF, AU or SND format.
            </summary>
            <param name="fileName">The animation file</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads an Animation from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Animation.Animation.Delete">
            <summary>
            This command deletes the animation previously loaded and frees the ID. Deleting 
            animations when you have finished with them improves system performance. If the 
            animation is not stopped before the animation is deleted, the current frame of the 
            animation remains on the screen or bitmap. 
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Play">
            <summary>
            Plays the animation on the screen or to the current Bitmap.  
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Play(System.Int32,System.Int32)">
            <summary>
            Plays the animation on the screen or to the current Bitmap.
            </summary>
            <param name="top">Horizontal position.</param>
            <param name="left">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Play(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays the animation on the screen or to the current Bitmap.
            </summary>
            <param name="top">Horizontal position.</param>
            <param name="left">Vertical position.</param>
            <param name="width">Animation width.</param>
            <param name="height">Animation height.</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Play(DarkGDK.Basic2D.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays the animation on the specified Bitmap. 
            </summary>
            <param name="bitmap">Bitmap to draw on.</param>
            <param name="top">Vertical start position.</param>
            <param name="left">Horizontal start position.</param>
            <param name="right">Horizontal end position.</param>
            <param name="bottom">Vertical end position.</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Play(DarkGDK.Basic2D.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Plays the animation on the specified Image. 
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="top">Vertical start position.</param>
            <param name="left">Horizontal start position.</param>
            <param name="right">Horizontal end position.</param>
            <param name="bottom">Vertical end position.</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Loop">
            <summary>
            Plays the  animation on the screen or to the current bitmap, and repeats the 
            animation continuously.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Loop(DarkGDK.Basic2D.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays the  animation on the specified Bitmap, and repeats the animation continuously.
            </summary>
            <param name="bitmap">Bitmap to draw on.</param>
            <param name="top">Vertical start position.</param>
            <param name="left">Horizontal start position.</param>
            <param name="right">Horizontal end position.</param>
            <param name="bottom">Vertical end position.</param>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Stop">
            <summary>
            Stops the animation if it is playing.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Pause">
            <summary>
            Pauses the animation if it is playing.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Resume">
            <summary>
            Resumes the animation if it is currently paused. 
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.Animation.Place(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Redefines the drawing area of the loaded animation. Using this command, animations can 
            be stretched, shrunk or moved across the screen even while the animation is playing. 
            </summary>
            <param name="top">Vertical start position.</param>
            <param name="left">Horizontal start position.</param>
            <param name="right">Horizontal end position.</param>
            <param name="bottom">Vertical end position.</param>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Width">
            <summary>
            Returns the current width of the animation. If you have resized the animation when 
            playing or placing then the width of the modified animation will be returned.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Height">
            <summary>
            Returns the current height of the animation. If you have resized the animation when 
            playing or placing then the height of the modified animation will be returned. 
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Playing">
            <summary>
            Returns true if the animation is playing; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Looping">
            <summary>
            Returns true if the animation is looping; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Paused">
            <summary>
            Returns true if the animation is paused; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.PositionX">
            <summary>
            Returns the leftmost position of the specified animation via its X coordinate.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.PositionY">
            <summary>
            Returns the topmost position of the specified animation via its X coordinate.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Volume">
            <summary>
            Gets or sets the animation volume.
            </summary>
        </member>
        <member name="P:DarkGDK.Animation.Animation.Speed">
            <summary>
            Gets or sets the animation speed.
            </summary>
        </member>
        <member name="T:DarkGDK.World.Terrain">
            <summary>
            Represents a HeightMap Terrain.
            </summary>
        </member>
        <member name="F:DarkGDK.World.Terrain.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.World.Terrain.#ctor">
            <summary>
            Creates a new, blank terrain object. The terrain will not be visible until it has been 
            built using the Terrain.Build command.
            </summary>
        </member>
        <member name="M:DarkGDK.World.Terrain.#ctor(System.String)">
            <summary>
            Loads a terrain file. The default extension for terrains is ".DBT".
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DarkGDK.World.Terrain.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Terrain from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.World.Terrain.Save(System.String)">
            <summary>
            Saves the terrain to a file. The default extension for terrains is ".DBT".
            </summary>
            <param name="fileName">Terrain filename</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.Build">
            <summary>
            Builds a terrain object. It is only when this command is called that a terrain will
            be visible on screen.
            </summary>
        </member>
        <member name="M:DarkGDK.World.Terrain.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Sets the scale of the terrain.
            </summary>
            <param name="x">X Scale</param>
            <param name="y">Y Scale</param>
            <param name="z">Z Scale</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.Split(System.Int32)">
            <summary>
            Sets the split value of the terrain. This determines how many meshes will be created 
            from the heightmap. As an example if you specify 8 for the split value then the terrain 
            will be divided up into a grid of 8 x 8 thus creating 64 meshes. Altering this value
            can help to improve the frame rate e.g. for slower computers a higher value will result 
            in smaller batches of polygons being drawn. This could help to gain a better frame rate.
            </summary>
            <param name="split">Split value</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.Tile(System.Int32)">
            <summary>
            This controls how detail textures are tiled across the terrain. A setting of 1 will make
            it so that the detail texture fits onto each quad on the terrain. Higher values will 
            stretch the detail texture over large patches of quads.
            </summary>
            <param name="tile">Number of patches of quads.</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.HeightMap(System.String)">
            <summary>
            Sets the heightmap that will be used when the terrain is built. Note that heightmaps 
            must be 256 color or more.
            </summary>
            <param name="fileName">The HeightMap filename.</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.Texture(DarkGDK.Basic2D.Image,DarkGDK.Basic2D.Image)">
            <summary>
            Sets the textures to be used on the terrain.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="detailImage">The detail image.</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.Light(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the  properties of the terrain. The direction of the light is set by the 
            parameters XDir, YDir and ZDir. The color of the light is controlled by the parameters 
            Red, Green and Blue. These parameters must be passed in as floats. Setting them to 1.0, 
            1.0, 1.0 will result in a bright white light whereas a value of 0.0, 0.0, 0.0 will 
            provide a black light. The Scale paramter controls the intensity of the shadowing. 
            Again this is a floating point value. A value of 0.0 will provide a very dark shadow on 
            the terrain. A value of 1.0 will provide a very light shadow.
            </summary>
            <param name="x">X Direction.</param>
            <param name="y">Y Direction.</param>
            <param name="z">Z Direction.</param>
            <param name="red">Ammount of red .</param>
            <param name="green">Ammount of green .</param>
            <param name="blue">Ammount of blue .</param>
            <param name="scale">The intensity of the shadowing.</param>
        </member>
        <member name="M:DarkGDK.World.Terrain.HeightAt(System.Single,System.Single)">
            <summary>
            Returns the height of the terrain at the given X and Z coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="z">Z coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.World.Terrain.Update">
            <summary>
            Forces the Terrain engine to update it's internal data
            </summary>
        </member>
        <member name="P:DarkGDK.World.Terrain.Width">
            <summary>
            Returns the width size of the terrain.
            </summary>
        </member>
        <member name="P:DarkGDK.World.Terrain.Height">
            <summary>
            Returns the height size of the terrain.
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.Sound">
            <summary>
            Represents a Sound object.
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.SoundBase">
            <summary>
            The base class for all Sound classes.
            </summary>
        </member>
        <member name="F:DarkGDK.Audio.SoundBase.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Delete">
            <summary>
            Deletes the sound and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Play">
            <summary>
            Plays the sound.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Play(System.Int32)">
            <summary>
            Plays the sound from the offset.
            </summary>
            <param name="offset">
            Specify a start position in bytes that skips the initial part of the sample to be 
            played.
            </param>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Loop">
            <summary>
            Loops the sound continuously.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Loop(System.Int32)">
            <summary>
            Loops the sound continuously.
            </summary>
            <param name="start">The starting position.</param>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Loop(System.Int32,System.Int32)">
            <summary>
            Loops the sound continuously.
            </summary>
            <param name="start">The starting position.</param>
            <param name="end">The ending position.</param>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Loop(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loops the sound continuously.
            </summary>
            <param name="start">The starting position.</param>
            <param name="end">The ending position.</param>
            <param name="initialPos">
            The initial position in bytes that a looping sound will use as it plays.
            </param>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Stop">
            <summary>
            Stops the sound.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Pause">
            <summary>
            Pauses the sound.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.SoundBase.Resume">
            <summary>
            Resumes the sound if it is currently paused.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.SoundBase.Playing">
            <summary>
            Returns true it the sound is currently playing.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.SoundBase.Looping">
            <summary>
            Returns true it the sound is currently Looping.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.SoundBase.Paused">
            <summary>
            Returns true it the sound is currently Paused.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.SoundBase.Speed">
            <summary>
            Gets or sets the frequency used by the sound. Decibel frequency ranges from 100 
            to 100,000.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.SoundBase.Volume">
            <summary>
            Gets or sets the volume of the sound.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Sound.#ctor">
            <summary>
            Calls the base constructor to get a new ID. Available to use from inherited classes.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Sound.#ctor(System.String)">
            <summary>
            Loads a WAV sound file.To load other sound formats, use Music or in extreme
            cases Animation.
            </summary>
            <param name="fileName">The WAV file to load.</param>
        </member>
        <member name="M:DarkGDK.Audio.Sound.#ctor(System.String,System.Int32)">
            <summary>
            Loads a WAV sound file.To load other sound formats, use Music or in extreme
            cases Animation.
            </summary>
            <param name="fileName">The WAV file to load.</param>
            <param name="flags">Not documented, even on DBPro</param>
        </member>
        <member name="M:DarkGDK.Audio.Sound.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Sound from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>          
        </member>
        <member name="M:DarkGDK.Audio.Sound.Clone">
            <summary>
            Creates a new Sound by cloning this one. Cloning a sound will create a new
            sound that can be played like any other loaded sound, but uses the same WAV data 
            of the original sound. The advantage of sound cloning is that one hundred sounds 
            could be used with only a single instance of the sound data stored in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Audio.Sound.#ctor(DarkGDK.ResourceAssembly,System.String,System.Int32)">
            <summary>
            Loads a Sound from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>      
            <param name="flags">Load flags</param>          
        </member>
        <member name="P:DarkGDK.Audio.Sound.Pan">
            <summary>
            Gets or sets the pan of the sound between the left and right speakers. 
            A negative value will move the sound to the left speaker, a positive value will
            move it to the right. Sound panning does not work with 3D sounds. The pan value must
            be an integer value between -10,000 and 10,000. 
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.Music">
            <summary>
            Represents a Music Object.
            </summary>
        </member>
        <member name="F:DarkGDK.Audio.Music.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Audio.Music.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.#ctor(System.String)">
            <summary>
            Loads a music file. 
            </summary>
            <param name="fileName">The music file. It must be of the MIDI or MP3 format.</param>
        </member>
        <member name="M:DarkGDK.Audio.Music.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Music from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Audio.Music.Delete">
            <summary>
            Deletes the specified music previously loaded and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Play">
            <summary>
            Plays the music.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Loop">
            <summary>
            Loops the music continuously.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Stop">
            <summary>
            Stops the music.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Pause">
            <summary>
            Pauses the music.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Music.Resume">
            <summary>
            Resumes the music if it is currently paused. 
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Music.Playing">
            <summary>
            Returns true if the music is currently playing; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Music.Looping">
            <summary>
            Returns true if the music is currently looping; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Music.Paused">
            <summary>
            Returns true if the music is currently paused; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Music.Speed">
            <summary>
            Gets or sets the speed at which the music is playing. The default value is 100, 
            as a percentage of the standard rate. A value of 50 means the music is playing 
            at half the normal speed. 
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Music.Volume">
            <summary>
            Gets or sets the volume at which the music is playing. The default value is 100, 
            as a percentage of the standard rate. A value of 50 means the music is playing 
            at half the normal volume. 
            </summary>
        </member>
        <member name="T:DarkGDK.Particle.FireParticle">
            <summary>
            Represents a particle object that acts like fire.
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.FireParticle.#ctor(DarkGDK.Basic2D.Image,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a particles object and set it to act like fire particles. The area specified 
            by the position and size is identical to that of a box created with the same 
            dimensions. 
            </summary>
            <param name="image">The image of the particles.</param>
            <param name="maximum">Maximum number of particles.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
            <param name="width">Widht of the particles.</param>
            <param name="height">Height of the particles.</param>
            <param name="depth">Depth of the particles.</param>
        </member>
        <member name="T:DarkGDK.Display">
            <summary>
            Contains all Display methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.CheckDisplayMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the display mode is available.
            </summary>
            <param name="width">The display width.</param>
            <param name="height">The display height.</param>
            <param name="depth">The display depth.</param>
            <returns>true if the mode is available; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Display.PerformChecklistForDisplayModes">
            <summary>
            Scans your system and make a checklist of all display modes your video card can
            handle. Use the Checklist class to access the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.Display.SetDisplayMode(System.Int32,System.Int32)">
            <summary>
            Sets the display mode to the specified dimensions.
            </summary>
            <param name="width">The display width.</param>
            <param name="height">The display height.</param>
        </member>
        <member name="M:DarkGDK.Display.SetDisplayMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the display mode to the specified dimensions.
            </summary>
            <param name="width">The display width.</param>
            <param name="height">The display height.</param>
            <param name="depth">The display depth.</param>
        </member>
        <member name="M:DarkGDK.Display.SetDisplayMode(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the display mode to the specified dimensions.
            </summary>
            <param name="width">The display width.</param>
            <param name="height">The display height.</param>
            <param name="depth">The display depth.</param>
            <param name="forceVSync">Specifies if it shoud force Vertical Sync.</param>
        </member>
        <member name="M:DarkGDK.Display.PeformChecklistForGraphicsCards">
            <summary>
            Makes a checklist of all installed display cards. Some system have more than one 3D
            accelerator installed and often provide different feature sets and levels of 
            performance. Use the Checklist class to access the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.Display.SetGraphicsCard(System.String)">
            <summary>
            Sets the current display card as described by the name provided. The display card 
            name can be found by performing a PeformChecklistForGraphicsCards
            </summary>
            <param name="graphicsCardName">The Graphics Card name.</param>
        </member>
        <member name="M:DarkGDK.Display.SetEmulationOff">
            <summary>
            Sets graphics emulation off.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.SetEmulationOn">
            <summary>
            Sets graphics emulation on.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.LockBackbuffer">
            <summary>
            Locks the backbuffer and stores the backbuffer details for direct access. The 
            backbuffer is the actual screen you see each refresh and this command allows you
            to use the pointer and other essential data for screen modification. Locking the
            backbuffer prevents other activities to be performed to the backbuffer, so it is 
            essential you unlock the backbuffer when you have finished. 
            </summary>
        </member>
        <member name="M:DarkGDK.Display.UnlockBackbuffer">
            <summary>
            Unlocks the backbuffer and frees the system to continue as normal. The backbuffer 
            is the actual screen you see each refresh. Locking the backbuffer prevents other 
            activities to be performed regarding the backbuffer so it is essential you unlock
            the backbuffer when you have finished. 
            </summary>
        </member>
        <member name="M:DarkGDK.Display.HideWindow">
            <summary>
            Hides the window but keep the application active.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.MaximizeWindow">
            <summary>
            Maximizes the window to the entire desktop.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.MinimizeWindow">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.RestoreWindow">
            <summary>
            Restores the window to the original size and position.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.ShowWindow">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.SetWindowLayout(DarkGDK.WindowStyle,System.Boolean,System.Boolean)">
            <summary>
            Sets basic window properties. 
            </summary>
            <param name="style">The windows layout style.</param>
            <param name="showTitlebar">If set to false, hides the titlebar.</param>
            <param name="windowsIcon">If set to true, reverts to the standard Windows application 
            icon.</param>
        </member>
        <member name="F:DarkGDK.Display._fullScreen">
            <summary>
            Internal fullscreen state holder.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.SetWindowPosition(System.Int32,System.Int32)">
            <summary>
            Sets the window's position.
            </summary>
            <param name="x">Horizontal position.</param>
            <param name="y">Vertical position.</param>
        </member>
        <member name="M:DarkGDK.Display.SetWindowSize(System.Int32,System.Int32)">
            <summary>
            Sets the window's size.
            </summary>
            <param name="width">The window width.</param>
            <param name="height">The window height.</param>
        </member>
        <member name="M:DarkGDK.Display.SetGamma(System.Drawing.Color)">
            <summary>
            Sets the screens red, green and blue gamma levels. You can change the gamma to fade
            in and out the contents of the screen or alter the ratio of colors displayed. The 
            red, green and blue component values can range from 0 to 511, with 255 being the 
            default values. Reducing these values fades each color component out of the screen, 
            and above the default value enhances the ratio of the component color. Some graphics
            cards do not support gamma alteration. 
            </summary>
            <param name="color">The collection of color to set the gamma to.</param>
        </member>
        <member name="M:DarkGDK.Display.DisplayOnPictureBox(System.Windows.Forms.PictureBox)">
            <summary>
            Sets DGDK.NET to display on a picture box.
            </summary>
            <param name="pictureBox">The picture box that will be used as a viewport.</param>
        </member>
        <member name="M:DarkGDK.Display.WindowToBack">
            <summary>
            Moves the DGDK.NET window to the back of the Window List.  This effectively
            causes the Window to be moved to the back of all other Windows on the screen.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.WindowToFront">
            <summary>
            Moves the DGDK.NET window to the front of the Window List.  This effectively
            causes the Window to be moved to the front of all other Windows on the screen.
            </summary>
        </member>
        <member name="M:DarkGDK.Display.WindowExist(System.String)">
            <summary>
            Returns True or False on whether the specified Window exists with the
            provided Window title
            </summary>
            <param name="sWindowTitle"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Display.DesktopWidth">
            <summary>
            Returns the Windows Desktop width in pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Display.DesktopHeight">
            <summary>
            Returns the Windows Desktop height in pixels
            </summary>
            <returns></returns>
        </member>
        <member name="P:DarkGDK.Display.CurrentGraphicsCard">
            <summary>
            Gets the name of the current display card being used by the system.
            </summary>
        </member>
        <member name="P:DarkGDK.Display.BackbufferDepth">
            <summary>
            Gets the depth of the backbuffer. You can only use this property when you have 
            used the LockBackBuffer method. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.BackbufferHeight">
            <summary>
            Gets the height of the backbuffer. You can only use this property when you have 
            used the LockBackBuffer method. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.BackbufferWidth">
            <summary>
            Gets the width of the backbuffer. You can only use this property when you have 
            used the LockBackBuffer method. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.BackbufferPitch">
            <summary>
            Gets the pitch of the backbuffer. The pitch is similar to the width of the 
            backbuffer, and may be larger should the backbuffer use a cache at the end of 
            each horizontal line. You can only use this property when you have 
            used the LockBackBuffer method. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.BackbufferPointer">
            <summary>
            Gets the pointer of the backbuffer. You can only use this property when you have 
            used the LockBackBuffer method. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.FullScreen">
            <summary>
            Gets or sets the fullscreen state of the application.
            </summary>
        </member>
        <member name="P:DarkGDK.Display.WindowTitle">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:DarkGDK.Display.ScreenDepth">
            <summary>
            Gets the screen depth. The depth value indicates the number of bits used to make
            up a color for the screen and therefore reveal how many colors in total can be 
            used by the screen. A value of 16 indicates it is a 16-bit screen and uses 32000 
            colors, whereas a 32-bit screen uses 16 million colors. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.ScreenFPS">
            <summary>
            Gets the current frames per second to measure how many times the screen is 
            refreshed each second. The value returned is measured in units of 1/1000th of 
            a second. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.ScreenHeight">
            <summary>
            Gets the screen height.
            </summary>
        </member>
        <member name="P:DarkGDK.Display.ScreenInvalid">
            <summary>
            Returns true if the application has been switched out and back in.
            </summary>
        </member>
        <member name="P:DarkGDK.Display.IsHardwareAccelerated">
            <summary>
            Returns true if the screen is hardware accelerated. 
            </summary>
        </member>
        <member name="P:DarkGDK.Display.ScreenWidth">
            <summary>
            Gets the screen width.
            </summary>
        </member>
        <member name="T:DarkGDK.WindowStyle">
            <summary>
            Represents the window layout style.
            </summary>
        </member>
        <member name="F:DarkGDK.WindowStyle.Default">
            <summary>
            The window is created with titlebar, minimise and close icons and an icon
            </summary>
        </member>
        <member name="F:DarkGDK.WindowStyle.NoMinimize">
            <summary>
            Hides the minimize button.
            </summary>
        </member>
        <member name="F:DarkGDK.WindowStyle.NotResizible">
            <summary>
            Hides the resizable window border.
            </summary>
        </member>
        <member name="F:DarkGDK.WindowStyle.NoMaximize">
            <summary>
            Hides the maximize button.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.VertexShader">
            <summary>
            Represents a Vertex Shader object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.VertexShader.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.#ctor(System.String)">
            <summary>
            Creates a vertex shader from a specified text file. Use this command in concert with 
            other vertex shader commands to create a special effect on a 3D object. Vertex shaders
            are powerful programmable effects, and not all 3D devices support them. Make sure that
            your shader text file includes the minimum amount of information with your code in
            order that assembly can take place. Ensure you are using the correct versioning label
            and that the input vertex data format is specified. An example of this syntax might be 
            'vs.1.0 dcl_position v0 dcl_normal v3 dcl_color v6 dcl_texcoord0 v7'. 
            </summary>
            <param name="fileName">The file to load the effect from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Vertex Shader from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.Delete">
            <summary>
            Deletes the shader and frees the ID.Delete shaders when you have no further use for 
            them to save a small amount of memory. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetOn(DarkGDK.Basic3D.Object3D)">
            <summary>
            Assign the shader to the specified object.
            </summary>
            <param name="Object">The object to apply the shader to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetOff(DarkGDK.Basic3D.Object3D)">
            <summary>
            Removes the object from influence of the shader.
            </summary>
            <param name="Object">The object to apply the shader to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetVector(System.UInt32,DarkGDK.Math.Vector4,System.UInt32)">
            <summary>
            Selectes the vector to be used by the specified vertex shader. 
            </summary>
            <param name="register">The register.</param>
            <param name="vector">The vector.</param>
            <param name="constantCount">The constant count.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetMatrix(System.UInt32,DarkGDK.Math.Matrix4,System.UInt32)">
            <summary>
            Selectes the matrix to be used by the specified vertex shader. 
            </summary>
            <param name="register">The register.</param>
            <param name="matrix">The vector.</param>
            <param name="constantCount">The constant count.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetStream(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the vertex shader stream.
            </summary>
            <param name="streamPos">The stream position.</param>
            <param name="data">The data.</param>
            <param name="dataType">The data type.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexShader.SetStreamCount(System.Int32)">
            <summary>
            Sets the vertex shader stream count.
            </summary>
            <param name="count">The new count value.</param>
        </member>
        <member name="T:DarkGDK.Basic2D.ScreenBitmap">
            <summary>
            Represents the screen bitmap, where it's possible to draw on.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic2D.BitmapBase">
            <summary>
            Base class that Bitmap classes should inherit from.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.Load(System.String)">
            <summary>
            Loads a picture file to the screen. The picture file must be of the BMP, JPG, TGA, DDS, 
            DIB or PNG format. 
            </summary>
            <param name="fileName">Picture FileName.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.SetCurrent">
            <summary>
            Sets all drawing operations to screen.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.CopyTo(DarkGDK.Basic2D.Bitmap)">
            <summary>
            Copies the contents of this bitmap into another bitmap providing the destination bitmap 
            is not smaller than the first. 
            </summary>
            <param name="destination">Bitmap to copy this to.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.CopyTo(System.Int32,System.Int32,System.Int32,System.Int32,DarkGDK.Basic2D.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the bitmap into another bitmap providing the destination bitmap 
            is not smaller than the first.  You should specify a source area to be copied from and 
            a destination area to be copied to within each bitmap. If the size of the two areas 
            differ, the source data will be rescaled to fit in the destination area. 
            </summary>
            <param name="sourceLeft">Source bitmap leftmost position.</param>
            <param name="sourceTop">Source bitmap topmost position.</param>
            <param name="sourceRight">Source bitmap rightmost position.</param>
            <param name="sourceBottom">Source bitmap bottommost position.</param>
            <param name="destination">Bitmap to copy this to.</param>
            <param name="destLeft">Destination bitmap leftmost position.</param>
            <param name="destTop">Destination bitmap Bitmap to copy this to. position.</param>
            <param name="destRight">Destination bitmap rightmost position.</param>
            <param name="destBottom">Destination bitmap bottommost position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.CopyFrom(DarkGDK.Basic2D.Bitmap)">
            <summary>
            Copies the contents of the specified bitmap to the screen.
            </summary>
            <param name="bitmap">Bitmat to copy from.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.CopyFrom(DarkGDK.Basic2D.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the contents of specified the bitmap to the screen. You should specify a source area to be 
            copied from and a destination area to be copied to within each bitmap. If the size of 
            the two areas differ, the source data will be rescaled to fit in the destination area. 
            </summary>
            <param name="bitmap">Bitmat to copy from.</param>
            <param name="sourceLeft">Source bitmap leftmost position.</param>
            <param name="sourceTop">Source bitmap topmost position.</param>
            <param name="sourceRight">Source bitmap rightmost position.</param>
            <param name="sourceBottom">Source bitmap bottommost position.</param>
            <param name="destLeft">Destination bitmap leftmost position.</param>
            <param name="destTop">Destination bitmap Bitmap to copy this to. position.</param>
            <param name="destRight">Destination bitmap rightmost position.</param>
            <param name="destBottom">Destination bitmap bottommost position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.Fade(System.Int32)">
            <summary>
            Fades the contents of the Bitmap. Fade operations are slow and the completion 
            time depends on the size of the bitmap. 
            </summary>
            <param name="transparency">
            Set the level of fading from zero which fades the bitmap completely to black, 
            up to 100 which does not fade the bitmap at all.
            </param>
        </member>
        <member name="M:DarkGDK.Basic2D.ScreenBitmap.Blur(System.Int32)">
            <summary>
            Blurs the contents of the Bitmap. The greater the intensity of blurring, the longer it takes to perform.
            The time it takes to blur a bitmap is also dependent on the size of the bitmap. 
            </summary>
            <param name="blurLevel">
            You must specify a blur value from 1 to 6 to provide the intensity of the blurring. 
            A blur value of 1 will perform mild blurring, up to a value of 6 that causes severe 
            blurring. </param>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Id">
            <summary>
            Gets the ID of the class.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Width">
            <summary>
            Returns the Bitmap width.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Height">
            <summary>
            Returns the Bitmap height.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Depth">
            <summary>
            Returns the Bitmap depth.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Mirrored">
            <summary>
            Gets or sets mirrored state of the Bitmap. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.ScreenBitmap.Flipped">
            <summary>
            Gets or sets flipped state of the Bitmap. 
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.CDMusic">
            <summary>
            Represents a CD Music object.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.CDMusic.#ctor(System.Int32)">
            <summary>
            Plays CD Audio music stored on your CD. The CD Audio track must be specified and 
            loaded before it can be played. Only one CD Audio track can be loaded and played at
            any one time. To play a new track, you must delete a previously loaded track before 
            loading the new one. 
            </summary>
            <param name="track"></param>
        </member>
        <member name="P:DarkGDK.Audio.CDMusic.NumberOfTracks">
            <summary>
            Gets the number of CD tracks currently available from the CD Audio media present on 
            the system. If no CD Audio media is present, this method returns a zero. 
            </summary>
        </member>
        <member name="T:DarkGDK.Lighting.LightType">
            <summary>
            Represents the types of light.
            </summary>
        </member>
        <member name="F:DarkGDK.Lighting.LightType.Directional">
            <summary>
            Directional .
            </summary>
        </member>
        <member name="F:DarkGDK.Lighting.LightType.Point">
            <summary>
            Point .
            </summary>
        </member>
        <member name="F:DarkGDK.Lighting.LightType.Spot">
            <summary>
            Spot .
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Triangle">
            <summary>
            Represents a Triangle Object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Triangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3D object from a triangle mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="x1">Vector 1 X position.</param>
            <param name="y1">Vector 1 Y position.</param>
            <param name="z1">Vector 1 Z position.</param>
            <param name="x2">Vector 2 X position.</param>
            <param name="y2">Vector 2 Y position.</param>
            <param name="z2">Vector 2 Z position.</param>
            <param name="x3">Vector 3 X position.</param>
            <param name="y3">Vector 3 Y position.</param>
            <param name="z3">Vector 3 Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Triangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a triangle mesh and textures it with the given
            texture. 
            </summary>
            <param name="x1">Vector 1 X position.</param>
            <param name="y1">Vector 1 Y position.</param>
            <param name="z1">Vector 1 Z position.</param>
            <param name="x2">Vector 2 X position.</param>
            <param name="y2">Vector 2 Y position.</param>
            <param name="z2">Vector 2 Z position.</param>
            <param name="x3">Vector 3 X position.</param>
            <param name="y3">Vector 3 Y position.</param>
            <param name="z3">Vector 3 Z position.</param>
            <param name="texture">A texture to be applied to the triangle.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Triangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a triangle mesh and colors it with the given
            color.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="z3"></param>
            <param name="color">A color to be applied to the triangle.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Pyramid">
            <summary>
            Represents a Pyramid  Object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Pyramid.#ctor(System.Single)">
            <summary>
            Constructs a new 3D object from a pyramid mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the pyramid.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Pyramid.#ctor(System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a pyramid mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the pyramid.</param>
            <param name="texture">Texture to give to the pyramid.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Pyramid.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a pyramid mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the pyramid.</param>
            <param name="color">Color to give to the pyramid.</param>
        </member>
        <member name="T:DarkGDK.Basic2D.TextureFlag">
            <summary>
            A collection of all texture flags.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.TextureFlag.Stretching_Filter_ColorKey">
            <summary>
            Use Stretching, Filter and ColorKey
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.TextureFlag.NoStretching_NoFilter_ColorKey">
            <summary>
            Use ColorKey, but no Stretching or Filter
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.TextureFlag.Stretching_NoFilter_NoColorKey">
            <summary>
            Use Stretching, but no Stretching or ColorKey
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.TextureFlag.NoStretching_NoFilter_NoColorKey">
            <summary>
            Do not use Stretching, Filter or ColorKey
            </summary>
        </member>
        <member name="T:DarkGDK.MemoryBlock">
            <summary>
            Represents a MemBlock object
            </summary>
        </member>
        <member name="F:DarkGDK.MemoryBlock.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.MemoryBlock.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(System.Int32)">
            <summary>
            Makes a memory block of the specified size.
            </summary>
            <param name="size">The size of the memory block.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(System.String)">
            <summary>
            Creates a memory block from the specified file. It internally uses File numer 32
            for opening the file, so be sure that this ID is not being used.
            </summary>
            <param name="fileName">The file to load the memory block from.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(DarkGDK.Basic2D.Bitmap)">
            <summary>
            Makes a memory block from the speficied object.
            </summary>
            <param name="bitmap">A Bitmap.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(DarkGDK.Basic2D.Image)">
            <summary>
            Makes a memory block from the speficied object.
            </summary>
            <param name="image">A Image.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(DarkGDK.Basic3D.Mesh)">
            <summary>
            Makes a memory block from the speficied object.
            </summary>
            <param name="mesh">A mesh.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.#ctor(DarkGDK.Audio.Sound)">
            <summary>
            Makes a memory block from the speficied object.
            </summary>
            <param name="sound">A Sound.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.Delete">
            <summary>
            Deletes the memory block and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.MemoryBlock.CopyFrom(System.Int32,DarkGDK.MemoryBlock,System.Int32,System.Int32)">
            <summary>
            Copies one section of the specified memblock to another section of this memblock. 
            Both must be existing memblocks. 
            </summary>
            <param name="position">Byte location of this memblock.</param>
            <param name="memBlock">The memory block to copy from.</param>
            <param name="fromPosition">Byte location of the source memblock.</param>
            <param name="size">Then number of bytes you wish to copy from one memblock to the other.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.CopyTo(System.Int32,DarkGDK.MemoryBlock,System.Int32,System.Int32)">
            <summary>
            Copies one section of this memblock to another section of the specified memblock. 
            Both must be existing memblocks. 
            </summary>
            <param name="position">Byte location of this memblock.</param>
            <param name="memBlock">The memory block to copy from.</param>
            <param name="toPosition">Byte location of the destination memblock.</param>
            <param name="size">Then number of bytes you wish to copy from one memblock to the other.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <param name="data">The information to be written.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.WriteDWord(System.Int32,System.UInt32)">
            <summary>
            Writes some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <param name="data">The information to be written.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.WriteWord(System.Int32,System.Int16)">
            <summary>
            Writes some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <param name="data">The information to be written.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.WriteFloat(System.Int32,System.Single)">
            <summary>
            Writes some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <param name="data">The information to be written.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.ReadByte(System.Int32)">
            <summary>
            Reads some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <returns>The information stored on the specified position.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.ReadDWord(System.Int32)">
            <summary>
            Reads some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <returns>The information stored on the specified position.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.ReadWord(System.Int32)">
            <summary>
            Reads some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <returns>The information stored on the specified position.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.ReadFloat(System.Int32)">
            <summary>
            Reads some data on the specified position.
            </summary>
            <param name="position">Byte location of the memory block.</param>
            <returns>The information stored on the specified position.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.MakeBitmap">
            <summary>
            Makes a bitmap from the memory block.
            </summary>
            <returns>The newly created Bitmap.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.MakeImage">
            <summary>
            Makes an image from the memory block.
            </summary>
            <returns>The newly created Image.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.MakeSound">
            <summary>
            Makes a sound from the memory block.
            </summary>
            <returns>The newly created Sound.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.MakeMesh">
            <summary>
            Makes a mesh from the memory block.
            </summary>
            <returns>The newly created Mesh.</returns>
        </member>
        <member name="M:DarkGDK.MemoryBlock.ChangeMesh(DarkGDK.Basic3D.Mesh)">
            <summary>
            Changes a mesh from a memblock. This command is similar to MakeMeshk, and skips the 
            mesh creation step to make this command faster. You must ensure the mesh uses the 
            same data structure as the memblock or this command will produce undesirable results.
            </summary>
            <param name="mesh">The mesh that will be changed.</param>
        </member>
        <member name="M:DarkGDK.MemoryBlock.MakeFile(System.String)">
            <summary>
            Creates a file from the memory block. 
            </summary>
            <param name="fileName">The file that will be created. The file must not exist
            or the method will fail.</param>
        </member>
        <member name="P:DarkGDK.MemoryBlock.Pointer">
            <summary>
            Gets the actual pointer of the memblock. You can use this pointer to pass into a
            DLL in order to access the memory directly. 
            </summary>
        </member>
        <member name="P:DarkGDK.MemoryBlock.Size">
            <summary>
            Gets the size of the memory block.
            </summary>
        </member>
        <member name="T:DarkGDK.Camera.CameraBase">
            <summary>
            Base class that Camera classes should inherit from.
            </summary>
            <seealso cref="T:DarkGDK.Entity"/>
        </member>
        <member name="F:DarkGDK.Camera.CameraBase.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="F:DarkGDK.Camera.CameraBase._eCameraType">
            <summary>
            Camera type
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.#ctor(DarkGDK.Camera.CameraBase.enumCameraType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Exist">
            <summary>
            Returns True if the camera exists for this object's Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Delete">
            <summary>
            Deletes this camera and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Reset">
            <summary>
            Resets this camera to it's default settings
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Move(System.Single)">
            <summary>
            Moves the camera in the direction it is facing.
            </summary>
            <param name="step">Specifies how far to move the camera.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.AutomaticCollision(System.Single,System.Boolean)">
            <summary>
            Sets the camera to automatic collision. Automatic collision takes over the task of 
            adjusting the camera when it hits an object in the 3D scene. Cameras with automatic
            collision use a collision sphere of the specified radius. Spheres and boxes are solid 
            objects, and so collision can only occur when they collide together. When an object 
            is entirely within another object, even though the geometry is not touching, the 
            collision is still valid as the larger object would be a solid construct. 
            </summary>
            <param name="radius">The radius of the collision sphere.</param>
            <param name="response">
            If true, the new position backtracks to the last collision free position when a 
            hit occurs
            </param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Position(DarkGDK.Math.Vector3)">
            <summary>
            Sets the position of the camera in 3D space.
            </summary>
            <param name="v3">A Vector 3 object.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Position(System.Single,System.Single,System.Single)">
            <summary>
            Sets the position of the camera in 3D space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Rotate(DarkGDK.Math.Vector3)">
            <summary>
            Rotates the camera around its X, Y and Z axis.
            </summary>
            <param name="v3">A Vector 3 object.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the camera around its X, Y and Z axis.
            </summary>
            <param name="x">X angle.</param>
            <param name="y">Y angle.</param>
            <param name="z">Z angle.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetAsCurrentCamera">
            <summary>
            Sets this camera object as the current camera.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetFOV(System.Single)">
            <summary>
            Sets the Field Of View for this camera given as an Angle value.
            </summary>
            <param name="angle">The _nSyncRate of view angle.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetFOVToDefault">
            <summary>
            Sets the Field Of View for this camera back to the default angle
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetToImage(System.Int32,System.Int32)">
            <summary>
            Direct all camera output to the specified image. This command is ideal for performing
            the fastest method of creating textured polygons that show a different view within
            your 3D world. You can use this command to create mirrors, security cameras within 
            your game or dynamically moving the camera view around on a polygon shape such as a 
            floating panel.
            </summary>
            <param name="width">The width of the generated image.</param>
            <param name="height">The height of the gerenated image.</param>
            <returns>The image to which the camera is drawn.</returns>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ControlUsingArrowKeys(System.Single,System.Single)">
            <summary>
            Monitors the arrow keys and move the camera based on their activity. The up and down 
            arrow keys move the camera forward and backward. The left and right arrow keys turn
            the camera left and right respectively.
            </summary>
            <param name="velocity">The velocity of the movement.</param>
            <param name="turnSpeed">The speed to turn the camera.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ColorMyBackdrop(System.Drawing.Color)">
            <summary>
            Colors the 3D backdrop in the specified color.
            </summary>
            <param name="color">A color.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.TextureMyBackdrop(DarkGDK.Basic2D.Image)">
            <summary>
            Textures the 3D backdrop using the specified image value. This method is now 
            obsolete and using sky spheres and boxes is a recommended alternative.
            
            This function is now obsolete and it is recommened that you use either a
            SkySphere or SkyCube for background texturing
            </summary>
            <param name="image">The image to use as texture.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ScrollMyBackdrop(System.Int32,System.Int32)">
            <summary>
            Scrolls the 3D backdrop using the specified u and v scroll values. This method is
            now obsolete and using sky spheres and boxes is a recommended alternative.
            </summary>
            <param name="u">Horizontal scroll.</param>
            <param name="v">Vertical scroll.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Clip(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets up a clipping region for the camera so that you can support object clipping
            This technique is commonly known as setting the Camera Clipping Frustrum
            </summary>
            <param name="iOnOff"></param>
            <param name="fX"></param>
            <param name="fY"></param>
            <param name="fZ"></param>
            <param name="fNX"></param>
            <param name="fNY"></param>
            <param name="fNZ"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Sync">
            <summary>
            Renders this camera when it contains a camera effect, no other cameras sync when calling this function.
            Only output is to the image from CameraEffect.Set
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Point(System.Single,System.Single,System.Single)">
            <summary>
            Points this camera to a point in 3D space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Point(DarkGDK.Math.Vector3)">
            <summary>
            Points the camera to a point in 3D space.
            </summary>
            <param name="v3">A Vector 3 object.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the viewport of the camera. The viewport is the actual area on screen where all
            3D is drawn. The default viewport area is the entire screen, but can be specified 
            using this command.
            </summary>
            <param name="left">The horizontal starting position.</param>
            <param name="top">The vertical starting position.</param>
            <param name="right">The horizontal ending position.</param>
            <param name="bottom">The vertical ending position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ClearViewport(System.Drawing.Color)">
            <summary>
            Clears the viewport of the current camera. The viewport is the actual area on screen where 
            all 3D is drawn. The default viewport area is the entire screen. You can specify that
            only the camera viewport be cleared using this method. This area can be changed using 
            the SetView method.
            </summary>
            <param name="color">The fill color.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetCurrentCamera(System.Int32)">
            <summary>
            Sets this as the current camera.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.MoveForward(System.Single)">
            <summary>
            Moves the camera forwards along the direction it is facing.
            </summary>
            <param name="step">Specifies how far to move the camera.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.MoveBackward(System.Single)">
            <summary>
            Moves the camera backwards along the direction it is facing.
            </summary>
            <param name="step">Specifies how far to move the camera.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.PositionCurrent(System.Single,System.Single,System.Single)">
            <summary>
            Sets the position of the currently selected camera in 3D space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.PointCurrent(System.Single,System.Single,System.Single)">
            <summary>
            Points the camera to a point in 3D space.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.PointCurrent(DarkGDK.Math.Vector3)">
            <summary>
            Points the camera to a point in 3D space.
            </summary>
            <param name="v3">A Vector 3 object.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.RotateCurrent(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the currently selected camera around its X, Y and Z axis.
            </summary>
            <param name="x">X angle.</param>
            <param name="y">Y angle.</param>
            <param name="z">Z angle.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.TurnLeft(System.Single)">
            <summary>
            Turns the camera left. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.TurnRight(System.Single)">
            <summary>
            Turns the camera right. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.PitchUp(System.Single)">
            <summary>
            Pitchs the camera up. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.PitchDown(System.Single)">
            <summary>
            Pitchs the camera down. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.RollLeft(System.Single)">
            <summary>
            Rolls the camera left. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.RollRight(System.Single)">
            <summary>
            Rolls the camera right. The rotation is independent of any axis orientation and allows 
            free motion. The value of the angle can be positive or negative.
            </summary>
            <param name="angle">The angle of rotation.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ClearCurrentViewport(System.Drawing.Color)">
            <summary>
            Clears the viewport of the current camera. The viewport is the actual area on screen where 
            all 3D is drawn. The default viewport area is the entire screen. You can specify that
            only the camera viewport be cleared using this method. This area can be changed using 
            the SetView method.
            </summary>
            <param name="color">The fill color.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetFieldOfView(System.Single)">
            <summary>
            Sets _nSyncRate of view for the camera given an Angle value. The default angle is the
            result of the calculation 360 degrees divided by four.
            </summary>
            <param name="angle">The _nSyncRate of view angle.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetRange(System.Single,System.Single)">
            <summary>
            Sets the viewing range of the camera. The Front Value specifies the closest point 
            beyond which the camera starts to draw the 3D scene. The Back Value specifies the
            furthest point beyond which the camera stops drawing the 3D scene. The parameters 
            must be specified using real numbers greater than zero. The default range starts 
            drawing the 3D scene with a front value of 1 and a back value of 3000.
            </summary>
            <param name="near">The closest point to start drawing the 3D scene.</param>
            <param name="far">The furthest point to start drawing the 3D scene</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetCurrentViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the viewport of the current camera. The viewport is the actual area on screen where all
            3D is drawn. The default viewport area is the entire screen, but can be specified 
            using this command.
            </summary>
            <param name="left">The horizontal starting position.</param>
            <param name="top">The vertical starting position.</param>
            <param name="right">The horizontal ending position.</param>
            <param name="bottom">The vertical ending position.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetAspect(System.Single)">
            <summary>
            Adjusts the aspect ratio at which the camera renders to the screen. By default this
            aspect ratio is calculated by dividing the screen width by the screen height,
            normally resulting in an aspect ratio of 0.75. You can change this aspect ratio 
            using this command in situations where you would like to render a perfect square 
            to the screen or if you are writing for hardware that spans a single surface over
            multiple display devices.
            </summary>
            <param name="ratio">The aspect ratio.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetRotationXYZ">
            <summary>
            Reverses the camera rotation order. The cameras normal rotation order is to first 
            rotate on the Z axis, then on the Y axis and finally on the X axis. This method 
            reverses this order to XYZ.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetRotationZYX">
            <summary>
            Restores the default camera rotation order. The cameras normal rotation order is to
            first rotate on the Z axis, then on the Y axis and finally on the X axis. This 
            method restores the order to ZYX.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetToFollow(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Automatically controls the camera to provide a tracking system. By providing the 3D 
            world coordinate of the entity you wish to track, and some camera data, your camera 
            will automatically update its current position each time this command is called. 
            </summary>
            <param name="x">X coordinate to the track.</param>
            <param name="y">Y coordinate to the track.</param>
            <param name="z">Z coordinate to the track.</param>
            <param name="angle">Angle coordinate to the track.</param>
            <param name="distance">Specifies the required distance between the coordinate and
            the camera.</param>
            <param name="height">Specifies the required height of the camera in 3D space.</param>
            <param name="smooth">Specifies the level of smoothing required for the camera, where 
            a value of 1.0 is no smoothing and a value of 100.0 is lots of smoothing.</param>
            <param name="collision">If set to true, detects whether it is hitting any of the
            static collision boxes and if set to one will automatically adjust so as not to enter
            these collidable areas.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetCurrentToObjectOrientation(DarkGDK.Basic3D.Object3D)">
            <summary>
            Sets the camera to the same direction as the specified 3D object.
            </summary>
            <param name="Object">A Object.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.AutoCamOn">
            <summary>
            Activates the auto camera which will reposition when a new object is loaded or 
            created. 
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.AutoCamOff">
            <summary>
            Deactivates the auto camera. The camera will then no longer reposition when a
            new object is loaded or created.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.BackdropOn">
            <summary>
            Activates a 3D backdrop that fills the visible screen. The backdrop is automatically 
            activated the first time any 3D object is created or loaded in order to clear the 
            background screen. The backdrop can also be colored, textured and scrolled to create 
            the effects of sky or other background effects. If you wish to set-up the backdrop
            before creating your objects, use this command to activate it. 
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.BackdropOff">
            <summary>
            Deactivates the 3D backdrop preventing it from being drawn to the screen. The 
            backdrop is automatically activated the first time any 3D object is created or 
            loaded in order to clear the background screen. If you do not wish the backdrop 
            to automatically activate, use this command at the start of your program. 
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ColorBackdrop(System.Drawing.Color)">
            <summary>
            Colors the 3D backdrop in the specified color.
            </summary>
            <param name="color">A color.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.TextureBackdrop(DarkGDK.Basic2D.Image)">
            <summary>
            Textures the 3D backdrop using the specified image value. This method is now 
            obsolete and using sky spheres and boxes is a recommended alternative.
            
            This function is now obsolete and it is recommened that you use either a
            SkySphere or SkyCube for background texturing
            </summary>
            <param name="image">The image to use as texture.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ScrollBackdrop(System.Int32,System.Int32)">
            <summary>
            Scrolls the 3D backdrop using the specified u and v scroll values. This method is
            now obsolete and using sky spheres and boxes is a recommended alternative.
            </summary>
            <param name="u">Horizontal scroll.</param>
            <param name="v">Vertical scroll.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.MoveCurrent(System.Single)">
            <summary>
            Moves the camera in the direction it is facing.
            </summary>
            <param name="step">Specifies how far to move the camera.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetCurrentFOV(System.Single)">
            <summary>
            Sets the Field Of View for the current camera given as an Angle value.
            </summary>
            <param name="angle">The _nSyncRate of view angle.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.SetCurrentFOVToDefault">
            <summary>
            Sets the Field Of View for the current camera back to the default angle
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.ColorCurrentBackdrop(System.Drawing.Color)">
            <summary>
            Colors the current camera 3D backdrop in the specified color.
            </summary>
            <param name="color">A color.</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraBase.RunCode(System.Int32)">
            <summary>
            Runs the shader code for all cameras
            </summary>
            <param name="iMode"></param>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentPositionX">
            <summary>
            Gets the currently selected camera's X position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentPositionY">
            <summary>
            Gets the currently selected camera's Y position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentPositionZ">
            <summary>
            Gets the currently selected camera's Z position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentAngleX">
            <summary>
            Gets or sets the currently selected camera's X rotation.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentAngleY">
            <summary>
            Gets or sets the currently selected camera's Y rotation.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentAngleZ">
            <summary>
            Gets or sets the currently selected camera's Z rotation.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CurrentCameraID">
            <summary>
            Gets the current ID of the rendering camera
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.CameraType">
            <summary>
            Returns the type of this camera object.  Can be either the default camera or
            an additional camera
            </summary>
            <returns></returns>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.PositionX">
            <summary>
            Gets this camera X position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.PositionY">
            <summary>
            Gets this camera Y position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.PositionZ">
            <summary>
            Gets this camera Z position.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.AngleX">
            <summary>
            Gets or sets this camera's X rotation.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.AngleY">
            <summary>
            Gets or sets this camera's Y rotation.
            </summary>
        </member>
        <member name="P:DarkGDK.Camera.CameraBase.AngleZ">
            <summary>
            Gets or sets this camera's Z rotation.
            </summary>
        </member>
        <member name="T:DarkGDK.Camera.CameraBase.enumCameraType">
            <summary>
            This defines the two possible types of Camera object that can exist
            in the DarkGDK.NET toolkit.
            </summary>
        </member>
        <member name="F:DarkGDK.Camera.CameraBase.enumCameraType.eCameraDefault">
            <summary>
            Defines the default Camera type, which always refers to Camera identity (0)
            </summary>
        </member>
        <member name="F:DarkGDK.Camera.CameraBase.enumCameraType.eCameraAdditional">
            <summary>
            Defines additional Camera types, which refer to Camera Identities (1..31)
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Limb">
            <summary>
            Represents a Limb object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.ChangeMesh(DarkGDK.Basic3D.Mesh)">
            <summary>
            Changes the mesh of an object limb. You can use this command to animate an object that
            requires a sequence of fixed static meshes. 
            </summary>
            <param name="mesh">The new mesh.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.GlueObject(DarkGDK.Basic3D.Object3D)">
            <summary>
            Attaches the specified 3D object to a limb of another 3D object. By attaching an object
            to the limb of another, the objects position, rotation and scale are entirely
            controlled by the Parent. This technique can be used to allow a robot arm to easily grab 
            and lift an item, or allow your hero character to hold and wear a variety of items.
            </summary>
            <param name="source">The object that will be glued.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.GlueObject(DarkGDK.Basic3D.Object3D,DarkGDK.Basic3D.LimbGlueMode)">
            <summary>
            Attachs the specified 3D object to a limb of another 3D object. By attaching an object
            to the limb of another, the objects position, rotation and scale are entirely
            controlled by the limb. This technique can be used to allow a robot arm to easily grab 
            and lift an item, or allow your hero character to hold and wear a variety of items.
            </summary>
            <param name="source">The object that will be glued.</param>
            <param name="mode">The glue mode.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Link(DarkGDK.Basic3D.Limb)">
            <summary>
            Links a newly created limb to a limb within an existing 3D object. When a limb is 
            connected to another, it becomes a child limb that will be affected by the position,
            rotation and scale of its parent limbs.
            </summary>
            <param name="limb">The limb to be linked.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Offset(System.Single,System.Single,System.Single)">
            <summary>
            Changes the relative position of the specified limb within the 3D object. The position 
            of the limb is always offset from the main coordinates of the 3D object and from any 
            parent limbs. Specifying a limb number of zero provides access to the objects own root
            data, and should not normally be used in this way. 
            </summary>
            <param name="x">Offset X position.</param>
            <param name="y">Offset Y position.</param>
            <param name="z">Offset Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Offset(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Changes the relative position of the specified limb within the 3D object. The position 
            of the limb is always offset from the main coordinates of the 3D object and from any 
            parent limbs. 
            </summary>
            <param name="x">Offset X position.</param>
            <param name="y">Offset Y position.</param>
            <param name="z">Offset Z position.</param>
            <param name="boundFlag">The bound flag.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Changes the rotation of the specified limb within the 3D object. 
            </summary>
            <param name="angleX">X rotation.</param>
            <param name="angleY">Y rotation.</param>
            <param name="angleZ">Z rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Rotate(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Changes the rotation of the specified limb within the 3D object. 
            </summary>
            <param name="angleX">X rotation.</param>
            <param name="angleY">Y rotation.</param>
            <param name="angleZ">Z rotation.</param>
            <param name="boundFlag">The bound flag.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.RotateRelative(System.Single,System.Single,System.Single)">
            <summary>
            Changes the rotation of the specified limb within the 3D object, relative
            to the last position. 
            </summary>
            <param name="angleX">X rotation.</param>
            <param name="angleY">Y rotation.</param>
            <param name="angleZ">Z rotation.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the specified 3D limb to stretch or shrink in all three dimensions, using 
            percentage scale values.
            </summary>
            <param name="x">Width scale.</param>
            <param name="y">Height scale.</param>
            <param name="z">Depth scale.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Scale(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Scales the specified 3D limb to stretch or shrink in all three dimensions, using 
            percentage scale values.
            </summary>
            <param name="x">Width scale.</param>
            <param name="y">Height scale.</param>
            <param name="z">Depth scale.</param>
            <param name="boundFlag">The bound flag.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.ScaleTexture(System.Single,System.Single)">
            <summary>
            Scales the UV data of the specified limb. The UV data controls how a texture is 
            mapped onto your limb. By scaling the UV data, you can effectively stretch or tile 
            the texture over your object. A U or V value of 1 means no scale change. A value of
            0.5 will scale the texture by half. A value of 2.0 will double the scale of the 
            texture. The scale effect is permanent.
            </summary>
            <param name="u">Controls the horizontal spread of the data.</param>
            <param name="v">Controls the vertical spread of the data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.ScrollTexture(System.Single,System.Single)">
            <summary>
            Scrolls the UV data of the specified limb of the 3D object. The UV data controls how 
            a texture is mapped onto your object. By scrolling the UV data, you can effectively 
            scroll the texture over your limb. The scroll effect is permanent.
            </summary>
            <param name="u">Controls the horizontal shift of the data.</param>
            <param name="v">Controls the vertical shift of the data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.SetNormals">
            <summary>
            Generates normals for the specified limb.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.SetSmoothing(System.Single)">
            <summary>
            Smooths the sharp edges of the mesh within a limb by adjusting the normals data.
            A percentage value of zero will perform no smoothing and create a facet surface for 
            the limb. A percentage value of 100 will perform full smoothing, averaging all normals
            that share a vertex position and create a smoothing effect elimiating all edges. A 
            value between these two limits will determine the degree beyond which an edge will be 
            smoothed or left sharp.
            </summary>
            <param name="percentage">Smoothing percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.SetSmoothing(System.Int32)">
            <summary>
            Smooths the sharp edges of the mesh within a limb by adjusting the normals data.
            A percentage value of zero will perform no smoothing and create a facet surface for 
            the limb. A percentage value of 100 will perform full smoothing, averaging all normals
            that share a vertex position and create a smoothing effect elimiating all edges. A 
            value between these two limits will determine the degree beyond which an edge will be 
            smoothed or left sharp.
            </summary>
            <param name="percentage">Smoothing percentage.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.SetTexture(DarkGDK.Basic2D.Image)">
            <summary>
            Applies an existing image to the limb of a 3D object as a texture. You must create an 
            image before attempting to texture part of the 3D object. 
            </summary>
            <param name="texture">The texture that will be applied.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.SetTexture(DarkGDK.Basic2D.Image,System.Int32)">
            <summary>
            Applies an existing image to the limb of a 3D object as a texture. You must create an 
            image before attempting to texture part of the 3D object. 
            </summary>
            <param name="texture">The texture that will be applied.</param>
            <param name="stage"> Specifies multi-textures directly, and is required when using 
            shaders that take pixel data from secondary textures. </param>
        </member>
        <member name="M:DarkGDK.Basic3D.Limb.Exist(DarkGDK.Basic3D.Object3D,System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="obj">The object that the limb belongs to</param>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.AngleX">
            <summary>
            Gets the limb X angle.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.AngleY">
            <summary>
            Gets the limb Y angle.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.AngleZ">
            <summary>
            Gets the limb Z angle.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.CanLink">
            <summary>
            Returns true if a newly created limb can be added to the specified limb.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Color">
            <summary>
            Gets or sets the limb color.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.DirectionX">
            <summary>
            Gets the limb X direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.DirectionY">
            <summary>
            Gets the limb Y direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.DirectionZ">
            <summary>
            Gets the limb Z direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Id">
            <summary>
            Internal ID of the limb. This number is may change for certain limb operations such as
            the Link() method.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Name">
            <summary>
            Gets the limb name.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.OffsetX">
            <summary>
            Gets the limb X offset. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.OffsetY">
            <summary>
            Gets the limb Y offset. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.OffsetZ">
            <summary>
            Gets the limb Z offset. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.PositionX">
            <summary>
            Gets the limb X position. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.PositionY">
            <summary>
            Gets the limb Y position. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.PositionZ">
            <summary>
            Gets the limb Z position. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.ScaleX">
            <summary>
            Gets the limb X scale. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.ScaleY">
            <summary>
            Gets the limb Y scale. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.ScaleZ">
            <summary>
            Gets the limb Z scale. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Owner">
            <summary>
            Gets the object that the limb belongs to.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.ParentLimb">
            <summary>
            The limb parent that the limb is linked to.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Texture">
            <summary>
            Gets or sets the limb texture.
            </summary>
            <remarks>This function returns a Image wrapper representation of the GDK image if
            the limb has one, otherwise it returns null. </remarks>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.TextureName">
            <summary>
            Gets the internal name of the limb texture.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Limb.Visible">
            <summary>
            Gets or sets the visibility state of the limb.
            </summary>
        </member>
        <member name="T:DarkGDK.Camera.AdditionalCamera">
            <summary>
            Represents additional camera objects.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.AdditionalCamera.#ctor">
            <summary>
            Creates a new instance of AdditionalCamera.
            </summary>
        </member>
        <member name="T:DarkGDK.World.BSP">
            <summary>
            Contains all BSP manipulating methods.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.Load(System.String)">
            <summary>
            Loads a BSP world into the 3D scene. The BSP world automatically draws to the current 
            camera and cannot be rotated or repositioned. Culling, texturing and collision are all 
            handled automatically and through the related world commands.  
            If the BSP world is to be loaded from a packed file, Use the other Load overload.
            </summary>
            <param name="fileName">
            The standalone BSP file, ensure the current directory 
            contains any files used by the BSP world.
            </param>
        </member>
        <member name="M:DarkGDK.World.BSP.Load(System.String,System.String)">
            <summary>
            Loads a BSP world into the 3D scene. The BSP world automatically draws to the current 
            camera and cannot be rotated or repositioned. Culling, texturing and collision are all 
            handled automatically and through the related world commands.           
            </summary>
            <param name="pakFileName">The file containing the BSP world files, normally a PAK or PK3 file.</param>
            <param name="mapFileName">The BSP filename of the world you wish to load.</param>
        </member>
        <member name="M:DarkGDK.World.BSP.Load(DarkGDK.ResourceAssembly,System.String,System.String)">
            <summary>
            Loads a BSP from an embedded resource on the specified ResourceAssembly.
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource.</param>
            <param name="resourceName">The complete name of the embedded resource.</param>   
            <param name="map">Map filename.</param>
        </member>
        <member name="M:DarkGDK.World.BSP.Delete">
            <summary>
            Deletes a BSP world from the 3D scene. All data loaded with the LOAD BSP command will be 
            removed from the system allowing you to load a new BSP world. 
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.Start">
            <summary>
            Starts the BSP map.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.End">
            <summary>
            Ends the BSP map.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.Update">
            <summary>
            Updates the BSP map.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.SetCamera(DarkGDK.Camera.CameraBase)">
            <summary>
            Sets the main camera for the BSP system. The BSP camera is used to calculate how to crop 
            the BSP polygons to keep the performance level high. Binary Space Partitioning works by 
            drawing only the polygons currently visible from the perspective of the specified camera. 
            </summary>
            <param name="camera">The camera to be used.</param>
        </member>
        <member name="M:DarkGDK.World.BSP.SetMultiTexturingOn">
            <summary>
            Switchs on multitexturing within a BSP rendered world. This is the default behaviour. 
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSP.SetMultiTexturingOff">
            <summary>
            Switchs off multitexturing within a BSP rendered world. 
            </summary>
        </member>
        <member name="T:DarkGDK.IO.Keyboard">
            <summary>
            Constains all keyboard methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Keyboard.State(System.Int32)">
            <summary>
            Checks if a key is pressed on the keyboard. If you do not know the keyboard 
            scancodes, use the overload with Keys parameter.
            </summary>
            <param name="scanCode">The scancode of the key.</param>
            <returns>true if the key is pressed; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IO.Keyboard.State(DarkGDK.IO.Keys)">
            <summary>
            Checks if a key is pressed on the keyboard.
            </summary>
            <param name="key">The key to check for.</param>
            <returns>true if the key is pressed; otherwise, false.</returns>
        </member>
        <member name="F:DarkGDK.IO.Keyboard.systemKeysEnabled">
            <summary>
            System Keys enabled holder.
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keyboard.escapeKeyEnabled">
            <summary>
            Escape Key enabled holder.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.Keyboard.ClearEntryBuffer">
            <summary>
            Clears the string current held by the windows system. This string is maintained by the
            windows message pump and ensures you do not miss characters typed at speed in your
            application. You can get the contents of this string by using the Entry method. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Entry">
            <summary>
            Gets the string currently held by the windows system. This string is maintained by
            the windows message pump and ensures you do not miss characters typed at speed in your
            application. You can clear this string using the ClearEntryBuffer method. The entry 
            buffer command automatically handles the collection of text typed in by the end user.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Up">
            <summary>
            Returns true if the up arrow key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Down">
            <summary>
            Returns true if the down arrow key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Left">
            <summary>
            Returns true if the left arrow key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Right">
            <summary>
            Returns true if the right arrow key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Control">
            <summary>
            Returns true if the control key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Shift">
            <summary>
            Returns true if the shifht key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Return">
            <summary>
            Returns true if the return/enter key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Escape">
            <summary>
            Returns true if the escape key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.Space">
            <summary>
            Returns true if the space key is being pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.ScanCode">
            <summary>
            Gets the scancode of the key currently being pressed. 
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.SystemKeysEnabled">
            <summary>
            Gets or sets if the System Keys are enabled.
            </summary>
        </member>
        <member name="P:DarkGDK.IO.Keyboard.EscapeKeyEnabled">
            <summary>
            Gets or sets if the Escape Key is enabled.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Cube">
            <summary>
            Represents a Cube Object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Cube.#ctor(System.Single)">
            <summary>
            Constructs a new 3D object from a cube mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the cube.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cube.#ctor(System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a cube mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the cube.</param>
            <param name="texture">Texture to give to the cube.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cube.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a cube mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the cube.</param>
            <param name="color">Color to give to the cube.</param>
        </member>
        <member name="T:DarkGDK.IdManagerLE">
            <summary>
            " Edition" of the IdManager, for classes that don't have an Exist method.
            </summary>
        </member>
        <member name="F:DarkGDK.IdManagerLE.idStack">
            <summary>
            Stack of freed IDs.
            </summary>
        </member>
        <member name="F:DarkGDK.IdManagerLE.sequence">
            <summary>
            Stores the next unused ID.
            </summary>
        </member>
        <member name="M:DarkGDK.IdManagerLE.GetNextId">
            <summary>
            Gets the next unused ID. It checks if is there any freed ID available.
            </summary>
            <returns>An unused ID.</returns>
        </member>
        <member name="M:DarkGDK.IdManagerLE.AddFreeId(System.Int32)">
            <summary>
            Adds the specified ID to the freed IDs stack.
            </summary>
            <param name="id">The ID that will be added to the stack.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Matrix">
            <summary>
            Represents a matrix 3D object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.Matrix.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.#ctor(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a matrix to a given width and depth segmented into grid square of a specified 
            arrangement. A matrix can be thought of as a grid landscape with individual tiles that
            can be textured, raised and lowered to create a wide variety of surfaces. 
            </summary>
            <param name="width">The matrix width.</param>
            <param name="depth">The matrix depth.</param>
            <param name="xSegments">The number of matrix X segments.</param>
            <param name="ySegments">The number of matrix Y segments.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Delete">
            <summary>
            Deletes the matrix and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Fill(System.Single,System.Int32)">
            <summary>
            Sets each grid square in the matrix to a specified height and tile number. 
            The tile number must be a valid texture tile allocated by the
            PrepareTexture method and should be an integer value. 
            </summary>
            <param name="height">The height of the tile.</param>
            <param name="tileNumber">The tile number.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.GetHeight(System.Int32,System.Int32)">
            <summary>
            Gets the matrix height at the specified grid point coordinate. Do not confuse the grid 
            reference X and Z values with coordinate values. The grid reference values are measured
            per tile, not per 3D space unit. 
            </summary>
            <param name="x">X tile position.</param>
            <param name="z">Z tile position.</param>
            <returns>The matrix height at the specified grid point coordinate.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.GetGroundHeight(System.Single,System.Single)">
            <summary>
            Gets the Y coordinate within the matrix given the X and Z coordinates. This method can
            be used to allows 3D objects to traverse the contours of any matrix landscape with ease. 
            </summary>
            <param name="x">X tile position.</param>
            <param name="z">Z tile position.</param>
            <returns>The matrix ground height at the specified grid point coordinate.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.GhostOn(System.Int32)">
            <summary>
            Ghosts the matrix. Ghosted matrices will appear transparent when rendered, creating 
            effects such as a see-through surfaces. A ghosted matrix automatically switches to
            a higher level of priority when rendered in order to ensure objects above and below 
            the matrix are visible.
            </summary>
            <param name="mode"> The Ghost Mode with a range of 0 to 5 specify the type of ghosting
            to perform.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Position(System.Single,System.Single,System.Single)">
            <summary>
            Positions the matrix in the 3D scene.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Position(DarkGDK.Math.Vector3)">
            <summary>
            Positions the matrix in the 3D scene.
            </summary>
            <param name="vector">A vector describing the position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.PrepareTexture(DarkGDK.Basic2D.Image,System.Int32,System.Int32)">
            <summary>
            Selects an image of tiled textures that the matrix will eventually use. Each grid 
            square in the matrix can have a tile texture, located within the image. Individual 
            tile textures can be obtained from the single image by slicing it into sections both
            across and down. The tile textures are then assigned a number starting in the top left 
            corner of the sectioned image and working across, then down. To section an image into 
            4 smaller tile textures you would specify 2 across and 2 down. 
            </summary>
            <param name="image">The image to be prepared.</param>
            <param name="across">Number of tiles across.</param>
            <param name="down">Number of tiles down.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Randomize(System.Int32)">
            <summary>
            Sets each grid square in the matrix to a random height between 0 and the height value
            given.
            </summary>
            <param name="maximumHeight">The maximum height.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Set(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Changes the visual properties of the matrix.
            </summary>
            <param name="wireframe">Wireframe state. If true, shows in wireframe form.</param>
            <param name="transparency">Transparency state. If true, black colored parts are not
            drawn to the screen.</param>
            <param name="cull">Cull state. If false, the matrix will draw polygons normally 
            hidden due to the direction the polygon faces. </param>
            <param name="filter">Sets the texture filtering, which controls the smoothing effect 
            of the texture as it is mapped to the object. </param>
            <param name="light">Activates and deactivates the matrices sensitivity to any lights 
            in the scene. </param>
            <param name="fog">Activates and deactivates the matrices sensitivity to fog in the
            scene.</param>
            <param name="ambient">Activates and deactivates the matrices sensitivity to ambient 
             in the scene. </param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetHeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the individual height of a point within the matrix. To raise a whole grid square
            you would need to raise four points, one from each corner of the square. If you set 
            points x=0 z=0, x=0 z=1, x=1 z=0 and x=1 z=1 to a value of 10, you would raise the
            near left square upwards by ten units. 
            </summary>
            <param name="x">X point position.</param>
            <param name="z">Z point position.</param>
            <param name="height">The new height.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetNormal(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the individual normal of a point within the matrix. The normal is a projected 
            direction away from the vertex position that instructs the matrix how to take 
            for that point. You can use matrix normals to affect how the matrix is lit and at what
            strength.
            </summary>
            <param name="x">X point position.</param>
            <param name="z">Z point position.</param>
            <param name="nX">Normal X direction.</param>
            <param name="nY">Normal Y direction.</param>
            <param name="nZ">Normal Z direction.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetPriority(System.Int32)">
            <summary>
            Changes the priority at which the matrix is rendered to the screen. By default the 
            matrix priority is zero and the matrix is rendered before objects, particles and other 
            3D elements. Changing the priority to one will cause the matrix to be drawn after all 
            3D elements instead, allowing the ability to render a ghosted matrix over an object 
            that may be submerged partly within the matrix. 
            </summary>
            <param name="priority">The priority of the matrix.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetTexture(DarkGDK.Basic3D.TextureWrapMode,System.Boolean)">
            <summary>
            Sets different texture modes used by the specified matrix. Every texture is painted 
            onto a matrix using an internal set of values called UV data. This data contains a 
            range of real numbers from zero to one. Zero specifying the top/left corner of your 
            texture and one being the bottom/right corner of your texture. When a matrix uses UV
            data greater and less than this range, you are permitted a number of texture wrap modes
            to describe what should happen to paint these areas. 
            </summary>
            <param name="textureMode">The texture mode.</param>
            <param name="mipGeneration">Ensures the image has a mipmap texture. A mipmap is a
            texture that has many levels of detail, which the matrix can select and use based on 
            the matrix vertex distance from the camera.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetTile(System.Int32,System.Int32,System.Int32)">
            <summary>
            Textures an individual grid square with an image specified by the tile number. Only 
            if the matrix has been prepared with a texture will this command work. The tile number
            equates to a portion of graphic within the sectioned image you used to prepare the 
            matrix texture. If you had prepared a matrix texture with four segmented images, you
            would reference these images as tile numbers from 1 to 4
            </summary>
            <param name="x">X tile position.</param>
            <param name="z">Z tile position.</param>
            <param name="tileNumber">The tile number.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.SetTrim(System.Single,System.Single)">
            <summary>
            Sets the texture tile trim value of a matrix. The trim is a float value and determines
            how much of the edge of the texture tile is trimmed from the final rendered output.
            The texture tile is the visible tile that is drawn to a grid tile of the matrix, and 
            can sometimes suffer from the 'ugly lines' scenario when filtering causes pixels from
            neighboring texture tiles to be rendered. The trim value ensures these pixels can be 
            ignored by moving the area to be used away from the neighboring texture tile. 
            </summary>
            <param name="trimX">Trim X value.</param>
            <param name="trimY">Trim Y value.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.ShiftDown">
            <summary>
            Shifts the entire contents of the matrix one grid square down. The shift ensures that 
            the height and tile data that represent the matrix contents are wrapped around to allow
            continuous shifting of the landscape. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.ShiftLeft">
            <summary>
            Shifts the entire contents of the matrix one grid square left. The shift ensures that 
            the height and tile data that represent the matrix contents are wrapped around to allow
            continuous shifting of the landscape. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.ShiftRight">
            <summary>
            Shifts the entire contents of the matrix one grid square right. The shift ensures that 
            the height and tile data that represent the matrix contents are wrapped around to allow
            continuous shifting of the landscape. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.ShiftUp">
            <summary>
            Shifts the entire contents of the matrix one grid square up. The shift ensures that 
            the height and tile data that represent the matrix contents are wrapped around to allow
            continuous shifting of the landscape. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Matrix.Update">
            <summary>
            Updates all changes you have made to an existing matrix. Any changes you have made are
            not visible until you complete the process by using the Update method. Updating the
            matrix is speed intensive and should be used as little as possible.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.Ghosted">
            <summary>
            Gets or sets the matrix Ghost State. Ghosted matrices will appear transparent when 
            rendered, creating effects such as a see-through surfaces. A ghosted matrix
            automatically switches to a higher level of priority when rendered in order to ensure
            objects above and below the matrix are visible.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.TileCount">
            <summary>
            Gets the number of available tile textures prepared for the specified matrix.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.TilesExist">
            <summary>
            Returns true if the matrix has been prepared with textures; otherwise, returns false.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.Wireframed">
            <summary>
            Gets or sets the matrix wireframe state.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.X">
            <summary>
            Gets the matrix X position.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.Y">
            <summary>
            Gets the matrix Y position.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.Matrix.Z">
            <summary>
            Gets the matrix Z position.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.Cone">
            <summary>
            Represents a Cone Object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Cone.#ctor(System.Single)">
            <summary>
            Constructs a new 3D object from a cone mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the cone.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cone.#ctor(System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a cone mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the cone.</param>
            <param name="texture">Texture to give to the cone.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Cone.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a cone mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the cone.</param>
            <param name="color">Color to give to the cone.</param>
        </member>
        <member name="T:DarkGDK.Net.MultiplayerType">
            <summary>
            Specifies the multiplayer connection type.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MultiplayerType.Peer2Peer">
            <summary>
            It is a Peer to Peer connection, and has every computer communicate with each other. 
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MultiplayerType.ClientServer">
            <summary>
            It is a Client/Server connection, and has all player traffic routed through the 
            host computer and then broadcasted to the rest of the players. 
            </summary>
        </member>
        <member name="T:DarkGDK.Net.MessageType">
            <summary>
            Specified the multiplayer message type.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Integer">
            <summary>
            The message is an integer.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Float">
            <summary>
            The message is a float.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.String">
            <summary>
            The message is a string.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.MemoryBlock">
            <summary>
            The message is a memory block.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Image">
            <summary>
            The message is an image.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Bitmap">
            <summary>
            The message is a bitmap.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Sound">
            <summary>
            The message is a sound.
            </summary>
        </member>
        <member name="F:DarkGDK.Net.MessageType.Mesh">
            <summary>
            The message is a mesh.
            </summary>
        </member>
        <member name="T:DarkGDK.Net.FTP">
            <summary>
            Contains all FTP funcionalities.
            </summary>
        </member>
        <member name="M:DarkGDK.Net.FTP.Connect(System.String,System.String,System.String)">
            <summary>
            Connects to the specified FTP url.
            </summary>
            <param name="url">URL for the ftp server.</param>
            <param name="username">Username to login as.</param>
            <param name="password">Password to login with.</param>
        </member>
        <member name="M:DarkGDK.Net.FTP.Disconnect">
            <summary>
            Disconnects from the ftp server.
            </summary>
        </member>
        <member name="M:DarkGDK.Net.FTP.Disconnect(System.Boolean)">
            <summary>
            Disconnects from the ftp server.
            </summary>
            <param name="closeDialUp">
            If true, disconnects the dial-up connection if dial-up access was used. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.FTP.Terminate">
            <summary>
            Allows you to terminate a current download started by FTP.GetFile
            </summary>
        </member>
        <member name="M:DarkGDK.Net.FTP.GetFile(System.String,System.String)">
            <summary>
            Allows you to you to use FTP.Proceed to grab. 
            </summary>
            <param name="ftpFileName">The ftp file to grab.</param>
            <param name="localFileName">The local file to save to.</param>
        </member>
        <member name="M:DarkGDK.Net.FTP.GetFile(System.String,System.String,System.Int32)">
            <summary>
            Allows you to you to use FTP.Proceed to grab. 
            </summary>
            <param name="ftpFileName">The ftp file to grab.</param>
            <param name="localFileName">The local file to save to.</param>
            <param name="grabInBitsFlag">
            Allows you to specify the amount in bytes to be grabbed each time IdgdkFTP.FTPProceed 
            is called, thus controlling the rate and responsiveness of your application during 
            download.
            </param>
        </member>
        <member name="M:DarkGDK.Net.FTP.PutFile(System.String)">
            <summary>
            Copies a local file into the current ftp directory. 
            </summary>
            <param name="localFileName">The local file.</param>
        </member>
        <member name="M:DarkGDK.Net.FTP.DeleteFile(System.String)">
            <summary>
            Deletes a file from the current ftp directory.
            </summary>
            <param name="ftpFileName">The file to be deleted.</param>
        </member>
        <member name="M:DarkGDK.Net.FTP.Proceed">
            <summary>
            Grabs another chunk of the downloading file started by FTP.GetFile
            </summary>
        </member>
        <member name="M:DarkGDK.Net.FTP.FindFirst">
            <summary>
            Finds the first ftp file in the current ftp directory.
            </summary>
        </member>
        <member name="M:DarkGDK.Net.FTP.FindNext">
            <summary>
            Finds the next ftp file in the current ftp directory. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.Status">
            <summary>
            false if the connection failed; otherwise, true.
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.Directory">
            <summary>
            Gets or sets the current ftp directory.
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.Progress">
            <summary>
            Returns a percentage value of the amount of the file being downloaded. When the 
            download is complete, this command will return a value of minus one. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.Failure">
            <summary>
            true if the ftp connection has failed to execute an ftp command. You can use the 
            FTP.Error command to determine the actual reason for the failure. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.Error">
            <summary>
            Gets the error string from a failure
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.FileType">
            <summary>
            Returns the ftp filetype pointed to by the commands FTP.FindFirst and 
            FTP.FindNext. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.FileName">
            <summary>
            Returns the ftp filename pointed to by the commands FTP.FindFirst and 
            FTP.FindNext. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.FTP.FileSize">
            <summary>
            Returns the ftp filesize pointed to by the commands FTP.FindFirst and 
            FTP.FindNext. 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.CubeMap">
            <summary>
            Represents a CubeMap Shader
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.CubeMap.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Make(System.Int32)">
            <summary>
            Creates a new CubeMap of the specified size.
            </summary>
            <param name="iSize"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Make(System.Int32,System.Int32)">
            <summary>
            Creates a new CubeMap of the specified size.
            </summary>
            <param name="iSize"></param>
            <param name="iMipmapped"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Delete">
            <summary>
            Delete's the cubemap from memory
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.Render(DarkGDK.Camera.CameraBase,System.Single,System.Single,System.Single)">
            <summary>
            Renders this CubeMap onto the specified Camera
            </summary>
            <param name="oCamera"></param>
            <param name="fX"></param>
            <param name="fY"></param>
            <param name="fZ"></param>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.ApplyToObject(DarkGDK.Basic3D.Object3D,System.Int32)">
            <summary>
            Applies this CubeMap to the specified 3D Object
            </summary>
            <param name="oObject"></param>
            <param name="iStage"></param>
        </member>
        <member name="M:DarkGDK.Basic3D.CubeMap.ApplyToObject(DarkGDK.Basic3D.Object3D,System.Int32,System.Int32)">
            <summary>
            Applies this CubeMap to the specified 3D Object
            </summary>
            <param name="oObject"></param>
            <param name="iStage"></param>
            <param name="iShader"></param>
        </member>
        <member name="T:DarkGDK.Animation.DVD">
            <summary>
            Represents a media loaded from a DVD.
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.DVD.#ctor">
            <summary>
            Loads a DVD movie if both a DVD driver exists on the system and a DVD CD is in a DVD 
            Drive attached to the system. Once the DVD movie has been loaded, it can be played 
            and controlled like any other animation. This command will fail silently. If a DVD 
            does not exist to play, use the DVD.TotalDVDChapters command to find out. 
            </summary>
        </member>
        <member name="M:DarkGDK.Animation.DVD.SetDVDChapter(System.Int32,System.Int32)">
            <summary>
            This command will set the chapter of a DVD and start it playing from the beginning. 
            There can be between 1 and 99 titles per DVD volume, and between 1 and 999 chapters 
            per title. 
            </summary>
            <param name="title">The number of the title.</param>
            <param name="chapter">The number of the chapter.</param>
        </member>
        <member name="M:DarkGDK.Animation.DVD.GetTotalDVDChapters(System.Int32)">
            <summary>
            Returns the number of chapters contained in the specified title of the DVD volume. 
            A value of zero means the title value does not contain any chapters and can be 
            treated as a non existent title. 
            </summary>
            <param name="title">The number of the title.</param>
            <returns>Returns the number of chapters in the specified title if a DVD volume is
            loaded; otherwise, returns 0.
            </returns>
        </member>
        <member name="T:DarkGDK.ResourceAssembly">
            <summary>
            Represents an assembly with embedded resources that will be used.
            </summary>
        </member>
        <member name="F:DarkGDK.ResourceAssembly.assembly">
            <summary>
            Assembly holder
            </summary>
        </member>
        <member name="F:DarkGDK.ResourceAssembly.path">
            <summary>
            The temporary path to extract the files to.
            </summary>
        </member>
        <member name="M:DarkGDK.ResourceAssembly.#ctor">
            <summary>
            Creates a new ResourceAssembly that loads the resources from the current calling assembly.
            Like the application .exe
            </summary>
        </member>
        <member name="M:DarkGDK.ResourceAssembly.#ctor(System.String)">
            <summary>
            Creates a new ResourceAssembly that loads the resources from a specified assembly
            </summary>
            <param name="assemblyFileName">Assembly filename</param>
        </member>
        <member name="M:DarkGDK.ResourceAssembly.ExtractFile(System.String)">
            <summary>
            Reads a stream from the assembly and saves it to a temp folder.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.ResourceAssembly.RealFileName(System.String)">
            <summary>
            Extracts only the filename of the file, without the namespaces.
            </summary>
            <param name="fileName">The filename on the embedded resources.</param>
            <returns>The filename without the namespaces.</returns>
        </member>
        <member name="T:DarkGDK.Checklist">
            <summary>
            Contains methods and properties for checklist.
            </summary>
        </member>
        <member name="M:DarkGDK.Checklist.EmptyChecklist">
            <summary>
            Clears the general purpose checklist facility. 
            </summary>
        </member>
        <member name="M:DarkGDK.Checklist.ChecklistString(System.Int32)">
            <summary>
            Gets the string from the specified item number in the checklist after a 
            PeformChecklist command has been performed.
            </summary>
            <param name="index">The index of the information to get.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:DarkGDK.Checklist.ChecklistValueA(System.Int32)">
            <summary>
            Gets the value A from the specified item number in the checklist after a 
            PeformChecklist command has been performed.
            </summary>
            <param name="index">The index of the information to get.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:DarkGDK.Checklist.ChecklistValueB(System.Int32)">
            <summary>
            Gets the value B from the specified item number in the checklist after a 
            PeformChecklist command has been performed.
            </summary>
            <param name="index">The index of the information to get.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:DarkGDK.Checklist.ChecklistValueC(System.Int32)">
            <summary>
            Gets the value C from the specified item number in the checklist after a 
            PeformChecklist command has been performed.
            </summary>
            <param name="index">The index of the information to get.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:DarkGDK.Checklist.ChecklistValueD(System.Int32)">
            <summary>
            Gets the value D from the specified item number in the checklist after a 
            PeformChecklist command has been performed.
            </summary>
            <param name="index">The index of the information to get.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="P:DarkGDK.Checklist.ChecklistQuantity">
            <summary>
            Gets the total number of items in the checklist after a PeformChecklist command has
            been performed. The checklist has a maximum storage capacity of 255 items. 
            </summary>
        </member>
        <member name="T:DarkGDK.Camera.DefaultCamera">
            <summary>
            Represents the default camera.  This class inherits from CameraBase, but all methods
            and properties of an instance of this class will refer to the DarkGDK.NET default
            Camera.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.DefaultCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.DefaultCamera.ControlDefaultUsingArrowKeys(System.Single,System.Single)">
            <summary>
            Monitors the arrow keys and moves the current camera based on their activity.
            The up and down arrow keys move the camera forward and backward. The left and
            right arrow keys turn the camera left and right respectively.
            </summary>
            <param name="velocity">The velocity of the movement.</param>
            <param name="turnSpeed">The speed to turn the camera.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Sphere">
            <summary>
            Represents a Sphere Object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single)">
            <summary>
            Constructs a new 3D object from a sphere mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the sphere.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a sphere mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the sphere.</param>
            <param name="texture">Texture to give to the sphere.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a sphere mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the sphere.</param>
            <param name="color">Color to give to the sphere.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D object from a sphere mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="size">Size to make the sphere.</param>
            <param name="rows">The number of rows in the sphere.</param>
            <param name="columns">The number of columns in the sphere.</param> 
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single,System.Int32,System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a sphere mesh and textures it with the given
            texture.
            </summary>
            <param name="size">Size to make the sphere.</param>
            <param name="rows">The number of rows in the sphere.</param>
            <param name="columns">The number of columns in the sphere.</param> 
            <param name="texture">Texture to give to the sphere.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Sphere.#ctor(System.Single,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a sphere mesh and colors it with the given
            color.
            </summary>
            <param name="size">Size to make the sphere.</param>
            <param name="rows">The number of rows in the sphere.</param>
            <param name="columns">The number of columns in the sphere.</param> 
            <param name="color">Color to give to the sphere.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Plane">
            <summary>
            Represents a Plane Object. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Plane.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new 3D object from a plane mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="width">The plane width.</param>
            <param name="height">The plane height.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Plane.#ctor(System.Single,System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a plane mesh and textures it with the given
            texture.
            </summary>
            <param name="width">The plane width.</param>
            <param name="height">The plane height.</param>
            <param name="texture">Texture to give to the plane.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Plane.#ctor(System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a plane mesh and colors it with the given
            color.
            </summary>
            <param name="width">The plane width.</param>
            <param name="height">The plane height.</param>
            <param name="color">Color to give to the plane.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Mesh">
            <summary>
            Represents a Mesh object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.Mesh.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.#ctor(DarkGDK.Basic3D.Object3D)">
            <summary>
            Creates a single mesh using the entire mesh data of a sourceObject.
            A mesh is a wireframe description of a 3D shape. 
            </summary>
            <param name="sourceObject">Object to load from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.#ctor(System.String)">
            <summary>
            Loads a single X file into the specified mesh number. A mesh is a wireframe description
            of a 3D shape. You must use a filename that points to a file that stores 3D mesh data
            in the X file format. This command is almost a direct wrapper to the DirectX function 
            'D3DXLoadMeshFromX', and this function will not load all forms of X file. If you 
            experience problems loading a mesh using this method, try the alternative constructor 
            Mesh(Object sourceObject)
            </summary>
            <param name="fileName">The file to load the mesh from.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Mesh from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.Delete">
            <summary>
            Deletes the mesh and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Mesh.Save(System.String)">
            <summary>
            Saves the specified mesh to a file in the XFile text format. You can use this method to 
            extract and store meshes previously existing as part of a more complex object, or to
            create a large mesh based world and save it out for later loading as a 3D game level. 
            </summary>
            <param name="fileName">The file to save the mesh to.</param>
        </member>
        <member name="T:DarkGDK.Basic2D.Bitmap">
            <summary>
            Represents a Bitmap object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Bitmap.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic2D.Bitmap.bitmapDictionary">
            <summary>
            A dictionary of all created Bitmaps.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.#ctor">
            <summary>
            Finds an unused ID before instantiating and add it to the Bitmap Dictionary
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.#ctor(System.String)">
            <summary>
            Loads a picture file to a Bitmap The picture file must be of the BMP, JPG, TGA, DDS, 
            DIB or PNG format. 
            </summary>
            <param name="fileName">Picture FileName.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a blank bitmap of a specified size. The size of the bitmap is only limited by 
            the amount of system memory available. When you create a bitmap, it becomes the current 
            bitmap. All drawing operations will be re-directed to the current bitmap and away from 
            the screen. You can use the Bitmap.SetCurrent command to restore drawing operations 
            to the screen.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Bitmap from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.Delete">
            <summary>
            Deletes the Bitmap and frees the ID. Deleting bitmaps that are no longer used greatly 
            improves system performance. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.CopyTo(DarkGDK.Basic2D.Bitmap)">
            <summary>
            Copies the contents of this bitmap into another bitmap providing the destination bitmap 
            is not smaller than the first. 
            </summary>
            <param name="destination">Bitmap to copy this to.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.CopyTo(System.Int32,System.Int32,System.Int32,System.Int32,DarkGDK.Basic2D.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the bitmap into another bitmap providing the destination bitmap 
            is not smaller than the first.  You should specify a source area to be copied from and 
            a destination area to be copied to within each bitmap. If the size of the two areas 
            differ, the source data will be rescaled to fit in the destination area. 
            </summary>
            <param name="sourceLeft">Source bitmap leftmost position.</param>
            <param name="sourceTop">Source bitmap topmost position.</param>
            <param name="sourceRight">Source bitmap rightmost position.</param>
            <param name="sourceBottom">Source bitmap bottommost position.</param>
            <param name="destination">Bitmap to copy this to.</param>
            <param name="destLeft">Destination bitmap leftmost position.</param>
            <param name="destTop">Destination bitmap Bitmap to copy this to. position.</param>
            <param name="destRight">Destination bitmap rightmost position.</param>
            <param name="destBottom">Destination bitmap bottommost position.</param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.Fade(System.Int32)">
            <summary>
            Fades the contents of the Bitmap. Fade operations are slow and the completion 
            time depends on the size of the bitmap. 
            </summary>
            <param name="transparency">
            Set the level of fading from zero which fades the bitmap completely to black, 
            up to 100 which does not fade the bitmap at all.
            </param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.Blur(System.Int32)">
            <summary>
            Blurs the contents of the Bitmap. The greater the intensity of blurring, the longer it takes to perform.
            The time it takes to blur a bitmap is also dependent on the size of the bitmap. 
            </summary>
            <param name="blurLevel">
            You must specify a blur value from 1 to 6 to provide the intensity of the blurring. 
            A blur value of 1 will perform mild blurring, up to a value of 6 that causes severe 
            blurring. </param>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.SetCurrent">
            <summary>
            Sets the bitmap for all drawing operations. Use this command if you wish to draw, 
            paste and extract images from the bitmap.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic2D.Bitmap.Load(System.String)">
            <summary>
            Loads a picture file to the bitmap. The picture file must be of the BMP, JPG, TGA, DDS, 
            DIB or PNG format. 
            </summary>
            <param name="fileName">Picture FileName.</param>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Width">
            <summary>
            Returns the Bitmap width.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Height">
            <summary>
            Returns the Bitmap height.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Depth">
            <summary>
            Returns the Bitmap depth.
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Mirrored">
            <summary>
            Gets or sets mirrored state of the Bitmap. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Flipped">
            <summary>
            Gets or sets flipped state of the Bitmap. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic2D.Bitmap.Current">
            <summary>
            Returns the current Bitmap if it is not the screen; otherwise, returns null.
            </summary>
        </member>
        <member name="T:DarkGDK.Text">
            <summary>
            Contains all Text methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.Text.Asc(System.String)">
            <summary>
            Converts a character to ASCII code.
            </summary>
            <param name="sourceString">A string that has the character</param>
            <returns>The ASCII code of the first character of the string.</returns>
        </member>
        <member name="M:DarkGDK.Text.Bin(System.Int32)">
            <summary>
            Converts an integer value to binary.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>a 32 character string equivalent to the binary representation of the 
            specified value provided.</returns>
        </member>
        <member name="M:DarkGDK.Text.CenterText(System.Int32,System.Int32,System.String)">
            <summary>
            Outputs the provided string using the current text settings at the specified 
            coordinates. The text will be centered on the X coordinate given. The coordinates should be 
            integer values. This method can only produce text on a single line, so you should refrain from 
            using carriage return characters in the text string. Any carriage return symbols will be ignored. 
            </summary>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="textToWrite">String to write on the screen</param>
        </member>
        <member name="M:DarkGDK.Text.Char(System.Int32)">
            <summary>
            Converts an ASCII code to its character.
            </summary>
            <param name="value">ASCII code.</param>
            <returns>a character string equivalent to the ASCII character number provided.</returns>
        </member>
        <member name="M:DarkGDK.Text.Hex(System.Int32)">
            <summary>
            Converts an integer to Hexadecimal.
            </summary>
            <param name="value">The integer value.</param>
            <returns>an eight character string equivalent to the hexadecimal representation
            of the number provided. </returns>
        </member>
        <member name="M:DarkGDK.Text.PeformChecklistForFonts">
            <summary>
            Builds a checklist and search for all available fonts on the system. Use the
            Checklist class.
            </summary>
        </member>
        <member name="M:DarkGDK.Text.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of the text.
            </summary>
            <param name="color">A Color.</param>
        </member>
        <member name="M:DarkGDK.Text.SetFont(System.String)">
            <summary>
            Sets the text font.
            </summary>
            <param name="typeface">The name of the typeface.</param>
        </member>
        <member name="M:DarkGDK.Text.SetFont(System.String,DarkGDK.CharacterSet)">
            <summary>
            Sets the text font.
            </summary>
            <param name="typeface">The name of the typeface.</param>
            <param name="characterSet">The charset that will be used.</param>
        </member>
        <member name="M:DarkGDK.Text.SetOpaque">
            <summary>
            Sets the background of the current text settings to the color of the background ink.
            </summary>
        </member>
        <member name="M:DarkGDK.Text.SetTransparent">
            <summary>
            Set the background of the text you are about to output as transparent. 
            </summary>
        </member>
        <member name="M:DarkGDK.Text.ShowText(System.Int32,System.Int32,System.String)">
            <summary>
            This method will output the provided string using the current text settings at the specified 
            coordinates on the screen. The coordinates should be integer values. This command can only 
            produce text on a single line, so you should refrain from using carriage return characters in 
            the text string. Any carriage return symbols will be ignored. 
            </summary>
            <param name="x">X Position.</param>
            <param name="y">Y Position.</param>
            <param name="textToWrite">Text to write on the screen.</param>
        </member>
        <member name="M:DarkGDK.Text.Height(System.String)">
            <summary>
            Calculates the height the text will have on screen using current text settings.
            </summary>
            <param name="text">The text that will be written.</param>
            <returns>the width of the provided string using the current text settings.</returns>
        </member>
        <member name="M:DarkGDK.Text.Width(System.String)">
            <summary>
            Calculates the width the text will have on screen using current text settings.
            </summary>
            <param name="text">The text that will be written.</param>
            <returns>the width of the provided string using the current text settings.</returns>
        </member>
        <member name="P:DarkGDK.Text.Transparent">
            <summary>
            Returns true it text background is transparent; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Text.Font">
            <summary>
            Gets or sets the text font typeface.
            </summary>
        </member>
        <member name="P:DarkGDK.Text.Size">
            <summary>
            Gets the point size of the current font described by the current text settings. 
            </summary>
        </member>
        <member name="P:DarkGDK.Text.Style">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="T:DarkGDK.TextStyle">
            <summary>
            Defines all text styles.
            </summary>
        </member>
        <member name="F:DarkGDK.TextStyle.Normal">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:DarkGDK.TextStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:DarkGDK.TextStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:DarkGDK.TextStyle.BoldItalic">
            <summary>
            Bold and Italic text.
            </summary>
        </member>
        <member name="T:DarkGDK.CharacterSet">
            <summary>
            Defines all character sets.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Default">
            <summary>
            Default charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Symbol">
            <summary>
            Symbol charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Japanese">
            <summary>
            Japanese charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Korean">
            <summary>
            Korean charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Hangul">
            <summary>
            Hangul charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.ChineseSimplified">
            <summary>
            Chinese Simplified charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.ChineseTraditional">
            <summary>
            Chinese Traditional charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.OEM">
            <summary>
            OEM charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Johab">
            <summary>
            Johab charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Hebrew">
            <summary>
            Hebrew charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Arabic">
            <summary>
            Arabic charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Greek">
            <summary>
            Greek charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Turkish">
            <summary>
            Turkish charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Vietnamese">
            <summary>
            Vietnamese charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Thai">
            <summary>
            Thai charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.EasternEurope">
            <summary>
            Eastern Europe charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Russian">
            <summary>
            Russian charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Mac">
            <summary>
            Mac charset.
            </summary>
        </member>
        <member name="F:DarkGDK.CharacterSet.Baltic">
            <summary>
            Baltic charset.
            </summary>
        </member>
        <member name="T:DarkGDK.Camera.CameraEffect">
            <summary>
            The Camera Effect class
            </summary>
        </member>
        <member name="F:DarkGDK.Camera.CameraEffect.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Sync(DarkGDK.Camera.CameraBase)">
            <summary>
            Render a camera containing a camera effect, no other cameras are synced and only output is to the image from CameraEffect.Set
            </summary>
            <param name="oCamera"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Remove(DarkGDK.Camera.CameraBase)">
            <summary>
            Removes an effect from an image
            </summary>
            <param name="oCamera"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.ReloadShaderDisplayPointer">
            <summary>
            Resets the Shader system.  This function must be called after a SetDisplayMode call
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.StartShaderSystem">
            <summary>
            This function must be called before any other shader function
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sEffectFile"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sEffectFile"></param>
            <param name="useCurrentTextures"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourceAssembly"></param>
            <param name="sResourceName"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.#ctor(DarkGDK.ResourceAssembly,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="resourceAssembly"></param>
            <param name="sResourceName"></param>
            <param name="useCurrentTextures"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Load(System.String)">
            <summary>
            Loads a Camera effect file
            </summary>
            <param name="sEffectFile"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Load(System.String,System.Boolean)">
            <summary>
            Loads a Camera effect file, with texture
            </summary>
            <param name="sEffectFile"></param>
            <param name="useCurrentTextures"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Load(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Camera effect file
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="sResourceName">The complete name of the embedded resource</param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Load(DarkGDK.ResourceAssembly,System.String,System.Boolean)">
            <summary>
            Loads a Camera effect file, with texture
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="sResourceName">The complete name of the embedded resource</param>
            <param name="useCurrentTextures"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Delete">
            <summary>
            Deletes this Camera effect from memory
            </summary>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.SetConstant(System.String,System.Single)">
            <summary>
            Sets a Float variable in a camera effect
            </summary>
            <param name="sVariableName"></param>
            <param name="fValue"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.SetConstant(System.String,System.Int32)">
            <summary>
            Sets an integer variable in a camera effect
            </summary>
            <param name="sVariableName"></param>
            <param name="nValue"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.SetConstant(System.String,DarkGDK.Math.Vector4)">
            <summary>
            Sets a Vector variable in a camera effect
            </summary>
            <param name="sVariableName"></param>
            <param name="v4Value"></param>
        </member>
        <member name="M:DarkGDK.Camera.CameraEffect.Set(DarkGDK.Camera.CameraBase,DarkGDK.Basic2D.Image)">
            <summary>
            Sets an effect to a camera and output to an image, this command will also take control of image ID 65499
            </summary>
            <param name="oCamera"></param>
            <param name="oImage"></param>
        </member>
        <member name="T:DarkGDK.AllIDsInUseException">
            <summary>
            Exception that raises when all permited IDs of a kind of class are in use.
            </summary>
        </member>
        <member name="T:DarkGDK.IO.DLL">
            <summary>
            A class to dinamically load DLLs.
            </summary>
        </member>
        <member name="F:DarkGDK.IO.DLL.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.DLL.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.DLL.#ctor(System.String)">
            <summary>
            Load a DLL into memory. The DLL file must exist either in the current working 
            directory or the Windows system folder. If the file is not found this command 
            will fail.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DarkGDK.IO.DLL.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a DLL from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <param name="param6">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <param name="param6">Function parameter.</param>
            <param name="param7">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <param name="param6">Function parameter.</param>
            <param name="param7">Function parameter.</param>
            <param name="param8">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <param name="param6">Function parameter.</param>
            <param name="param7">Function parameter.</param>
            <param name="param8">Function parameter.</param>
            <param name="param9">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLL(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. You can optionally have up to 10 parameters
            of integer, real or string type providing the function you are calling matches the 
            parameters exactly. You can optionally return a value of integer, real or string type
            providing the function exports the same type. (Conversions to/from uint must be done).
            </summary>
            <param name="function">Function name.</param>
            <param name="param1">Function parameter.</param>
            <param name="param2">Function parameter.</param>
            <param name="param3">Function parameter.</param>
            <param name="param4">Function parameter.</param>
            <param name="param5">Function parameter.</param>
            <param name="param6">Function parameter.</param>
            <param name="param7">Function parameter.</param>
            <param name="param8">Function parameter.</param>
            <param name="param9">Function parameter.</param>
            <param name="param10">Function parameter.</param>
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallDLLX(System.String,System.UInt32,System.UInt32)">
            <summary>
            Calls a function of a loaded DLL. The Function String is the name of the function 
            described in the export table of the DLL. 
            </summary>
            <param name="function">Function name.</param>
            <param name="dataPointer">The pointer to the data.</param>
            <param name="numberOfDWORDS">Number o</param>f DWORDS on the data.
            <returns>The function return value.</returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.CallExist(System.String)">
            <summary>
            Determines whether a function call exists within a loaded DLL. 
            </summary>
            <param name="function">Describes the function name within the DLL. </param>
            <returns> true ff the function exists; otherwise, false. </returns>
        </member>
        <member name="M:DarkGDK.IO.DLL.Delete">
            <summary>
            Deletes the loaded DLL from memory and frees the ID.
            </summary>
        </member>
        <member name="T:DarkGDK.GetIsIdUsed">
            <summary>
            The delegate method for checking IDs.
            </summary>
            <param name="id">The ID to be checked.</param>
            <returns>true if ID is being used; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IdManager.#ctor(DarkGDK.GetIsIdUsed)">
            <summary>
            Creates a new manager.
            </summary>
            <param name="getIsIdUsedDelegate">
            The ID checking method that complies with GetIsIdUsed.
            </param>
        </member>
        <member name="M:DarkGDK.IdManager.#ctor(DarkGDK.GetIsIdUsed,System.Int32)">
            <summary>
            Creates a new manager.
            </summary>
            <param name="getIsIdUsedDelegate">
            The ID checking method that complies with GetIsIdUsed.
            </param>
            <param name="maximumId">
            The maximum ID this manager must return.
            </param>
        </member>
        <member name="M:DarkGDK.IdManager.IsIdUsed(System.Int32)">
            <summary>
            Checks if the ID is in use.
            </summary>
            <param name="id">The ID to be checked.</param>
            <returns>true if ID is being used; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IdManager.GetNextId">
            <summary>
            Gets the next unused ID. It checks if there is any freed ID available.
            </summary>
            <returns>An unused ID.</returns>
        </member>
        <member name="M:DarkGDK.IdManager.AddFreeId(System.Int32)">
            <summary>
            Adds the specified ID to the freed IDs stack.
            </summary>
            <param name="id">The ID that will be added to the stack.</param>
        </member>
        <member name="P:DarkGDK.IdManager.ActualSequenceNumber">
            <summary>
            Gets the actual sequence number.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.PixelShader">
            <summary>
            Represents a Pixel Shader object.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.PixelShader.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.#ctor(System.String)">
            <summary>
            Creates a pixel shader from a specified text file. Use this command in concert with 
            other pixel shader commands to create a special effect on a 3D object. Pixel shaders 
            are powerful programmable effects, and not all 3D devices support them. 
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a Pixel Shader from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>        
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.Delete">
            <summary>
            Deletes the shader and frees the ID. Delete shaders when you have no further use for 
            them to save a small amount of memory. 
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.SetOn(DarkGDK.Basic3D.Object3D)">
            <summary>
            Assign the shader to the specified object.
            </summary>
            <param name="Object">The object to apply the shader to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.SetOff(DarkGDK.Basic3D.Object3D)">
            <summary>
            Removes the object from influence of the shader.
            </summary>
            <param name="Object">The object to apply the shader to.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.PixelShader.SetTexture(System.Int32,DarkGDK.Basic2D.Image)">
            <summary>
            Selects the image to be used by the specified pixel shader. 
            </summary>
            <param name="slot">The slot.</param>
            <param name="image">The image to be used.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.Box">
            <summary>
            Represents a Box Object.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.Box.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3D object from a box mesh. The mesh is used as the root limb 
            for the 3D object. The 3D object will be constructed untextured and such 
            models will appear white when displayed. 
            </summary>
            <param name="width">Box width.</param>
            <param name="height">Box height.</param>
            <param name="depth">Box depth.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Box.#ctor(System.Single,System.Single,System.Single,DarkGDK.Basic2D.Image)">
            <summary>
            Constructs a new 3D object from a box mesh and textures it with the given
            texture.
            </summary>
            <param name="width">Box width.</param>
            <param name="height">Box height.</param>
            <param name="depth">Box depth.</param>
            <param name="texture">A texture to be applied to the box.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.Box.#ctor(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Constructs a new 3D object from a box mesh and colors it with the given
            color.
            </summary>
            <param name="width">Box width.</param>
            <param name="height">Box height.</param>
            <param name="depth">Box depth.</param>
            <param name="color">A color to be applied to the box.</param>
        </member>
        <member name="T:DarkGDK.Basic3D.TextureMode">
            <summary>
            Represents the texture mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.DBClassic">
            <summary>
            Textures like DarkBasic Classic.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.DBPro">
            <summary>
            New DarkBasic Professional texture mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.KeepDiffuseEffects">
            <summary>
            Keeps the diffuse effects.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.KeepTextureEffects">
            <summary>
            Keeps the texture effects.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.EnsureDiffuseTextureBlend">
            <summary>
            Ensures the diffuse texture belnd.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureMode.KeepMultiMaterialEffects">
            <summary>
            Keeps the multi-material effects.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.TransparencyFlag">
            <summary>
            Represents the transparency flag.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawFirstNoAlpha">
            <summary>
            Draws the first without alpha.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawFirstWithAlpha">
            <summary>
            Draws the first with alpha masking.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawSecond">
            <summary>
            Draws the second which overlaps solid geometry
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawSecondAlphaBlend">
            <summary>
            Draws the second with alpha blend.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawSecondAlphaTest">
            <summary>
            Draws the second with alpha test (only render beyond 0x000000CF alpha values).
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.WaterLine">
            <summary>
            Water line object (seperates depth sort automatically)
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TransparencyFlag.DrawSecondAlphaBlendAlphaTest">
            <summary>
            Draws the second with alpha blend and alpha test.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.ObjectRotationMode">
            <summary>
            Represents the rotation mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectRotationMode.XYZ">
            <summary>
            Ensure XYZ rotation order.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectRotationMode.ZYX">
            <summary>
            Ensure ZYX rotation order.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.LimbGlueMode">
            <summary>
            Represents the Limb Glue mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LimbGlueMode.DefaultBehavior">
            <summary>
            Regular glue object to a limb (default behaviour)
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LimbGlueMode.WipeOutFrameOrient">
            <summary>
            Wipe out frame orient, leaving position only (avoid hierarchy frame problems)
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LimbGlueMode.WipeOutChildObjectPosition">
            <summary>
            Wipe out child object position for accurate limb location placement
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.TextureCoordMode">
            <summary>
            Represents the blend texture coordinate mode
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.RegularUVStageMatch">
            <summary>
            Regular UV Stage Match
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.SphereMappingUVData">
            <summary>
            Sphere Mapping UV Data
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.CubeMappingUVData">
            <summary>
            Cube Mapping UV Data
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.StealUVDataFromStageZero">
            <summary>
            Steal UV Data From Stage Zero
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode0">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode1">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode2">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode3">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode4">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode5">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode6">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureCoordMode.TakeUVDataFromStageMode7">
            <summary>
            Take UV Data From Stage Mode Value
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.BlendMode">
            <summary>
            Represents the blend mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_DISABLE">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_SELECTARG1">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_SELECTARG2">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATE">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATE2X">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATE4X">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_ADD">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_ADDSIGNED">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_ADDSIGNED2X">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_SUBTRACT">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_ADDSMOOTH">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BLENDDIFFUSEALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BLENDTEXTUREALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BLENDFACTORALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BLENDTEXTUREALPHAPM">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BLENDCURRENTALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_PREMODULATE">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATEALPHA_ADDCOLOR">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATECOLOR_ADDALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATEINVALPHA_ADDCOLOR">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MODULATEINVCOLOR_ADDALPHA">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BUMPENVMAP">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_BUMPENVMAPLUMINANCE">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_DOTPRODUCT3">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_MULTIPLYADD">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.BlendMode.D3DTOP_LERP">
            <summary>
            Title should give a notion of what it does.
            For a better explanation, look for DirectX SDK Documentation.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.LockMode">
            <summary>
            Represents the vertex data lock mode.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LockMode.Replace">
            <summary>
            The entire vertex data is replaced in the vertex buffer.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LockMode.Refresh">
            <summary>
            The vertex buffer is merely refreshed, which is considerably faster.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.LockMode.Update">
            <summary>
            Replaces the vertex data in the vertex buffer entirely, and it will also ensure 
            the original data copy of the object is updated as well (useful when saving and
            bone animating the object). 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.TextureWrapMode">
            <summary>
            Represents all texture modes.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureWrapMode.Default">
            <summary>
            Repeats the pattern of the texture over and over
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureWrapMode.Seamless">
            <summary>
            Mirrors the texture to create a seamless texture pattern
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.TextureWrapMode.Clamp">
            <summary>
            Sets clamping which retains the color of the last pixel at the textures edge and
            paint with that throughout the out of range area. 
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.ObjectFVFValues">
            <summary>
            Represents the FVF values.
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZ">
            <summary>
            FVF_XYZ
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZRHW">
            <summary>
            FVF_XYZRHW
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZB1">
            <summary>
            FVF_XYZB1
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZB2">
            <summary>
            FVF_XYZB2
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZB3">
            <summary>
            FVF_XYZB3
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZB4">
            <summary>
            FVF_XYZB4
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_XYZB5">
            <summary>
            FVF_XYZB5
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_NORMAL">
            <summary>
            FVF_NORMAL
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_PSIZE">
            <summary>
            FVF_PSIZE
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_DIFFUSE">
            <summary>
            FVF_DIFFUSE
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_SPECULAR">
            <summary>
            FVF_SPECULAR
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX0">
            <summary>
            FVF_TEX0
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX1">
            <summary>
            FVF_TEX1
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX2">
            <summary>
            FVF_TEX2
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX3">
            <summary>
            FVF_TEX3
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX4">
            <summary>
            FVF_TEX4
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX5">
            <summary>
            FVF_TEX5
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX6">
            <summary>
            FVF_TEX6
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX7">
            <summary>
            FVF_TEX7
            </summary>
        </member>
        <member name="F:DarkGDK.Basic3D.ObjectFVFValues.FVF_TEX8">
            <summary>
            FVF_TEX8
            </summary>
        </member>
        <member name="T:DarkGDK.Net.Multiplayer">
            <summary>
            Contains all Multi-Player funcionalities.
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.DefaultGame(System.String,System.String,System.Int32,DarkGDK.Net.MultiplayerType)">
            <summary>
            Sets up a net game in one command. It will create a game if non exists on the most 
            suitable network connection, and join a game that already exists. It will select a 
            LAN connection first, then a TCP/IP connection and then Serial or Modem connection. 
            </summary>
            <param name="gameName">Describes the name of the game and will be the name of the 
            session when the game begins.</param>
            <param name="playerName">The name you wish to give the initial host of the game.</param>
            <param name="maximumPlayers">
            Sets the maximum number of players that can join the net game and can be between 2 
            and 256.
            </param>
            <param name="gameType">
            Controls the type of net game created. 
            </param>
            <returns>
            The Player Number that you can use to distinguish your player from other network 
            players. 
            </returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.CreateGame(System.String,System.String,System.Int32)">
            <summary>
            Creates a multiplayer net game. You will need to set a connection before you can 
            create a net game, however this command will automatically select the first connection 
            it finds if you have selected one. 
            </summary>
            <param name="gameName">Describes the name of the game and will be the name of the 
            session when the game begins.</param>
            <param name="playerName">The name you wish to give the initial host of the game.</param>
            <param name="maximumPlayers">Sets the maximum number of players that can join the 
            net game and can be between 2 and 256. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.CreateGame(System.String,System.String,System.Int32,DarkGDK.Net.MultiplayerType)">
            <summary>
            Creates a multiplayer net game. You will need to set a connection before you can 
            create a net game, however this command will automatically select the first connection 
            it finds if you have selected one. 
            </summary>
            <param name="gameName">Describes the name of the game and will be the name of the 
            session when the game begins.</param>
            <param name="playerName">The name you wish to give the initial host of the game.</param>
            <param name="maximumPlayers">
            Sets the maximum number of players that can join the net game and can be between 2 
            and 256.
            </param>
            <param name="gameType">
            Controls the type of net game created. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.JoinGame(System.Int32,System.String)">
            <summary>
            Joins a currently running net game session. To join a net game, you must first find 
            one using PerformChecklistForSessions. From this you can find the Session Number 
            required to join the net game. If the specified session does not exist, or there are 
            too many players in the session, this command will fail. 
            </summary>
            <param name="sessionId">The session ID to join.</param>
            <param name="playerName">The name the player uses when entering the net game session.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.FreeGame">
            <summary>
            Terminates a net game currently in session. You can only have one net game running 
            at any one time per application, so in order to create a new game you must first 
            free up any existing net games currently running. If you joined an existing net game, 
            this command will remove you from the game and the game will continue running without 
            you. 
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.CreatePlayer(System.String)">
            <summary>
            Creates another player within the net game. This player will be an additional player 
            to the default player created when you created or joined the game. You can use this
            command if you wished to populate your net game with allies or enemies to be treated 
            like regular players.
            </summary>
            <param name="playerName">The given name of the player for the net game.</param>
            <returns>The Player Number at the moment of creation.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.FreePlayer(System.Int32)">
            <summary>
            Remove a player from the current net game.   
            </summary>
            <param name="playerId">
            The Unique ID that was given to the player when it was created. You can obtain this
            value from the checklist value a result produced when you use the 
            PerformChecklistForPlayers command. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SetConnection(System.Int32)">
            <summary>
            Set the machine to a specific connection. The Connection Number can be obtained by 
            using the index of the checklist produced by the PerformChecklistForConnections 
            command.
            </summary>
            <param name="connectionID">The connection number.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SetConnection(System.Int32,System.String)">
            <summary>
            Set the machine to a specific connection. The Connection Number can be obtained by 
            using the index of the checklist produced by the PerformChecklistForConnections 
            command.
            </summary>
            <param name="connectionID">The connection number.</param>
            <param name="address">
            If you connect by TCP/IP the Address Data should be an IP and Url Address. If the
            connection type is MODEM, you should specify a phone number if you are dialling or 
            leave blank if you are answering. If the connection type is SERIAL, it is recommended 
            you leave the Address Data blank to obtain the Windows Serial Configuration Dialogue
            Box. IPX connections require no additional Address Data. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.PerformChecklistForConnections">
            <summary>
            Fills the checklist with the names of all the currently available connections on 
            the machine. There are usually four types of connections available to you including 
            TCP/IP, IPX, Modem and Serial. TCP/IP is used to connect via an IP Address and is 
            used for Internet games. IPX is used for playing net games over a Local Area Network 
            (LAN). A Modem connection is a two player net game with a Dial player and a Receive 
            player, played over a phone line. A Serial connection is a direct cable connecting 
            two machines, and acts much like a Modem connection. The index of the checklist is
            also the connection number associated with the connection description obtained from 
            this command. Use the Checklist commands in the Checklist class to read the 
            checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.PerformChecklistForSessions">
            <summary>
            Fills the checklist with the names of all the currently available sessions on the 
            previously specified connection. The session names represent a currently running net 
            game. These are net games you are able to join. The index of the checklist is also
            the session number associated with the session description obtained from this command.
            Use the Checklist commands in the Checklist class to read the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.PerformChecklistForPlayers">
            <summary>
            Fills the checklist with all the players currently seen by the currently active net 
            game. The checklist contains five pieces of data for each player listed. The checklist
            string contains the given name of the player. The checklist value A contains a Unique 
            ID provided for the player when the player appeared in the net game. This ID is only 
            unique to the application and will remain with the player as long as it resides in the 
            net game. You can use this ID to reference an array containing the players game data. 
            The checklist value B contains a special universal ID for the player, and this value 
            does not change from machine to machine. You can use it to isolate a player on any 
            machine. Checklist Value C will be set to one if the listed player is the current 
            local player. Checklist Value D will be set to one if the listed player is the host 
            player of the net game. Use the Checklist commands in the Checklist class to
            read the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendInteger(System.Int32,System.Int32)">
            <summary>
            Sends a message containing an integer value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="data">The message to be sent.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendFloat(System.Int32,System.Single)">
            <summary>
            Sends a message containing a float value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="data">The message to be sent.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendString(System.Int32,System.String)">
            <summary>
            Sends a message containing a string value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="data">The message to be sent.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendMemoryBlock(System.Int32,DarkGDK.MemoryBlock)">
            <summary>
            Sends a message containing a memory block value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="memBlock">The message to be sent.</param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendMemoryBlock(System.Int32,DarkGDK.MemoryBlock,System.Boolean)">
            <summary>
            Sends a message containing a memory block value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="memBlock">The message to be sent.</param>
            <param name="guaranteePacket">
            If true, will ensure the message is received and will not be dropped due to slow
            system performance. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendImage(System.Int32,DarkGDK.Basic2D.Image,System.Boolean)">
            <summary>
            Sends a message containing a image value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="image">The message to be sent.</param>
            <param name="guaranteePacket">
            If true, will ensure the message is received and will not be dropped due to slow
            system performance. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendBitmap(System.Int32,DarkGDK.Basic2D.Bitmap,System.Boolean)">
            <summary>
            Sends a message containing a bitmap value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="bitmap">The message to be sent.</param>
            <param name="guaranteePacket">
            If true, will ensure the message is received and will not be dropped due to slow
            system performance. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendSound(System.Int32,DarkGDK.Audio.Sound,System.Boolean)">
            <summary>
            Sends a message containing a sound value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="sound">The message to be sent.</param>
            <param name="guaranteePacket">
            If true, will ensure the message is received and will not be dropped due to slow
            system performance. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.SendMesh(System.Int32,DarkGDK.Basic3D.Mesh,System.Boolean)">
            <summary>
            Sends a message containing a mesh value to the specified player
            </summary>
            <param name="playerID">
            The Player Number. A Player Number of zero will send the message to all players 
            except you. 
            </param>
            <param name="mesh">The message to be sent.</param>
            <param name="guaranteePacket">
            If true, will ensure the message is received and will not be dropped due to slow
            system performance. 
            </param>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetMessage">
            <summary>
             Gets the oldest message from the incoming message queue and makes it the current 
            message. Any messages that are sent to this application are stored on a queue and you
            are able to take each message and process it. You can use the MessageExists property
            to determine when there are no more messages in the queue. 
            </summary>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetInteger">
            <summary>
            Returns an integer value from the current net message. The net message must be of 
            the integer type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetFloat">
            <summary>
            Returns a float value from the current net message. The net message must be of 
            the float type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetString">
            <summary>
            Returns a string value from the current net message. The net message must be of 
            the string type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetMemoryBlock">
            <summary>
            Returns a MemoryBlock value from the current net message. The net message must be of 
            the MemoryBlock type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetImage">
            <summary>
            Returns a Image value from the current net message. The net message must be of 
            the Image type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetBitmap">
            <summary>
            Returns a Bitmap value from the current net message. The net message must be of 
            the Bitmap type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetSound">
            <summary>
            Returns a Sound value from the current net message. The net message must be of 
            the Sound type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="M:DarkGDK.Net.Multiplayer.GetMesh">
            <summary>
            Returns a Mesh value from the current net message. The net message must be of 
            the Mesh type or the command will fail. You can determine the type using the 
            MessageType property.
            </summary>
            <returns>The message value.</returns>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.GameExists">
            <summary>
            True if the game exists; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.MessageExists">
            <summary>
            True if is there one or more messages on the message queue; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.PlayerFrom">
            <summary>
            Returns the Player Number that the current message was sent from. You can use this
            to determine who sent the message. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.PlayerTo">
            <summary>
            Returns the Player Number that the current message is being sent to. You can use 
            this to determine who the message is for, and whether it is a message for you. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.MessageType">
            <summary>
            Returns the type of the current message in the queue. You must check the type of a 
            message before you can read it correctly using one of the appropriate Get commands. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.GameLost">
            <summary>
            Returns true if the net game has been lost; otherwise, false.
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.GameNowHosting">
            <summary>
            Returns true if the application has just been made the host of the net game; 
            otherwise, false. During a Peer to Peer net game, if the host leaves the net
            game then host status is migrated to another player in the net game. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.BufferSize">
            <summary>
            Returns the number of items queuing in the net buffer to be processed. This buffer
            can fill up if there is too much data coming into the net game. You can use this 
            value to regulate the amount of traffic your program generates thus reducing this 
            value. An ideal count is zero. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.PlayerCreated">
            <summary>
            Returns the Player Number of a newly created player to the net game. The Player 
            Number is the Unique ID you can use to initialise a new player in your game data.
            You do not need to create a new player when you receive this signal as it has 
            already been done for you. 
            </summary>
        </member>
        <member name="P:DarkGDK.Net.Multiplayer.PlayerDestroyed">
            <summary>
            Returns the Player Number of a newly removed player from the net game. The Player
            Number is the Unique ID you have been using to reference this player. You do not
            need to free this player when you receive this signal as it has already been done 
            for you. 
            </summary>
        </member>
        <member name="T:DarkGDK.Lighting.Light">
            <summary>
            Represents the default light.
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Color(System.Drawing.Color)">
            <summary>
            Sets the color of the light.
            </summary>
            <param name="color">The color to set the  to.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Position(System.Single,System.Single,System.Single)">
            <summary>
            Positions the light.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Position(DarkGDK.Math.Vector3)">
            <summary>
            Positions the light.
            </summary>
            <param name="vector">A Vector3 representing the position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the light
            </summary>
            <param name="x">X angle.</param>
            <param name="y">Y angle.</param>
            <param name="z">Z angle.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Rotate(DarkGDK.Math.Vector3)">
            <summary>
            Rotates the light.
            </summary>
            <param name="vector">A Vector3 representing the rotation.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Point(System.Single,System.Single,System.Single)">
            <summary>
            Points the light to the specified position. Only spot lights and 
            directional lights can be pointed.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetToObjectPosition(DarkGDK.Basic3D.Object3D)">
            <summary>
            Positions the light to the specified object position.
            </summary>
            <param name="obj">The object to get information from.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetToObjectOrientation(DarkGDK.Basic3D.Object3D)">
            <summary>
            Rotates the light to the specified object position.
            </summary>
            <param name="obj">The object to get information from.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetVector3ToPosition(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the light's position.
            </summary>
            <param name="vector">The vector 3 that will get the 's information.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetVector3ToRotation(DarkGDK.Math.Vector3)">
            <summary>
            Sets the vector3 data using the X, Y and Z coordinates from the light's rotation.
            </summary>
            <param name="vector">The vector 3 that will get the 's information.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetSpot(System.Single,System.Single)">
            <summary>
            Sets the light to spot light. The spot light is defined by a constant cone of inner 
             and a gradual fading of light within an outer cone. The inner and outer cones 
            are defined by an angle ranging from 0 to 360. 
            </summary>
            <param name="inner">The inner cone.</param>
            <param name="outer">The outer cone.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetPoint(System.Single,System.Single,System.Single)">
            <summary>
            Sets the light to a point light.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetDirectional(System.Single,System.Single,System.Single)">
            <summary>
            Sets the light to a directional light.
            </summary>
            <param name="x">X direction.</param>
            <param name="y">Y direction.</param>
            <param name="z">Z direction.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetNormalizationOn">
            <summary>
            Normalizes all 'normals' contained in 3D rendering data. 
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetNormalizationOff">
            <summary>
            Deactivates normalization of all 'normals' data. 
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.Light.FogOn">
            <summary>
            Activates the effect of fogging, if the current display card supports it. All fog 
            color and distance settings are safely restored when using this method. 
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.Light.FogOff">
            <summary>
            Deactivates the effect of fogging, if the fog has been previously activated using 
            the FogOn method. All fog color and distance settings are safely stored when using
            this command, allowing a call to FogOn to restore all fog settings. 
            </summary>
        </member>
        <member name="M:DarkGDK.Lighting.Light.FogColor(System.Drawing.Color)">
            <summary>
            Sets the color of the fog.
            </summary>
            <param name="color">The color to set the fog to.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.FogDistance(System.Int32)">
            <summary>
            Set the visible distance of the fog based on the view from the camera. 
            </summary>
            <param name="distance">The Z depth at which the fog obscures 3D objects. A distance
            of zero sets the fog to obscure the camera entirely. A distance of 5000 places the 
            fog to obscure 3D objects as they are Z clipped by the system. A distance greater 
            than 5000 will not obscure distant 3D objects and will allow the objects to be 
            visibly clipped. </param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.FogDistance(System.Int32,System.Int32)">
            <summary>
            Set the visible distance of the fog based on the view from the camera. 
            </summary>
            <param name="start">The distance to start the fog.</param>
            <param name="finish">The distance to finish the fog.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.SetAmbient(System.Int32)">
            <summary>
            Sets the percentage level of ambient light. 
            </summary>
            <param name="percentage">
            Sets the percentage of . A setting of 100 provides full illumination and no 
            shadow whereas a setting of zero gives no illumination and substantial shadowing 
            on any 3D object. 
            </param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.ColorAmbient(System.Drawing.Color)">
            <summary>
            Sets the color of the ambient light.
            </summary>
            <param name="color">The color to set the ambient color to.</param>
        </member>
        <member name="M:DarkGDK.Lighting.Light.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="P:DarkGDK.Lighting.Light.Id">
            <summary>
            Gets the ID of the class.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.Type">
            <summary>
            Gets the light type.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.Visible">
            <summary>
            Gets or sets the visible state of the light (Hidden/Shown).
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.PositionX">
            <summary>
            Gets the light X position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.PositionY">
            <summary>
            Gets the light Y position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.PositionZ">
            <summary>
            Gets the light Z position.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.DirectionX">
            <summary>
            Gets the light X direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.DirectionY">
            <summary>
            Gets the light Y direction.
            </summary>
        </member>
        <member name="P:DarkGDK.Lighting.Light.DirectionZ">
            <summary>
            Gets the light Z direction.
            </summary>
        </member>
        <member name="T:DarkGDK.IO.Keys">
            <summary>
            Represents all Keycodes.
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Esc">
            <summary>
            Escape key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D1">
            <summary>
            Key 1
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D2">
            <summary>
            Key 2
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D3">
            <summary>
            Key 3
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D4">
            <summary>
            Key 4
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D5">
            <summary>
            Key 5
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D6">
            <summary>
            Key 6
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D7">
            <summary>
            Key 7
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D8">
            <summary>
            Key 8
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D9">
            <summary>
            Key 9
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D0">
            <summary>
            Key 0
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.DMinus">
            <summary>
            Key -
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.DPlus">
            <summary>
            Key +
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.BackSpace">
            <summary>
            Backspace key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Tab">
            <summary>
            Tab key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.W">
            <summary>
             W key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.P">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.BracketOpen">
            <summary>
             { key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.BracketClose">
            <summary>
            } key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Enter">
            <summary>
            Enter/Return key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.CtrlLeft">
            <summary>
            Left Control key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.L">
            <summary>
            L
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.SemiColon">
            <summary>
            ; key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Apostrophe">
            <summary>
            ' key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Tilde">
            <summary>
            ~
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.ShiftLeft">
            <summary>
            Left Shift key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.ReverseSolidus">
            <summary>
            \ key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Comma">
            <summary>
            , key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Period">
            <summary>
            . key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Solidus">
            <summary>
            / key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.ShiftRight">
            <summary>
            Right Shift key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadMultiply">
            <summary>
            Numpad * key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.AltLeft">
            <summary>
            Left Alt key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Space">
            <summary>
            Space key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.CapsLock">
            <summary>
            Capslock key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumLock">
            <summary>
            NumLock key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.ScrollLock">
            <summary>
            Scroll Lock key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad7">
            <summary>
            Numpad 7 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad8">
            <summary>
            Numpad 8 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad9">
            <summary>
            Numpad 9 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadMinus">
            <summary>
            Numpad - key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad4">
            <summary>
            Numpad 4 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad5">
            <summary>
            Numpad 5 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad6">
            <summary>
            Numpad 6 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadPlus">
            <summary>
            Numpad + key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad1">
            <summary>
            Numpad 1 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad2">
            <summary>
            Numpad 2 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad3">
            <summary>
            Numpad 3 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Numpad0">
            <summary>
            Numpad 0 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadDel">
            <summary>
            Numpad Del key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Insert">
            <summary>
            Insert key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Home">
            <summary>
            Home key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.PageUp">
            <summary>
            Page Up key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Delete">
            <summary>
            Delete key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.End">
            <summary>
            End key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.PageDown">
            <summary>
            Page Down key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Up">
            <summary>
            Up Arrow key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Down">
            <summary>
            Down Arrow key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Left">
            <summary>
            Left Arrow key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Right">
            <summary>
            Right Arrow key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadEnter">
            <summary>
            Numpad Enter key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.NumpadDivide">
            <summary>
            Numpad / key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.WindowsLeft">
            <summary>
            Left Windows key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.WindowsRight">
            <summary>
            Right Windows key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.AltRight">
            <summary>
            Right Alt key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.CtrlRight">
            <summary>
            Right Control key
            </summary>
        </member>
        <member name="F:DarkGDK.IO.Keys.Special">
            <summary>
            Special key
            </summary>
        </member>
        <member name="T:DarkGDK.IO.File">
            <summary>
            The base class for all file Input, Output and Directory management
            </summary>
        </member>
        <member name="F:DarkGDK.IO.File.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.Exist(System.Int32)">
            <summary>
            Determines whether the specified ID is already in use.
            </summary>
            <param name="id">ID to check.</param>
            <returns>true if the specified ID is already in use; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.IO.File.#ctor">
            <summary>
            Finds an unused ID before instantiating.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.SetCurrentDirectory(System.String)">
            <summary>
            This command will set the current working directory to the specified path. The path can be absolute or relative. Absolute paths contain the entire path including the drive letter. A relative path assumes the program has a valid current working directory and continues the path from the current location. 
            </summary>
            <param name="sDirectory"></param>
        </member>
        <member name="M:DarkGDK.IO.File.Dir">
            <summary>
            This command will output the entire contents of the current working directory to the screen. The command serves little use for effective file scanning, but provides a simple way to view files. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.DriveList">
            <summary>
            This command will output the available drives to the screen. The command serves little use for effective drive scanning, but provides a simple way to view available drives. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.PerformCheckListForFiles">
            <summary>
            This command will output the contents of the current working directory to a checklist. The command provides a convenient way to store the contents of a directory without using additional data structures, but does tie up the checklist when in use. Use the Checklist commands in the System command set to access the checklist. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.PerformCheckListForDrives">
            <summary>
            This command will output the available drives to a checklist. The command provides a convenient way to store the available drives without using additional data structures, but does tie up the checklist when in use. Use the Checklist commands in the System command set to access the checklist.
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.FindFirst">
            <summary>
            This command will begin a file search by locating the first file in the current working directory. If this command succeeds, a file will be stored internally and its data can be extracted using the GetFileName, GetFileDate and GetFileType commands. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.FindNext">
            <summary>
            This command will continue a file search by locating the next file in the current working directory. If this command succeeds, a file will be stored internally and its data can be extracted using the GetFoundFileName, GetFoundFileDate and GetFoundFileType commands. A file search can be started with the FindFirst command. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.MakeFile(System.String)">
            <summary>
            This command will create an empty file. The filename must not exist or the command will fail. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.DeleteFile(System.String)">
            <summary>
            This command will delete an existing file. The file must exist or the command will fail. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.CopyFile(System.String,System.String)">
            <summary>
            This command will copy an existing file to a new file. The destination filename must not exist or the command will fail. 
            </summary>
            <param name="sSourceFile"></param>
            <param name="sDestFile"></param>
        </member>
        <member name="M:DarkGDK.IO.File.RenameFile(System.String,System.String)">
            <summary>
            This command will rename an existing file to a new name. The new filename must not exist or the command will fail. 
            </summary>
            <param name="sFileFrom"></param>
            <param name="sFileTo"></param>
        </member>
        <member name="M:DarkGDK.IO.File.MoveFile(System.String,System.String)">
            <summary>
            This command will move an existing file to a new location. The destination filename must not exist or the command will fail.
            </summary>
            <param name="sFileFrom"></param>
            <param name="sFileTo"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteByte(System.String,System.Int32,System.Int32)">
            <summary>
            This command will write a single byte to the specified file. The position is specified in bytes from the beginning of the filedata. You can use this to modify a file at the byte level. 
            </summary>
            <param name="sFilename"></param>
            <param name="nPos"></param>
            <param name="nByte"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ReadByteFromFile(System.String,System.Int32)">
            <summary>
            This command will read a single byte from the specified file. The position is specified in bytes from the beginning of the filedata. You can use this to obtain byte perfect reading of any file. 
            </summary>
            <param name="sFileName"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.MakeDirectory(System.String)">
            <summary>
            This command will create an empty directory. The directory name must not exist or the command will fail. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.DeleteDirectory(System.String)">
            <summary>
            This command will delete an existing directory. The directory must exist or the command will fail. The directory must be completely empty or this command will not succeed. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.DeleteDirectory(System.String,System.Int32)">
            <summary>
            This command will delete an existing directory. The directory must exist or the command will fail. The directory must be completely empty or this command will not succeed.
            </summary>
            <param name="sFileName"></param>
            <param name="nFlag"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ExecuteFile(System.String,System.String,System.String)">
            <summary>
            This command will shell execute a file. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory. The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
            </summary>
            <param name="sFileName"></param>
            <param name="sCommandLine"></param>
            <param name="sDirectory"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ExecuteFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            This command will shell execute a file. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory. The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
            </summary>
            <param name="sFileName"></param>
            <param name="sCommandLine"></param>
            <param name="sDirectory"></param>
            <param name="nFlag"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ExecuteExecutable(System.String,System.String,System.String)">
            <summary>
            This command will initiate an application process and return you the handle of that process. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory.
            The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
            </summary>
            <param name="sFileName"></param>
            <param name="sCommandLine"></param>
            <param name="sDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ExecuteExecutable(System.String,System.String,System.String,System.Int32)">
            <summary>
            This command will initiate an application process and return you the handle of that process. The commandline is used to pass additional data into the file being executed. The directory is used to optionally specify a directory other than the current directory.
            The Priority value specifies a process priority which tells Windows how much processing time to allocate to the process.
            The file must exist or the command will fail. Passing a document, rather than an executable as the filename will cause the document to be opened. If the optional Wait Flag value is set to one, then the application will wait until the executable has finished. 
            </summary>
            <param name="sFileName"></param>
            <param name="sCommandLine"></param>
            <param name="sDirectory"></param>
            <param name="nPriority"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.StopExecutable(System.UInt32)">
            <summary>
            This command will terminate an application process based on the handle of the process that was returned from ExecuteExecutable
            </summary>
            <param name="ulHandleExecuteFileProcess"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteFilemapValue(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="sFilemapName"></param>
            <param name="ulValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteFilemapString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sFilemapName"></param>
            <param name="sValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ReadFilemapValue(System.String)">
            <summary>
            
            </summary>
            <param name="sFileMapName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadFilemapString(System.String)">
            <summary>
            
            </summary>
            <param name="sFileMapName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.OpenToRead(System.String)">
            <summary>
            This command will open a file, ready for reading. The file must exist or the command will fail. You can open up to 32 files at the same time, using a file number range of 1 through to 32. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.OpenToWrite(System.String)">
            <summary>
            This command will open a file, ready for writing. The file must not exist or the command will fail. You can open up to 32 files at the same time, using a file number range of 1 through to 32. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.Close">
            <summary>
            This command will close a file that has been previously opened using dbOpenToRead or dbOpenToWrite. The file must be open or the command will fail. 
            </summary>
        </member>
        <member name="M:DarkGDK.IO.File.ReadByte">
            <summary>
            This command will read a byte of data from the file and store it as an integer value in the variable specified. The file specified by the file number must be open or the command will fail. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadWord">
            <summary>
            This command will read a word of data from the file and store it as an integer value in the variable specified. A word represents two bytes. The file specified by the file number must be open or the command will fail. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadFile">
            <summary>
            This command will read a long word of data from the file and store it as an integer value in the variable specified. This is the standard command for reading data where the datatype is not important. The file specified by the file number must be open or the command will fail. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadFloat">
            <summary>
            This command will read a float from the file and store it in the variable specified. The file specified by the file number must be open or the command will fail. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadString">
            <summary>
            This command will read a string from the file and store it as a string in the variable specified. The file specified by the file number must be open or the command will fail. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.ReadFileBlock(System.String)">
            <summary>
            This command will extract an entire file from a pack (PAK) file. A pack file is like a normal file you create yourself using the Open and Close commands, but have the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.SkipBytes(System.Int32)">
            <summary>
            This command will skip the specified number of bytes in a current open file, opened using the dbOpenToRead command. You would use this command where you have fore-knowledge of the file contents. 
            </summary>
            <param name="nSkipValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ReadDirectoryBlock(System.String)">
            <summary>
            This command extracts an entire directory from a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
            </summary>
            <param name="sFolder"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteByte(System.Byte)">
            <summary>
            This command will write a byte of data to the file from an integer value. The file specified by the file number must be open or the command will fail. 
            </summary>
            <param name="bValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteWord(System.Int16)">
            <summary>
            This command will write a word of data to the file from an integer value. A word represents two bytes. The file specified by the file number must be open or the command will fail. 
            </summary>
            <param name="wValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteLong(System.Int32)">
            <summary>
            This command will write a long word of data to the file from an integer value. A long word represents four bytes. The file specified by the file number must be open or the command will fail. 
            </summary>
            <param name="nValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteFloat(System.Single)">
            <summary>
            This command will write a float to the file from a real value. The file specified by the file number must be open or the command will fail. 
            </summary>
            <param name="fValue"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteString(System.String)">
            <summary>
            This command will write the specified string to the file. The string will be terminated in the file with the standard carriage return ASCII characters (13)+(10). The file specified by the file number must be open or the command will fail. 
            </summary>
            <param name="sString"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteFileBlock(System.String)">
            <summary>
            This command will write a file to a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteFileBlock(System.String,System.Int32)">
            <summary>
            This command will write a file to a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
            </summary>
            <param name="sFileName"></param>
            <param name="nFlag"></param>
        </member>
        <member name="M:DarkGDK.IO.File.WriteDirectoryBlock(System.String)">
            <summary>
            This command will write an entire directory to a pack file. A pack file is like a normal file you create yourself using the dbOpen and dbClose commands, but has the additional feature that as well as storing numerics and strings, you can also store entire files and directories. 
            </summary>
            <param name="sFolder"></param>
        </member>
        <member name="M:DarkGDK.IO.File.ReadMemoryBlock(DarkGDK.MemoryBlock)">
            <summary>
            Create a memblock from the currently open file. The file must contain a memblock created with the dbWriteMemBlock command, at the exact position within the file. You must specify the file and memblock numbers using integer values. 
            </summary>
            <param name="oMemoryBlock"></param>
        </member>
        <member name="M:DarkGDK.IO.File.MakeMemoryBlockFromFile">
            <summary>
            Create a memblock from the file specified. The memblock will be the same size as the currently open file, and contain the entire data of the file specified. You must specify the file and memblock numbers using integer values. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.WriteMemoryBlock(DarkGDK.MemoryBlock)">
            <summary>
            Write the specified memblock to a file open for writing. You can store multiple memblocks within a currently open file, and is useful for creating your own file formats. To retrieve the memblock you must use the dbReadMemBlock command. You must specify the file and memblock numbers using integer values. 
            </summary>
            <param name="oMemoryBlock"></param>
        </member>
        <member name="M:DarkGDK.IO.File.MakeFileFromMemoryBlock(DarkGDK.MemoryBlock)">
            <summary>
            Create a file from a memblock, allowing you to directly create an arrangement of bytes in a memblock and create an exact file layout with no additional bytes written. 
            </summary>
            <param name="oMemoryBlock"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.GetCurrentDirectory">
            <summary>
            This command returns the current working directory by which all File I/O functions operate
            where no paths are provided
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.GetFoundFileName">
            <summary>
            This command will get the filename of the file currently recorded by the file search commands dbFindFirst and dbFindNext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.GetFoundFileType">
            <summary>
            This command will get the type value of the file currently recorded by the file search commands dbFindFirst and dbFindNext. A type value of zero indicates it is a file. A type value of 1 indicates it is a directory. A type value of -1 indicates there are no more files in the current working directory. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.GetFoundFileDate">
            <summary>
            This command will get the last accessed date of the file currently recorded by the file search commands dbFindFirst and dbFindNext. A type value of zero indicates it is a file. A type value of 1 indicates it is a directory. A type value of -1 indicates there are no more files in the current working directory. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.GetFileCreation">
            <summary>
            This command will get the last creation date of the file currently recorded by the file search commands dbFindFirst and dbFindNext. A type value of zero indicates it is a file. A type value of 1 indicates it is a directory. A type value of -1 indicates there are no more files in the current working directory. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.FileExists(System.String)">
            <summary>
            This command will return true if the specified file exists, otherwise false.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.Length(System.String)">
            <summary>
            This command will return the size of the specified file in bytes, otherwise zero is returned. The file must exist or the command will fail. 
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.DoesPathExist(System.String)">
            <summary>
            This command will return true if the specified path exists, otherwise false.  You can use this command to check whether a directory exists. 
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.IsOpen(DarkGDK.IO.File)">
            <summary>
            This command will return true if the file specified is open, otherwise false.
            </summary>
            <param name="oFile"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.IsOpen">
            <summary>
            This command will return true if this file instance is open, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.IsEOF(DarkGDK.IO.File)">
            <summary>
            This command will return true if the specified file object has no more data to read, otherwise false.
            </summary>
            <param name="oFile"></param>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.IO.File.IsEOF">
            <summary>
            This command will return true if this file has no more data to read, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DarkGDK.BindListValues">
            <summary>
            This class is used to hold data as well as strings for Listboxes and Comboboxes
            </summary>
        </member>
        <member name="T:DarkGDK.Math.Matrix4">
            <summary>
            Represents a Matrix4 math object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.#ctor">
            <summary>
            Creates a new Matrix4 object.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Delete">
            <summary>
            Deletes the Matrix4 and frees the ID.
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildLookAtLH(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Builds a LOOKAT left handed Matrix.
            </summary>
            <param name="eye">Eye vector.</param>
            <param name="at">At vector.</param>
            <param name="up">Up vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildLookAtRH(DarkGDK.Math.Vector3,DarkGDK.Math.Vector3,DarkGDK.Math.Vector3)">
            <summary>
            Builds a LOOKAT right handed Matrix.
            </summary>
            <param name="eye">Eye vector.</param>
            <param name="at">At vector.</param>
            <param name="up">Up vector.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildOrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Orthogonal left handed Matrix.
            </summary>
            <param name="width">Orthogonal width.</param>
            <param name="height">Orthogonal height.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildOrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Orthogonal right handed Matrix.
            </summary>
            <param name="width">Orthogonal width.</param>
            <param name="height">Orthogonal height.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Field-Of-View left handed Matrix.
            </summary>
            <param name="fov">Field-Of-View distance.</param>
            <param name="aspect">Field-Of-View aspect.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Field-Of-View right handed Matrix.
            </summary>
            <param name="fov">Field-Of-View distance.</param>
            <param name="aspect">Field-Of-View aspect.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildPerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Perspective left handed Matrix. 
            </summary>
            <param name="width">Perspective width.</param>
            <param name="height">Perspective height.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildPerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Perspective right handed Matrix. 
            </summary>
            <param name="width">Perspective width.</param>
            <param name="height">Perspective height.</param>
            <param name="near">Near plane distance.</param>
            <param name="far">Far plane distance.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildReflection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a Reflection Matrix. 
            </summary>
            <param name="a">Value A.</param>
            <param name="b">Value B.</param>
            <param name="c">Value C.</param>
            <param name="d">Value D.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.BuildRotationAxis(DarkGDK.Math.Vector3,System.Single)">
            <summary>
            Builds a Rotation Matrix. 
            </summary>
            <param name="axis">Rotation axis.</param>
            <param name="angle">Rotation angle.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.CopyTo(DarkGDK.Math.Matrix4)">
            <summary>
            Copies the content of this matrix to another.
            </summary>
            <param name="matrixA">The Matrix4 to copy this to.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.CopyFrom(DarkGDK.Math.Matrix4)">
            <summary>
            Copies the content from another matrix to this.
            </summary>
            <param name="matrixA">The Matrix4 to copy from.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Projection">
            <summary>
            Copies the projection matrix to this matrix. 
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.View">
            <summary>
            Copies the view matrix into this matrix. 
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.World">
            <summary>
            Copies the world matrix into this matrix. 
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Inverse(DarkGDK.Math.Matrix4)">
            <summary>
            Inverts the matrix.
            </summary>
            <param name="matrixA">The matrix get the values from.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.RotateX(System.Single)">
            <summary>
            Rotate the matrix on it's x axis.
            </summary>
            <param name="value">Value of rotation.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.RotateY(System.Single)">
            <summary>
            Rotate the matrix on it's y axis.
            </summary>
            <param name="value">Value of rotation.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.RotateZ(System.Single)">
            <summary>
            Rotate the matrix on it's z axis.
            </summary>
            <param name="value">Value of rotation.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.RotateYPR(System.Single,System.Single,System.Single)">
             <summary>
            Builds a matrix from Pitch Yaw Roll values.
             </summary>
             <param name="yaw">Yaw angle.</param>
             <param name="pitch">Pitch angle.</param>
             <param name="roll">Roll angle.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the matrix.
            </summary>
            <param name="x">X scale.</param>
            <param name="y">Y scale.</param>
            <param name="z">Z scale.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.SetIdentity">
            <summary>
            Sets the specified matrix to a standard identity matrix. Transforming a vector or 
            matrix using an identity matrix will not produce a change in the resulting data. 
            </summary>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Produces a translation matrix. 
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="z">Z value.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Transpose(DarkGDK.Math.Matrix4)">
            <summary>
            Transposes the matrix.
            </summary>
            <param name="matrixA">A Matrix4 object.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Equals(DarkGDK.Math.Matrix4)">
            <summary>
            Checks if if this matrix is identical to the one specified.
            </summary>
            <param name="matrix4">The Matrix4 to check with.</param>
            <returns>true if both are identical; otherwise, false.</returns>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Add(DarkGDK.Math.Matrix4,DarkGDK.Math.Matrix4)">
            <summary>
            Adds two matrix values and add to this one.
            </summary>
            <param name="matrixA">A Matrix4 object.</param>
            <param name="matrixB">A Matrix4 object.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Divide(System.Single)">
            <summary>
            Divides the matrix.
            </summary>
            <param name="value">Value to divide by.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Multiply(System.Single)">
            <summary>
            Multiplies the matrix by a value.
            </summary>
            <param name="value">The value to multiply the matrix.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Multiply(DarkGDK.Math.Matrix4,DarkGDK.Math.Matrix4)">
            <summary>
            Multiplies the two specified matrices together.
            </summary>
            <param name="matrixA">A Matrix4 object.</param>
            <param name="matrixB">A Matrix4 object.</param>
        </member>
        <member name="M:DarkGDK.Math.Matrix4.Subtract(DarkGDK.Math.Matrix4,DarkGDK.Math.Matrix4)">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="matrixA">A Matrix4 object.</param>
            <param name="matrixB">A Matrix4 object.</param>
        </member>
        <member name="P:DarkGDK.Math.Matrix4.IsIdentity">
            <summary>
            Returns true if the matrix is an identity matrix.
            </summary>
        </member>
        <member name="T:DarkGDK.Engine">
            <summary>
            Main class of the engine that the main class of any application using it should
            inherit from, as it gives access to main functionalities, like Initalization
            and loop, and also to the original DGDK objects. For additional classes that 
            needs access to the original DGDK objects, you should not inherit from this class
            but from EngineClass instead.
            </summary>
        </member>
        <member name="M:DarkGDK.Engine.InitializeGDK">
            <summary>
            This function is used to initialize the DarkGDK.NET toolkit, and must be
            called first before any other DarkGDK.NET class or function can be used
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Engine.StopGDKLoop">
            <summary>
            Used for Windows Forms application to inform Engine that the main form
            was closed.
            </summary>
        </member>
        <member name="M:DarkGDK.Engine.ExitPrompt(System.String,System.String)">
            <summary>
            Create a message box when the application exits. You can use this command to prompt
            that your application is a demo version or use it to report debug information in your 
            standalone executables. 
            </summary>
            <param name="message">The message of the dialog.</param>
            <param name="caption">The caption of the dialog.</param>
        </member>
        <member name="P:DarkGDK.Engine.LoopGDK">
            <summary>
            If you're using Viewport, call this property during your game loop to maintain internal 
            operations of the DGDK.NET toolkit. 
            </summary>
        </member>
        <member name="P:DarkGDK.Engine.WorkingDirectory">
            <summary>
            Gets or sets the current working directory to the specified path. The path can be 
            absolute or relative. Absolute paths contain the entire path including the drive 
            letter. A relative path assumes the program has a valid current working directory 
            and continues the path from the current location. 
            </summary>
        </member>
        <member name="T:DarkGDK.Core">
            <summary>
            Contains all core methods and properties.
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SyncOn">
            <summary>
            This command is used to improve the performance of demanding programs that require a 
            consistent frame rate. This is especially true of games. By default, sync is set to off which 
            allows the system to automatically handle screen refreshing. When IdgdkCore.SyncOn is used, your 
            program is responsible for handling screen refreshing. You can refresh the screen using the 
            IdgdkCore.Sync command. When you want the system to automatically handle screen refreshing again, 
            you can use the IdgdkCore.SyncOff command. By placing the IdgdkCore.Sync command at the end of your 
            main program loop, all drawing and refresh tasks can occur in a single call. This dramatically 
            increases the speed and smoothness of graphical operations, allowing your programs to run at their best. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SyncOff">
            <summary>
            This command is used to improve the performance of demanding programs that require a 
            consistent frame rate. This is especially true of games. By default, sync is set to off which 
            allows the system to automatically handle screen refreshing. When IdgdkCore.SyncOn is used, your 
            program is responsible for handling screen refreshing. You can refresh the screen using the 
            IdgdkCore.Sync command. When you want the system to automatically handle screen refreshing again, 
            you can use the IdgdkCore.SyncOff command. By placing the IdgdkCore.Sync command at the end of your 
            main program loop, all drawing and refresh tasks can occur in a single call. This dramatically 
            increases the speed and smoothness of graphical operations, allowing your programs to run at their best. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.Sync">
            <summary>
            This command is used to improve the performance of demanding programs that require a 
            consistent frame rate. This is especially true of games. By default, sync is set to off 
            which allows the system to automatically handle screen refreshing. When SYNC ON is used, 
            your program is responsible for handling screen refreshing. You can refresh the screen 
            using the SYNC command. When you want the system to automatically handle screen refreshing 
            again, you can use the SYNC OFF command. By placing the SYNC command at the end of your main 
            program loop, all drawing and refresh tasks can occur in a single call. This dramatically 
            increases the speed and smoothness of graphical operations, allowing your programs to run at 
            their best. It is important to note the very first SYNC will only render the back buffer and 
            reveal the contents of that buffer on the second SYNC command, as the system is based on a 
            double buffered refresh.
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SyncRate(System.Int32)">
            <summary>
            This command is used to change the default refresh rate IdgdkCore.SyncOn uses to control the speed of 
            the IdgdkCore.Sync update speed. The default rate sustains the 'Frames Per Second' at no more than 40fps. 
            You can specify an integer value from 1 to 1000 to set a new maximum rate. A rate of zero will allow 
            the program to refresh as fast as the system will allow. A forced sync rate cannot produce an accurate
            rating as in order to keep the refresh smooth, the code can only work with milliseconds which is not an 
            accurate method of timing. The system is designed to treat smoothness more important than frame rating 
            accuracy. 
            </summary>
            <param name="rate">Frame rate</param>
        </member>
        <member name="M:DarkGDK.Core.SyncMask(System.UInt32)">
            <summary>
            This command will set the engine to ignore certain cameras, thus saving performance when the cameras 
            are not needed. The parameter is a DWORD mask, which by default is set to 0xFFFFFFFF. You can adjust 
            this mask to filter out the cameras you do not wish to render. Camera zero is represented in bit 1, 
            camera one in bit 2, and so on. A bit state of zero means the camera will not be rendered, and a bit 
            state of 1 means the camera will be rendered, as is the default behaviour. 
            </summary>
            <param name="mask">DWORD Mask</param>
        </member>
        <member name="M:DarkGDK.Core.FastSync">
            <summary>
            This command will perform a regular IdgdkCore.Sync command, and will skip 
            processing a mandatory check for windows messages. You can use this 
            command to squeeze a few extra clock cycles out of your main loop and 
            make your applications faster. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.ClearScreen">
            <summary>
            Clears the screen using the current background ink color
            previously specified with the Basic2D.Ink command. This method 
            differs from the Basic2D.ClearBackground method found in the Basic2D command 
            set which will paint the screen with a specified color.
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SetCursor(System.Int32,System.Int32)">
            <summary>
            Sets the cursor position used by the Print command. 
            You can use this command to place basic text anywhere on the screen. 
            </summary>
            <param name="x">X position</param>
            <param name="y">Y position</param>
        </member>
        <member name="M:DarkGDK.Core.Print(System.String)">
            <summary>
            Prints text, numbers, variables and strings to the screen. You can position where the 
            text will print using the IdgdkCore.SetCursor command. You can separate items you wish to print on the 
            same line by using either a semi-colon or a comma. If you add a semi-colon at the end of your print 
            list, the next IdgdkCore.Print command will add to the end of the last print line. 
            </summary>
            <param name="text">The information to print.</param>
        </member>
        <member name="M:DarkGDK.Core.Input">
            <summary>
            This method will accept input data from the keyboard and store the entry 
            in the specified variable. The data is output to the screen as it is entered.
            </summary>
            <returns>The string that was typed.</returns>
        </member>
        <member name="M:DarkGDK.Core.Input(System.String)">
            <summary>
            This command will accept input data from the keyboard and store the entry 
            in the specified variable. The string that heads the input command is 
            optional, and allows the user to provide an on-screen prompt for the data.
            The data is output to the screen as it is entered.
            </summary>
            <param name="promptText">The text that will be prompted.</param>
            <returns>The string that was typed.</returns>
        </member>
        <member name="M:DarkGDK.Core.Wait(System.Int32)">
            <summary>
            This command will pause the program for the specified duration. The iWait parameter is specified 
            in milliseconds, where 1000 units represent 1 second. 
            </summary>
            <param name="delay">How long is the delay?</param>
        </member>
        <member name="M:DarkGDK.Core.Sleep(System.Int32)">
            <summary>
            This command will pause the program for the specified duration. The iWait parameter is specified 
            in milliseconds, where 1000 units represent 1 second. 
            </summary>
            <param name="delay">How long is the delay?</param>
        </member>
        <member name="M:DarkGDK.Core.SuspendForKey">
            <summary>
            Pauses the program from running until a key is pressed. To detect for a specific key, 
            please refer to the Keyboard.State or Keyboard.ScanCode. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SuspendForMouse">
            <summary>
            Pauses the program from running until a mouse button is pressed. To detect for a
            specific mouse button, please refer to the Mouse.Click property. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.DrawToBack">
            <summary>
            Ensures all 2D activities such as drawing text, images and 
            bitmaps are performed before any 3D is rendered. This allows you to create 2D
            effects in the background. In most cases 3D will obscure most if not all 2D 
            activities and so this is not the default behaviour.
            </summary>
        </member>
        <member name="M:DarkGDK.Core.DrawToFront">
            <summary>
            Ensures all 2D activities such as drawing text, images and 
            bitmaps are performed after the 3D has rendered, allowing you to overlap the
            screen with 2D content. This is the default behaviour.
            </summary>
        </member>
        <member name="M:DarkGDK.Core.DrawSpritesFirst">
            <summary>
            Changes the order in which sprites are drawn to the screen. 
            By calling this command, all sprites will be drawn to the screen 'before' 
            any 3D is drawn. This will cause the sprites to appear to be behind 3D objects,
            and most likely obscured by them. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.DrawSpritesLast">
            <summary>
            Changes the order in which sprites are drawn to the screen. 
            By calling this command, all sprites will be drawn to the screen 'after'
            any 3D is drawn. This will cause the sprites to appear over the top of any
            3D being rendered. This is the default behaviour. 
            </summary>
        </member>
        <member name="M:DarkGDK.Core.Randomize(System.Int32)">
            <summary>
            Reseeds the random number generator. If the random number generator is not reseeded 
            the Random method can return the same sequence of random numbers. To change the 
            sequence of random number every time the program is run, place a Randomize statement 
            with an integer number at the beginning of the program and change the value with each 
            run. 
            </summary>
            <param name="seed">The ammount of seed.</param>
        </member>
        <member name="M:DarkGDK.Core.Random(System.Int32)">
            <summary>
            Returns a random number between 0 and the specified range.
            </summary>
            <param name="range">The maximum number that shoud be returned.</param>
            <returns>A random number.</returns>
        </member>
        <member name="M:DarkGDK.Core.Cos(System.Single)">
            <summary>
            Calculates the cosine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The cosine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.Sin(System.Single)">
            <summary>
            Calculates the sine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The sine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.Tan(System.Single)">
            <summary>
            Calculates the tangent of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The tangent of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.ACos(System.Single)">
            <summary>
            Calculates the arccosine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The arccosine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.ASin(System.Single)">
            <summary>
            Calculates the arcsine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The arcsine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.ATan(System.Single)">
            <summary>
            Calculates the arctangent of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The arctangent of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.ATanFull(System.Single,System.Single)">
            <summary>
            Calculates the angle of two points in degrees between 0 and 360. The distance values 
            are calculated by finding the distance between two points for both the X and Y axis. 
            </summary>
            <param name="xValue">First point.</param>
            <param name="yValue">Secont point.</param>
            <returns>The angle of two points in degrees.</returns>
        </member>
        <member name="M:DarkGDK.Core.HCos(System.Single)">
            <summary>
            Calculates the hyperbolic cosine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The hyperbolic cosine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.HSin(System.Single)">
            <summary>
            Calculates the hyperbolic sine of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The hyperbolic sine of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.HTan(System.Single)">
            <summary>
            Calculates the hyperbolic tangent of the specified value.
            </summary>
            <param name="value">A value in degrees between 0 and 360.</param>
            <returns>The hyperbolic tangent of the angle.</returns>
        </member>
        <member name="M:DarkGDK.Core.Sqrt(System.Single)">
            <summary>
            Calculates the square root of the specified value.
            </summary>
            <param name="value">A numeric value.</param>
            <returns>The result of the calculations.</returns>
        </member>
        <member name="M:DarkGDK.Core.Abs(System.Single)">
            <summary>
            Calculates the absolute (positive number) of the specified value.
            </summary>
            <param name="value">A numeric value.</param>
            <returns>The result of the calculations.</returns>
        </member>
        <member name="M:DarkGDK.Core.Int(System.Single)">
            <summary>
            Calculates the largest integer before the decimal point of a real number.
            </summary>
            <param name="value">A numeric value.</param>
            <returns>The result of the calculations.</returns>
        </member>
        <member name="M:DarkGDK.Core.Exp(System.Single)">
            <summary>
            Returns a result raised to the power of the input value
            </summary>
            <param name="value">A numeric value.</param>
            <returns>The result of the calculations.</returns>
        </member>
        <member name="M:DarkGDK.Core.CurveValue(System.Single,System.Single,System.Single)">
            <summary>
            Returns an auto-interpolated value based on a given speed. This method will gradually
            move a number from its current value to a destination value at a certain speed. This
            method can be used to create the technique of controlling a cars velocity as it breaks 
            to a halt. 
            </summary>
            <param name="destination">The destination value.</param>
            <param name="current">The current value.</param>
            <param name="speed">The gradual speed.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:DarkGDK.Core.CurveAngle(System.Single,System.Single,System.Single)">
            <summary>
            Returns an auto-interpolated angle based on a given speed. This method will gradually
            move a number from its current value to a destination value at a certain speed. This 
            method can be used to create the technique of a camera swinging into position from 
            another location by curving the value of the camera angles.
            </summary>
            <param name="destination">The destination value.</param>
            <param name="current">The current value.</param>
            <param name="speed">The gradual speed.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:DarkGDK.Core.WrapValue(System.Single)">
            <summary>
            Returns a value that does not exceed the range of 0 to 360. Where a value is specified 
            that exceeds this range, the method will wrap the value around to bring it back within 
            the range. This method is best understood by using the number of a clock as a mental
            picture of how a number wraps. If the clock hand points to 11 and is then advanced 2 
            hours, the number has to wrap from 12 around to 1 to keep the cycle going. 
            </summary>
            <param name="angle">The value that will be wrapped.</param>
            <returns>A value between 0 and 360 degrees.</returns>
        </member>
        <member name="M:DarkGDK.Core.NewXValue(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that represents the new X position of a point in 3D space. This 
            method is used in conjunction with NewYValue and NewZValue methods to move from 
            one point in space to another point in space based on a specified angle. Rather than 
            using COS/SIN maths, these methods simplify the task of moving coordinates within 
            3D space. The step value specifies how far in the specified direction you would like 
            to calculate. 
            </summary>
            <param name="x">Current X position.</param>
            <param name="angle">The angle to move.</param>
            <param name="Step">How far to move.</param>
            <returns>The new X value.</returns>
        </member>
        <member name="M:DarkGDK.Core.NewYValue(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that represents the new Y position of a point in 3D space. This 
            method is used in conjunction with NewXValue and NewZValue methods to move from 
            one point in space to another point in space based on a specified angle. Rather than 
            using COS/SIN maths, these methods simplify the task of moving coordinates within 
            3D space. The step value specifies how far in the specified direction you would like 
            to calculate. 
            </summary>
            <param name="y">Current Y position.</param>
            <param name="angle">The angle to move.</param>
            <param name="Step">How far to move.</param>
            <returns>The new Y value.</returns>
        </member>
        <member name="M:DarkGDK.Core.NewZValue(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that represents the new Z position of a point in 3D space. This 
            method is used in conjunction with NewXValue and NewYValue methods to move from 
            one point in space to another point in space based on a specified angle. Rather than 
            using COS/SIN maths, these methods simplify the task of moving coordinates within 
            3D space. The step value specifies how far in the specified direction you would like 
            to calculate. 
            </summary>
            <param name="z">Current Z position.</param>
            <param name="angle">The angle to move.</param>
            <param name="Step">How far to move.</param>
            <returns>The new Z value.</returns>
        </member>
        <member name="M:DarkGDK.Core.WriteToClipboard(System.String)">
            <summary>
            Writes a string to the system clipboard. The system clipboard remains intact even 
            after the program has been terminated and can be used to transfer values from program 
            to program, or otherwise retain string data beyond the scope of the program. 
            </summary>
            <param name="text">The information to write on the clipboard.</param>
        </member>
        <member name="M:DarkGDK.Core.ReadFromClipboard">
            <summary>
            Reads a string stored in the system clipboard. The system clipboard remains intact
            even after the program has been terminated and can be used to transfer values from 
            program to program, or otherwise retain string data beyond the scope of the program. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Core.WriteToRegistry(System.String,System.String,System.Int32)">
            <summary>
            Writes a value to the specified registry location. 
            </summary>
            <param name="folder">Points to the general area within the registry.</param>
            <param name="key">Points to the label that describes the data stored within the registry folder.</param>
            <param name="value">The value you wish to store. </param>
        </member>
        <member name="M:DarkGDK.Core.WriteToRegistry(System.String,System.String,System.String)">
            <summary>
            Writes a value to the specified registry location. 
            </summary>
            <param name="folder">Points to the general area within the registry.</param>
            <param name="key">Points to the label that describes the data stored within the registry folder.</param>
            <param name="value">The value you wish to store. </param>
        </member>
        <member name="M:DarkGDK.Core.GetRegistry(System.String,System.String)">
            <summary>
            Gets a value from the specified registry location. 
            </summary>
            <param name="folder">Points to the general area within the registry.</param>
            <param name="key">Points to the label that describes the data stored within the registry folder.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:DarkGDK.Core.GetRegistryString(System.String,System.String)">
            <summary>
            Gets a value from the specified registry location. 
            </summary>
            <param name="folder">Points to the general area within the registry.</param>
            <param name="key">Points to the label that describes the data stored within the registry folder.</param>
            <returns>The stored value.</returns>
        </member>
        <member name="M:DarkGDK.Core.ExecuteExecutable(System.String,System.String,System.String)">
            <summary>
            Executes a file. The file must exist or the command will fail. Passing a document, 
            rather than an executable as the filename will cause the document to be opened.
            </summary>
            <param name="fileName"></param>
            <param name="commandLine">Passes additional data into the file being executed.</param>
            <param name="directory">Specifies a directory other than the current directory.</param>
            <returns>The application exit code.</returns>
        </member>
        <member name="M:DarkGDK.Core.ExecuteExecutable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a file. The file must exist or the command will fail. Passing a document, 
            rather than an executable as the filename will cause the document to be opened.
            </summary>
            <param name="fileName"></param>
            <param name="commandLine">Passes additional data into the file being executed.</param>
            <param name="directory">Specifies a directory other than the current directory.</param>
            <param name="wait">If true, the application will wait until the executable has finished. </param>
            <returns>The application exit code.</returns>
        </member>
        <member name="M:DarkGDK.Core.SyncEnableQuad">
            <summary>
            Enables the synchronized Quad
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SyncDisableQuad">
            <summary>
            Disables the synchronized Quad
            </summary>
        </member>
        <member name="M:DarkGDK.Core.SyncRenderQuad">
            <summary>
            Renders the synchronized Quad
            </summary>
        </member>
        <member name="P:DarkGDK.Core.Timer">
            <summary>
            Gets the internal system time, which continually increments at a thousand times a
            second. The system time is returned in milliseconds, where 1000 units represent 1 
            second.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.HighPerformanceTimer">
            <summary>
            Gets the internal system time, which continually increments at a thousand times a 
            second. The system time is returned in milliseconds, where 1000 units represent 1 
            second. This is a high performance timer function and can be used for accurate time 
            keeping.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.InKey">
            <summary>
            Gets the character string of the key currently being pressed.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.Time">
            <summary>
            get the internal system time, which continually increments at a thousand times a 
            second. The system time is returned in milliseconds, where 1000 units represent 1 
            second. The timer resolution limited to the accuracy of the system timer. If you need 
            to use a higher precision timer, use HighPerformanceTimer.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.VideoMemoryAvailable">
            <summary>
            Gets the total video memory available.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.TotalSystemMemoryAvailable">
            <summary>
            Gets the total system memory available.
            </summary>
        </member>
        <member name="P:DarkGDK.Core.TotalMemoryAvailable">
            <summary>
            Gets the total memory available.
            </summary>
        </member>
        <member name="T:DarkGDK.Basic3D.VertexData">
            <summary>
            Contains all vertex data methods and properties for a locked vertex data.
            </summary>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.AddMesh(DarkGDK.Basic3D.Mesh)">
            <summary>
            Adds a mesh to a locked vertexdata, converting its format to match the vertexdata format. 
            </summary>
            <param name="mesh">The mesh to be added.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.DeleteMesh(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes an amount of data from the locked vertexdata, equivilant to the size and 
            description of the mesh passed in.
            </summary>
            <param name="vertex1">The starting vertex.</param>
            <param name="vertex2">The ending vertex.</param>
            <param name="index1">The starting index.</param>
            <param name="index2">The ending index.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetDiffuse(System.Int32)">
            <summary>
            Gets the diffuse of the locked vertexdata.
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <returns>The diffuse color.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetIndexData(System.Int32)">
            <summary>
            Return the indice stored at the specified index. The indice data is formatted as groups
            of three, each group representing a polygon by referencing a vertex in the vertexdata. 
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <returns>The indice stored at the specified index</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetNormalsX(System.Int32)">
            <summary>
            Gets the X normal direction of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The normal direction.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetNormalsY(System.Int32)">
            <summary>
            Gets the Y normal direction of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The normal direction.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetNormalsZ(System.Int32)">
            <summary>
            Gets the Z normal direction of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The normal direction.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetPositionX(System.Int32)">
            <summary>
            Gets the X position of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The X position.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetPositionY(System.Int32)">
            <summary>
            Gets the Y position of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The Y position.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetPositionZ(System.Int32)">
            <summary>
            Gets the Z position of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The Z position.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetU(System.Int32)">
            <summary>
            Gets a float representing the U-Data value of the locked vertexdata. This typically is 
            used to specify the horizontal position of where the vertex grabs its texel from the 
            associated texture, usually between 0.0 and 1.0. 
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The U data.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetU(System.Int32,System.Int32)">
            <summary>
            Gets a float representing the U-Data value of the locked vertexdata. This typically is 
            used to specify the horizontal position of where the vertex grabs its texel from the 
            associated texture, usually between 0.0 and 1.0. 
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <param name="index">Use this to access UV data in secondary stages of the vertexdata. </param>
            <returns>The U data.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetV(System.Int32)">
            <summary>
            Gets a float representing the V-Data value of the locked vertexdata. This typically is 
            used to specify the horizontal position of where the vertex grabs its texel from the 
            associated texture, usually between 0.0 and 1.0. 
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <returns>The V data.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.GetV(System.Int32,System.Int32)">
            <summary>
            Gets a float representing the V-Data value of the locked vertexdata. This typically is 
            used to specify the horizontal position of where the vertex grabs its texel from the 
            associated texture, usually between 0.0 and 1.0. 
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <param name="index">Use this to access UV data in secondary stages of the vertexdata. </param>
            <returns>The V data.</returns>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.LockForLimb(DarkGDK.Basic3D.Limb)">
            <summary>
            Locks the vertexdata of a limb within an object, allowing it to be modified by the
            vertexdata methods. Use Unlock() to release this lock and apply the changes you have
            made. 
            </summary>
            <param name="limb">The limb to be locked.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.LockForLimb(DarkGDK.Basic3D.Limb,DarkGDK.Basic3D.LockMode)">
            <summary>
            Locks the vertexdata of a limb within an object, allowing it to be modified by the
            vertexdata methods. Use Unlock() to release this lock and apply the changes you have
            made. 
            </summary>
            <param name="limb">The limb to be locked.</param>
            <param name="lockMode">The lock mode.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.LockForMesh(DarkGDK.Basic3D.Mesh)">
            <summary>
            Locks the vertexdata of a mesh, allowing it to be modified by the vertexdata methods. 
            Use Unlock to release this lock and apply the changes you have made. 
            </summary>
            <param name="mesh">The mesh to be locked.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetDiffuse(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the diffuse color of the vertex.
            </summary>
            <param name="vertex">The number of the vertex.</param>
            <param name="color">The color to be applied.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetIndexData(System.Int32,System.Int32)">
            <summary>
            Sets the indice index of the index buffer of the vertexdata locked.
            </summary>
            <param name="index">The index buffer.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetNormals(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the normals data of a vertex in the locked vertexdata. 
            </summary>
            <param name="vertex">The vertex index.</param>
            <param name="x">X direction.</param>
            <param name="y">Y direction.</param>
            <param name="z">Z direction.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetPosition(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the position data of a vertex in the locked vertexdata. 
            </summary>
            <param name="vertex">The vertex index.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetUV(System.Int32,System.Single,System.Single)">
            <summary>
            Sets the UV data of a vertex in the locked vertexdata.
            </summary>
            <param name="vertex">The vertex index.</param>
            <param name="u">The u data.</param>
            <param name="v">The v data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.SetUV(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Sets the UV data of a vertex in the locked vertexdata.
            </summary>
            <param name="vertex">The vertex index.</param>
            <param name="index"> Allows UV data in the secondary stages of the vertexdata to be 
            edited. </param>
            <param name="u">The u data.</param>
            <param name="v">The v data.</param>
        </member>
        <member name="M:DarkGDK.Basic3D.VertexData.Unlock">
            <summary>
            Unlocks a vertexdata item currently locked and edited. Changes using the vertexdata
            methods will not take effect until the object/mesh/limb has been unlocked using
            this methods. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.VertexData.IndexCount">
            <summary>
            Gets the number of indices in the locked vertexdata. Indice data is formatted as a set
            of three values, representing an index to a vertex, and these three references form a
            polygon. These groups of three are used to describe a list of polygons. If the count 
            is zero, it means the vertexdata has no indice data and relies on vertex information 
            only, storred as groups of three vertex indices per polygon. 
            </summary>
        </member>
        <member name="P:DarkGDK.Basic3D.VertexData.VertexCount">
            <summary>
            Get the number of vertices locked by the VertexData.
            </summary>
        </member>
        <member name="T:DarkGDK.World.BSPCollision">
            <summary>
            Manages collision with BSP Worlds
            </summary>
        </member>
        <member name="F:DarkGDK.World.BSPCollision.idManager">
            <summary>
            Internal ID Manager.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.#ctor">
            <summary>
            Creates a new BSPCollision.
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetCameraCollision(DarkGDK.Camera.CameraBase,System.Single,System.Boolean)">
            <summary>
            Sets the collision sphere of the camera for the BSP world. This will automatically adjust 
            the position of the camera when it attempts to enter solid BSP geometry. The camera will 
            be repositioned to produce the smoothest collision response. It is worth noting that even 
            commands that reposition the camera are subject to the BSP collision once active. To avoid 
            problems repositioning the camera, simply deactivate and reactivate the collision during 
            positioning. 
            </summary>
            <param name="camera">The camera to which the collision will be assigned.</param>
            <param name="radius">The radius of the collision sphere.</param>
            <param name="response">
                If true, the new position backtracks to the last collision free position.
            </param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetCameraCollisionRadius(DarkGDK.Camera.CameraBase,System.Single,System.Single,System.Single)">
            <summary>
            Sets the BSP camera collision radius used during collision detection. You can use this 
            command in combination with the Collision.SetHeightAdjustment to fine tune 
            your collision entity within the BSP universe. 
            </summary>
            <param name="camera">The camera to which the collision will be assigned.</param>
            <param name="x">Sphere width.</param>
            <param name="y">Sphere height.</param>
            <param name="z">Sphere depth.</param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetObjectCollision(DarkGDK.Basic3D.Object3D,System.Single,System.Boolean)">
            <summary>
            Sets the collision sphere of the specified object for the BSP world. This will 
            automatically adjust the position of the object when it attempts to enter solid BSP 
            geometry. The object will be repositioned to produce the smoothest collision response. 
            It is worth noting that even commands that reposition the object are subject to the BSP 
            collision once active. To avoid problems repositioning your objects, simply deactivate 
            and reactivate the collision during positioning. 
            </summary>
            <param name="obj">The object to which the collision will be assigned.</param>
            <param name="radius">The radius of the collision sphere.</param>
            <param name="response">
                If true, the new position backtracks to the last collision free position.
            </param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetObjectCollisionRadius(DarkGDK.Basic3D.Object3D,System.Single,System.Single,System.Single)">
            <summary>
            Sets the BSP object collision radius used during collision detection. You can use this 
            command in combination with the IdgdkWorld.SetBSPCollisionHeightAdjustment to fine tune 
            your collision entity within the BSP universe. 
            </summary>
            <param name="obj">The object to which the collision will be assigned.</param>
            <param name="x">Sphere width.</param>
            <param name="y">Sphere height.</param>
            <param name="z">Sphere depth.</param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetThreshhold(System.Single)">
            <summary>
            Sets the sensitivity of the auto-adjustment effect of the automated collision activated 
            by the Collision.SetObjectCollision and Collision.SetCameraCollision commands. 
            The default is zero, which causes the collision to slowly affect the entity from even 
            the smallest pull of negative Y movement. The effect is a slow slide down uneven surfaces. 
            Increasing the sensitivity value will provide a range under which this sliding effect 
            does not occur. 
            </summary>
            <param name="sensivity">Ammount os sensitivity.</param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetOff">
            <summary>
            Removes the collision system assigned to the BSP collision index previously assigned a 
            collision type using the command ICollision.SetObjectCollision and
            Collision.SetCameraCollision 
            </summary>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.SetHeightAdjustment(System.Single)">
            <summary>
            Sets an offset used when positioning the collision sphere used during BSP collision. 
            This can be useful for when the mass of your collision area of the object is off center 
            from the mathematical center of your entity, or when you would like to move your camera 
            off the floor of a BSP world to give your first person player some height. 
            </summary>
            <param name="height">Height offset.</param>
        </member>
        <member name="M:DarkGDK.World.BSPCollision.Process">
            <summary>
            Calculates the effect the BSP collision has on the respective camera or object. Normally
            the BSP collision effects are calculated and applied during the refresh, however with 
            this command you can process the effect immediately. This can be useful when you wish to 
            obtain the new position of a collided object or camera position for additional 
            calculations such as associating a carried item to the location of a player or enemy 
            character.
            </summary>
        </member>
        <member name="P:DarkGDK.World.BSPCollision.Hit">
            <summary>
            Return true if the collision hit solid BSP geometry during the last rendering cycle. 
            Use this command in combination with the X, Y and Z to return sliding collision data 
            from the collision event. 
            </summary>
        </member>
        <member name="P:DarkGDK.World.BSPCollision.X">
            <summary>
            Returns an X coordinate modifier value when the collision is involved 
            in a hit against solid BSP geometry during the rendering cycle. Use this command in 
            combination with the Collision.Hit command to determine when the hit occurs. 
            </summary>
        </member>
        <member name="P:DarkGDK.World.BSPCollision.Y">
            <summary>
            Returns an Y coordinate modifier value when the collision is involved 
            in a hit against solid BSP geometry during the rendering cycle. Use this command in 
            combination with the Collision.Hit command to determine when the hit occurs.
            </summary>
        </member>
        <member name="P:DarkGDK.World.BSPCollision.Z">
            <summary>
            Returns an Z coordinate modifier value when the collision is involved 
            in a hit against solid BSP geometry during the rendering cycle. Use this command in 
            combination with the Collision.Hit command to determine when the hit occurs.
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.Sound3D">
            <summary>
            Represents a 3D Sound object.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.#ctor(System.String)">
            <summary>
            Loads a WAV sound file as a special 3D sound. The specified WAV sound file must be 
            Mono or the load will fail. 3D sounds can be placed in 3D space and heard through 
            the virtual ears of a listener. The listener can also be placed anywhere in 3D space 
            creating true surround sound capabilities.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.#ctor(DarkGDK.ResourceAssembly,System.String)">
            <summary>
            Loads a 3D Sound from an embedded resource on the specified ResourceAssembly
            </summary>
            <param name="resourceAssembly">The instance of ResourceAssembly that has the resource</param>
            <param name="resourceName">The complete name of the embedded resource</param>          
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.#ctor">
            <summary>
            Non parameterized constructor used for cloning purposes
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.Clone">
            <summary>
            Creates a new Sound by cloning this one. Cloning a sound will create a new
            sound that can be played like any other loaded sound, but uses the same WAV data 
            of the original sound. The advantage of sound cloning is that one hundred sounds 
            could be used with only a single instance of the sound data stored in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.Position(System.Single,System.Single,System.Single)">
            <summary>
            Positions the 3D sound in 3D space. The 3D sounds you hear are calculated based on 
            the position of the sound and the listener. 
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.PositionListener(System.Single,System.Single,System.Single)">
            <summary>
            Position the listener in 3D space. The 3D sounds you hear are calculated based on 
            the position of the sound and the listener. 
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.RotateListener(System.Single,System.Single,System.Single)">
            <summary>
            Sets the direction of the listener. The 3D sounds being played would sound different 
            based on which direction the listener was facing. 
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
        </member>
        <member name="M:DarkGDK.Audio.Sound3D.ScaleListener(System.Single)">
            <summary>
            Scales the listener in 3D space. The 3D sounds you hear are calculated based on the 
            scale as well as the position of the sound and the listener. 
            </summary>
            <param name="scale">
            Sets the sensitivity of the listener. A value of 1 is the default setting, and a 
            value of 0.5 will make the listener half as sensitive.
            </param>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.PositionX">
            <summary>
            Gets the current X position of the 3D sound.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.PositionY">
            <summary>
            Gets the current Y position of the 3D sound.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.PositionZ">
            <summary>
            Gets the current Z position of the 3D sound.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerPositionX">
            <summary>
            Gets the current X position of the listener.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerPositionY">
            <summary>
            Gets the current Y position of the listener.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerPositionZ">
            <summary>
            Gets the current Z position of the listener.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerAngleX">
            <summary>
            Gets the current X angle of the listener.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerAngleY">
            <summary>
            Gets the current Y angle of the listener.
            </summary>
        </member>
        <member name="P:DarkGDK.Audio.Sound3D.ListenerAngleZ">
            <summary>
            Gets the current Z angle of the listener.
            </summary>
        </member>
        <member name="T:DarkGDK.Audio.RecordSound">
            <summary>
            Represents a Recording Sound object.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.RecordSound.#ctor">
            <summary>
            Starts recording a sound from the microphone for five seconds.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.RecordSound.#ctor(System.Int32)">
            <summary>
            Starts recording a sound from the microphone for the duration specified.
            </summary>
            <param name="duration">The duration of time to record.</param>
        </member>
        <member name="M:DarkGDK.Audio.RecordSound.StopRecordingSound">
            <summary>
            Stops recording the sound.
            </summary>
        </member>
        <member name="M:DarkGDK.Audio.RecordSound.Save(System.String)">
            <summary>
            Saves the captured sound to a sound file.
            </summary>
            <param name="fileName">The file to save the sound to.</param>
        </member>
        <member name="T:DarkGDK.Particle.SnowParticle">
            <summary>
            Represents a particle object that acts like snow.
            </summary>
        </member>
        <member name="M:DarkGDK.Particle.SnowParticle.#ctor(DarkGDK.Basic2D.Image,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a particles object and set it to act like snow drift. The area specified 
            by the position and size is identical to that of a box created with the same 
            dimensions. 
            </summary>
            <param name="image">The image of the particles.</param>
            <param name="maximum">Maximum number of particles.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="z">Z position.</param>
            <param name="width">Widht of the particles.</param>
            <param name="height">Height of the particles.</param>
            <param name="depth">Depth of the particles.</param>
        </member>
    </members>
</doc>
